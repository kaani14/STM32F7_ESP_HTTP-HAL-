
ESP8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008788  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  08008988  08008988  00018988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed4  08008ed4  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  08008ed4  08008ed4  00018ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008edc  08008edc  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08008ee4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000250  08009134  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08009134  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecfa  00000000  00000000  0002027e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202e  00000000  00000000  0002ef78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00030fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00031bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b1f  00000000  00000000  00032770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de1e  00000000  00000000  0005b28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc2e6  00000000  00000000  000690ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e0  00000000  00000000  001653e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000250 	.word	0x20000250
 800021c:	00000000 	.word	0x00000000
 8000220:	08008970 	.word	0x08008970

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000254 	.word	0x20000254
 800023c:	08008970 	.word	0x08008970

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <uart_transmit>:
char APIrequest[100];
int APIrequest_size;


void uart_transmit(char* tx_data, uint16_t receive_size)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	807b      	strh	r3, [r7, #2]
	sprintf((char*)data, "%s\r\n",tx_data);
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	490c      	ldr	r1, [pc, #48]	; (8000a30 <uart_transmit+0x40>)
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <uart_transmit+0x44>)
 8000a02:	f004 fa95 	bl	8004f30 <siprintf>
	HAL_UART_Transmit(&huart4, data, strlen((char*)data), 1000);
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <uart_transmit+0x44>)
 8000a08:	f7ff fc24 	bl	8000254 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a14:	4907      	ldr	r1, [pc, #28]	; (8000a34 <uart_transmit+0x44>)
 8000a16:	4808      	ldr	r0, [pc, #32]	; (8000a38 <uart_transmit+0x48>)
 8000a18:	f002 fb8e 	bl	8003138 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart4, rx_data, receive_size);
 8000a1c:	887b      	ldrh	r3, [r7, #2]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4906      	ldr	r1, [pc, #24]	; (8000a3c <uart_transmit+0x4c>)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <uart_transmit+0x48>)
 8000a24:	f002 fc1b 	bl	800325e <HAL_UART_Receive_IT>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	08008988 	.word	0x08008988
 8000a34:	20000344 	.word	0x20000344
 8000a38:	20000414 	.word	0x20000414
 8000a3c:	200003a8 	.word	0x200003a8

08000a40 <ESP8266_Test>:

//If OK received, turn on the greed LED else turn on the red LED
bool ESP8266_Test()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	uart_transmit("AT", 11);
 8000a44:	210b      	movs	r1, #11
 8000a46:	482f      	ldr	r0, [pc, #188]	; (8000b04 <ESP8266_Test+0xc4>)
 8000a48:	f7ff ffd2 	bl	80009f0 <uart_transmit>

	HAL_TIM_Base_Start(&htim14);
 8000a4c:	482e      	ldr	r0, [pc, #184]	; (8000b08 <ESP8266_Test+0xc8>)
 8000a4e:	f002 fa15 	bl	8002e7c <HAL_TIM_Base_Start>
	while (__HAL_TIM_GET_COUNTER(&htim14) < 20000)
 8000a52:	e02e      	b.n	8000ab2 <ESP8266_Test+0x72>
	{
		OK_received = strstr((const char*)rx_data, ok);
 8000a54:	492d      	ldr	r1, [pc, #180]	; (8000b0c <ESP8266_Test+0xcc>)
 8000a56:	482e      	ldr	r0, [pc, #184]	; (8000b10 <ESP8266_Test+0xd0>)
 8000a58:	f004 fa8a 	bl	8004f70 <strstr>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4a2d      	ldr	r2, [pc, #180]	; (8000b14 <ESP8266_Test+0xd4>)
 8000a60:	6013      	str	r3, [r2, #0]
		if (strcmp(OK_received, ok) == 0)
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <ESP8266_Test+0xd4>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4929      	ldr	r1, [pc, #164]	; (8000b0c <ESP8266_Test+0xcc>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fbe9 	bl	8000240 <strcmp>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d11e      	bne.n	8000ab2 <ESP8266_Test+0x72>
			{
				__HAL_TIM_DISABLE(&htim14);
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <ESP8266_Test+0xc8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6a1a      	ldr	r2, [r3, #32]
 8000a7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d10f      	bne.n	8000aa4 <ESP8266_Test+0x64>
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <ESP8266_Test+0xc8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6a1a      	ldr	r2, [r3, #32]
 8000a8a:	f240 4344 	movw	r3, #1092	; 0x444
 8000a8e:	4013      	ands	r3, r2
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d107      	bne.n	8000aa4 <ESP8266_Test+0x64>
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <ESP8266_Test+0xc8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <ESP8266_Test+0xc8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f022 0201 	bic.w	r2, r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	481b      	ldr	r0, [pc, #108]	; (8000b18 <ESP8266_Test+0xd8>)
 8000aaa:	f001 f89f 	bl	8001bec <HAL_GPIO_WritePin>
				return true;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e025      	b.n	8000afe <ESP8266_Test+0xbe>
	while (__HAL_TIM_GET_COUNTER(&htim14) < 20000)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <ESP8266_Test+0xc8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d9c9      	bls.n	8000a54 <ESP8266_Test+0x14>
			}
	}
	__HAL_TIM_DISABLE(&htim14);
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <ESP8266_Test+0xc8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6a1a      	ldr	r2, [r3, #32]
 8000ac6:	f241 1311 	movw	r3, #4369	; 0x1111
 8000aca:	4013      	ands	r3, r2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d10f      	bne.n	8000af0 <ESP8266_Test+0xb0>
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <ESP8266_Test+0xc8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6a1a      	ldr	r2, [r3, #32]
 8000ad6:	f240 4344 	movw	r3, #1092	; 0x444
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d107      	bne.n	8000af0 <ESP8266_Test+0xb0>
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <ESP8266_Test+0xc8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <ESP8266_Test+0xc8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f022 0201 	bic.w	r2, r2, #1
 8000aee:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af6:	4808      	ldr	r0, [pc, #32]	; (8000b18 <ESP8266_Test+0xd8>)
 8000af8:	f001 f878 	bl	8001bec <HAL_GPIO_WritePin>
	return false;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	08008990 	.word	0x08008990
 8000b08:	20000498 	.word	0x20000498
 8000b0c:	08008a04 	.word	0x08008a04
 8000b10:	200003a8 	.word	0x200003a8
 8000b14:	2000040c 	.word	0x2000040c
 8000b18:	40020400 	.word	0x40020400

08000b1c <ESP8266_WiFiSetup>:

//Set to station mode and connect to WiFi
void ESP8266_WiFiSetup(char* SSID, char* password)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	HAL_Delay(5000);
 8000b26:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b2a:	f000 fceb 	bl	8001504 <HAL_Delay>
	uart_transmit("AT+CWMODE=1", 20);
 8000b2e:	2114      	movs	r1, #20
 8000b30:	480a      	ldr	r0, [pc, #40]	; (8000b5c <ESP8266_WiFiSetup+0x40>)
 8000b32:	f7ff ff5d 	bl	80009f0 <uart_transmit>

	HAL_Delay(5000);
 8000b36:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b3a:	f000 fce3 	bl	8001504 <HAL_Delay>
	sprintf((char*)AT_Commmand, "AT+CWJAP=%s,%s",SSID, password);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	4907      	ldr	r1, [pc, #28]	; (8000b60 <ESP8266_WiFiSetup+0x44>)
 8000b44:	4807      	ldr	r0, [pc, #28]	; (8000b64 <ESP8266_WiFiSetup+0x48>)
 8000b46:	f004 f9f3 	bl	8004f30 <siprintf>
	uart_transmit(AT_Commmand, 90);
 8000b4a:	215a      	movs	r1, #90	; 0x5a
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <ESP8266_WiFiSetup+0x48>)
 8000b4e:	f7ff ff4f 	bl	80009f0 <uart_transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	08008994 	.word	0x08008994
 8000b60:	080089a0 	.word	0x080089a0
 8000b64:	200002e0 	.word	0x200002e0

08000b68 <TCP_Connect>:

//Single connection
void TCP_Connect(char* IP, int port)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
	HAL_Delay(10000);
 8000b72:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b76:	f000 fcc5 	bl	8001504 <HAL_Delay>
	uart_transmit("AT+CIPMUX=0", 20);
 8000b7a:	2114      	movs	r1, #20
 8000b7c:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <TCP_Connect+0x40>)
 8000b7e:	f7ff ff37 	bl	80009f0 <uart_transmit>

	HAL_Delay(5000);
 8000b82:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b86:	f000 fcbd 	bl	8001504 <HAL_Delay>
	sprintf((char*)AT_Commmand, "AT+CIPSTART=\"TCP\",%s,%d", IP, port);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4907      	ldr	r1, [pc, #28]	; (8000bac <TCP_Connect+0x44>)
 8000b90:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <TCP_Connect+0x48>)
 8000b92:	f004 f9cd 	bl	8004f30 <siprintf>
	uart_transmit(AT_Commmand, 56);
 8000b96:	2138      	movs	r1, #56	; 0x38
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <TCP_Connect+0x48>)
 8000b9a:	f7ff ff29 	bl	80009f0 <uart_transmit>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	080089b0 	.word	0x080089b0
 8000bac:	080089bc 	.word	0x080089bc
 8000bb0:	200002e0 	.word	0x200002e0

08000bb4 <TS_Write>:

//HTTP request
void TS_Write(char* channel_write_key, double sensor_output)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	ed87 0b00 	vstr	d0, [r7]
	sprintf(APIrequest, "GET /update?key=%s&field1=%lf",channel_write_key,sensor_output);
 8000bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bc4:	e9cd 2300 	strd	r2, r3, [sp]
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4913      	ldr	r1, [pc, #76]	; (8000c18 <TS_Write+0x64>)
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <TS_Write+0x68>)
 8000bce:	f004 f9af 	bl	8004f30 <siprintf>
	HAL_Delay(10000);
 8000bd2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bd6:	f000 fc95 	bl	8001504 <HAL_Delay>
	APIrequest_size = strlen (APIrequest) + 2; //+2 for /r/n
 8000bda:	4810      	ldr	r0, [pc, #64]	; (8000c1c <TS_Write+0x68>)
 8000bdc:	f7ff fb3a 	bl	8000254 <strlen>
 8000be0:	4603      	mov	r3, r0
 8000be2:	3302      	adds	r3, #2
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <TS_Write+0x6c>)
 8000be8:	601a      	str	r2, [r3, #0]
	sprintf(AT_Commmand, "AT+CIPSEND=%d", APIrequest_size);
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <TS_Write+0x6c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <TS_Write+0x70>)
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <TS_Write+0x74>)
 8000bf4:	f004 f99c 	bl	8004f30 <siprintf>
	uart_transmit(AT_Commmand, 22);
 8000bf8:	2116      	movs	r1, #22
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <TS_Write+0x74>)
 8000bfc:	f7ff fef8 	bl	80009f0 <uart_transmit>

	HAL_Delay(5000);
 8000c00:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c04:	f000 fc7e 	bl	8001504 <HAL_Delay>
	uart_transmit(APIrequest, 86);
 8000c08:	2156      	movs	r1, #86	; 0x56
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <TS_Write+0x68>)
 8000c0c:	f7ff fef0 	bl	80009f0 <uart_transmit>
}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	080089d4 	.word	0x080089d4
 8000c1c:	2000027c 	.word	0x2000027c
 8000c20:	20000278 	.word	0x20000278
 8000c24:	080089f4 	.word	0x080089f4
 8000c28:	200002e0 	.word	0x200002e0

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f000 fc0b 	bl	800144a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 f82e 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f000 f8fc 	bl	8000e34 <MX_GPIO_Init>
  MX_UART4_Init();
 8000c3c:	f000 f8ca 	bl	8000dd4 <MX_UART4_Init>
  MX_TIM14_Init();
 8000c40:	f000 f8a4 	bl	8000d8c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  OK_received_flag = ESP8266_Test();
 8000c44:	f7ff fefc 	bl	8000a40 <ESP8266_Test>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <main+0x5c>)
 8000c4e:	701a      	strb	r2, [r3, #0]
  ESP8266_WiFiSetup(ESP.SSID, ESP.password);
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <main+0x60>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <main+0x60>)
 8000c56:	6852      	ldr	r2, [r2, #4]
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff5e 	bl	8000b1c <ESP8266_WiFiSetup>
  TCP_Connect(ESP.IP, ESP.port);
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <main+0x60>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <main+0x60>)
 8000c66:	68d2      	ldr	r2, [r2, #12]
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff7c 	bl	8000b68 <TCP_Connect>
  TS_Write(ESP.write_API_key, sensor_output);
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <main+0x60>)
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <main+0x64>)
 8000c76:	ed92 7b00 	vldr	d7, [r2]
 8000c7a:	eeb0 0b47 	vmov.f64	d0, d7
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff98 	bl	8000bb4 <TS_Write>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <main+0x58>
 8000c86:	bf00      	nop
 8000c88:	20000410 	.word	0x20000410
 8000c8c:	20000058 	.word	0x20000058
 8000c90:	20000050 	.word	0x20000050

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0b8      	sub	sp, #224	; 0xe0
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c9e:	2234      	movs	r2, #52	; 0x34
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 faf0 	bl	8004288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	2290      	movs	r2, #144	; 0x90
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 fae1 	bl	8004288 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <SystemClock_Config+0xf0>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a2e      	ldr	r2, [pc, #184]	; (8000d84 <SystemClock_Config+0xf0>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <SystemClock_Config+0xf0>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <SystemClock_Config+0xf4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ce6:	4a28      	ldr	r2, [pc, #160]	; (8000d88 <SystemClock_Config+0xf4>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <SystemClock_Config+0xf4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d06:	2310      	movs	r3, #16
 8000d08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 ff82 	bl	8001c20 <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d22:	f000 f9a9 	bl	8001078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 fa15 	bl	800217c <HAL_RCC_ClockConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d58:	f000 f98e 	bl	8001078 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d60:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fc06 	bl	800257c <HAL_RCCEx_PeriphCLKConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000d76:	f000 f97f 	bl	8001078 <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	37e0      	adds	r7, #224	; 0xe0
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007000 	.word	0x40007000

08000d8c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_TIM14_Init+0x40>)
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <MX_TIM14_Init+0x44>)
 8000d94:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1601-1;
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <MX_TIM14_Init+0x40>)
 8000d98:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000d9c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_TIM14_Init+0x40>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20001;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_TIM14_Init+0x40>)
 8000da6:	f644 6221 	movw	r2, #20001	; 0x4e21
 8000daa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <MX_TIM14_Init+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_TIM14_Init+0x40>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_TIM14_Init+0x40>)
 8000dba:	f002 f807 	bl	8002dcc <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000dc4:	f000 f958 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000498 	.word	0x20000498
 8000dd0:	40002000 	.word	0x40002000

08000dd4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_UART4_Init+0x58>)
 8000dda:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <MX_UART4_Init+0x5c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_UART4_Init+0x58>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_UART4_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_UART4_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_UART4_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_UART4_Init+0x58>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_UART4_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_UART4_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_UART4_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_UART4_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_UART4_Init+0x58>)
 8000e18:	f002 f940 	bl	800309c <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000e22:	f000 f929 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000414 	.word	0x20000414
 8000e30:	40004c00 	.word	0x40004c00

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b7f      	ldr	r3, [pc, #508]	; (8001048 <MX_GPIO_Init+0x214>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a7e      	ldr	r2, [pc, #504]	; (8001048 <MX_GPIO_Init+0x214>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b7c      	ldr	r3, [pc, #496]	; (8001048 <MX_GPIO_Init+0x214>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	4b79      	ldr	r3, [pc, #484]	; (8001048 <MX_GPIO_Init+0x214>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a78      	ldr	r2, [pc, #480]	; (8001048 <MX_GPIO_Init+0x214>)
 8000e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b76      	ldr	r3, [pc, #472]	; (8001048 <MX_GPIO_Init+0x214>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b73      	ldr	r3, [pc, #460]	; (8001048 <MX_GPIO_Init+0x214>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a72      	ldr	r2, [pc, #456]	; (8001048 <MX_GPIO_Init+0x214>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b70      	ldr	r3, [pc, #448]	; (8001048 <MX_GPIO_Init+0x214>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b6d      	ldr	r3, [pc, #436]	; (8001048 <MX_GPIO_Init+0x214>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a6c      	ldr	r2, [pc, #432]	; (8001048 <MX_GPIO_Init+0x214>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b6a      	ldr	r3, [pc, #424]	; (8001048 <MX_GPIO_Init+0x214>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	4b67      	ldr	r3, [pc, #412]	; (8001048 <MX_GPIO_Init+0x214>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a66      	ldr	r2, [pc, #408]	; (8001048 <MX_GPIO_Init+0x214>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b64      	ldr	r3, [pc, #400]	; (8001048 <MX_GPIO_Init+0x214>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec2:	4b61      	ldr	r3, [pc, #388]	; (8001048 <MX_GPIO_Init+0x214>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a60      	ldr	r2, [pc, #384]	; (8001048 <MX_GPIO_Init+0x214>)
 8000ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b5e      	ldr	r3, [pc, #376]	; (8001048 <MX_GPIO_Init+0x214>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ee0:	485a      	ldr	r0, [pc, #360]	; (800104c <MX_GPIO_Init+0x218>)
 8000ee2:	f000 fe83 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2140      	movs	r1, #64	; 0x40
 8000eea:	4859      	ldr	r0, [pc, #356]	; (8001050 <MX_GPIO_Init+0x21c>)
 8000eec:	f000 fe7e 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef6:	4b57      	ldr	r3, [pc, #348]	; (8001054 <MX_GPIO_Init+0x220>)
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	4854      	ldr	r0, [pc, #336]	; (8001058 <MX_GPIO_Init+0x224>)
 8000f06:	f000 fcc5 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f0a:	2332      	movs	r3, #50	; 0x32
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	484c      	ldr	r0, [pc, #304]	; (8001058 <MX_GPIO_Init+0x224>)
 8000f26:	f000 fcb5 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f2a:	2386      	movs	r3, #134	; 0x86
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3a:	230b      	movs	r3, #11
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	4845      	ldr	r0, [pc, #276]	; (800105c <MX_GPIO_Init+0x228>)
 8000f46:	f000 fca5 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f4a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	483a      	ldr	r0, [pc, #232]	; (800104c <MX_GPIO_Init+0x218>)
 8000f64:	f000 fc96 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7a:	230b      	movs	r3, #11
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	4831      	ldr	r0, [pc, #196]	; (800104c <MX_GPIO_Init+0x218>)
 8000f86:	f000 fc85 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	482e      	ldr	r0, [pc, #184]	; (8001060 <MX_GPIO_Init+0x22c>)
 8000fa8:	f000 fc74 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fac:	2340      	movs	r3, #64	; 0x40
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4823      	ldr	r0, [pc, #140]	; (8001050 <MX_GPIO_Init+0x21c>)
 8000fc4:	f000 fc66 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481d      	ldr	r0, [pc, #116]	; (8001050 <MX_GPIO_Init+0x21c>)
 8000fdc:	f000 fc5a 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fe0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4817      	ldr	r0, [pc, #92]	; (800105c <MX_GPIO_Init+0x228>)
 8000ffe:	f000 fc49 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001002:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4811      	ldr	r0, [pc, #68]	; (800105c <MX_GPIO_Init+0x228>)
 8001018:	f000 fc3c 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800101c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800102e:	230b      	movs	r3, #11
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_GPIO_Init+0x21c>)
 800103a:	f000 fc2b 	bl	8001894 <HAL_GPIO_Init>

}
 800103e:	bf00      	nop
 8001040:	3730      	adds	r7, #48	; 0x30
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40020400 	.word	0x40020400
 8001050:	40021800 	.word	0x40021800
 8001054:	10110000 	.word	0x10110000
 8001058:	40020800 	.word	0x40020800
 800105c:	40020000 	.word	0x40020000
 8001060:	40020c00 	.word	0x40020c00

08001064 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_MspInit+0x44>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_MspInit+0x44>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_MspInit+0x44>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x44>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x44>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x44>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_TIM_Base_MspInit+0x38>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10b      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_TIM_Base_MspInit+0x3c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <HAL_TIM_Base_MspInit+0x3c>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_TIM_Base_MspInit+0x3c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40002000 	.word	0x40002000
 8001108:	40023800 	.word	0x40023800

0800110c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <HAL_UART_MspInit+0xc4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d14c      	bne.n	80011c8 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <HAL_UART_MspInit+0xc8>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a28      	ldr	r2, [pc, #160]	; (80011d4 <HAL_UART_MspInit+0xc8>)
 8001134:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <HAL_UART_MspInit+0xc8>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <HAL_UART_MspInit+0xc8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <HAL_UART_MspInit+0xc8>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_UART_MspInit+0xc8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_UART_MspInit+0xc8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <HAL_UART_MspInit+0xc8>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_UART_MspInit+0xc8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001176:	2301      	movs	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001186:	2308      	movs	r3, #8
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4811      	ldr	r0, [pc, #68]	; (80011d8 <HAL_UART_MspInit+0xcc>)
 8001192:	f000 fb7f 	bl	8001894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001196:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011a8:	2308      	movs	r3, #8
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	480a      	ldr	r0, [pc, #40]	; (80011dc <HAL_UART_MspInit+0xd0>)
 80011b4:	f000 fb6e 	bl	8001894 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	2034      	movs	r0, #52	; 0x34
 80011be:	f000 faa0 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80011c2:	2034      	movs	r0, #52	; 0x34
 80011c4:	f000 fab9 	bl	800173a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40004c00 	.word	0x40004c00
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020800 	.word	0x40020800

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f94a 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <UART4_IRQHandler+0x10>)
 800123a:	f002 f84d 	bl	80032d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000414 	.word	0x20000414

08001248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
	return 1;
 800124c:	2301      	movs	r3, #1
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_kill>:

int _kill(int pid, int sig)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001262:	f002 ffe7 	bl	8004234 <__errno>
 8001266:	4603      	mov	r3, r0
 8001268:	2216      	movs	r2, #22
 800126a:	601a      	str	r2, [r3, #0]
	return -1;
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_exit>:

void _exit (int status)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ffe7 	bl	8001258 <_kill>
	while (1) {}		/* Make sure we hang here */
 800128a:	e7fe      	b.n	800128a <_exit+0x12>

0800128c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e00a      	b.n	80012b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800129e:	f3af 8000 	nop.w
 80012a2:	4601      	mov	r1, r0
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	60ba      	str	r2, [r7, #8]
 80012aa:	b2ca      	uxtb	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf0      	blt.n	800129e <_read+0x12>
	}

return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e009      	b.n	80012ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	60ba      	str	r2, [r7, #8]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbf1      	blt.n	80012d8 <_write+0x12>
	}
	return len;
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_close>:

int _close(int file)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	return -1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001326:	605a      	str	r2, [r3, #4]
	return 0;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <_isatty>:

int _isatty(int file)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	return 1;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
	return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <_sbrk+0x5c>)
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <_sbrk+0x60>)
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <_sbrk+0x64>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_sbrk+0x64>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <_sbrk+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	429a      	cmp	r2, r3
 8001396:	d207      	bcs.n	80013a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001398:	f002 ff4c 	bl	8004234 <__errno>
 800139c:	4603      	mov	r3, r0
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e009      	b.n	80013bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <_sbrk+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20080000 	.word	0x20080000
 80013c8:	00000400 	.word	0x00000400
 80013cc:	2000026c 	.word	0x2000026c
 80013d0:	200004f8 	.word	0x200004f8

080013d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <SystemInit+0x20>)
 80013da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <SystemInit+0x20>)
 80013e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001430 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013fe:	490e      	ldr	r1, [pc, #56]	; (8001438 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001414:	4c0b      	ldr	r4, [pc, #44]	; (8001444 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001422:	f7ff ffd7 	bl	80013d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001426:	f002 ff0b 	bl	8004240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142a:	f7ff fbff 	bl	8000c2c <main>
  bx  lr    
 800142e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001438:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 800143c:	08008ee4 	.word	0x08008ee4
  ldr r2, =_sbss
 8001440:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8001444:	200004f8 	.word	0x200004f8

08001448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC_IRQHandler>

0800144a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144e:	2003      	movs	r0, #3
 8001450:	f000 f94c 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001454:	2000      	movs	r0, #0
 8001456:	f000 f805 	bl	8001464 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800145a:	f7ff fe13 	bl	8001084 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x54>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_InitTick+0x58>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f967 	bl	8001756 <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e00e      	b.n	80014b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d80a      	bhi.n	80014ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001498:	2200      	movs	r2, #0
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f000 f92f 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_InitTick+0x5c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000070 	.word	0x20000070
 80014bc:	20000078 	.word	0x20000078
 80014c0:	20000074 	.word	0x20000074

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000078 	.word	0x20000078
 80014e8:	200004e4 	.word	0x200004e4

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200004e4 	.word	0x200004e4

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000078 	.word	0x20000078

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <__NVIC_SetPriorityGrouping+0x40>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	4313      	orrs	r3, r2
 8001578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <__NVIC_SetPriorityGrouping+0x40>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60d3      	str	r3, [r2, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00
 8001590:	05fa0000 	.word	0x05fa0000

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4907      	ldr	r1, [pc, #28]	; (80015e8 <__NVIC_EnableIRQ+0x38>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff8e 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff29 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff3e 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff8e 	bl	8001640 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5d 	bl	80015ec <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff31 	bl	80015b0 <__NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffa2 	bl	80016a8 <SysTick_Config>
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff feb6 	bl	80014ec <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d008      	beq.n	80017a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e052      	b.n	8001846 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0216 	bic.w	r2, r2, #22
 80017ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d103      	bne.n	80017d0 <HAL_DMA_Abort+0x62>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0208 	bic.w	r2, r2, #8
 80017de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f0:	e013      	b.n	800181a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f2:	f7ff fe7b 	bl	80014ec <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d90c      	bls.n	800181a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2220      	movs	r2, #32
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2203      	movs	r2, #3
 8001812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e015      	b.n	8001846 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1e4      	bne.n	80017f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182c:	223f      	movs	r2, #63	; 0x3f
 800182e:	409a      	lsls	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d004      	beq.n	800186c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e00c      	b.n	8001886 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2205      	movs	r2, #5
 8001870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	e175      	b.n	8001ba0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f040 8164 	bne.w	8001b9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d00b      	beq.n	80018f2 <HAL_GPIO_Init+0x5e>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e6:	2b11      	cmp	r3, #17
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b12      	cmp	r3, #18
 80018f0:	d130      	bne.n	8001954 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 0201 	and.w	r2, r3, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x100>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b12      	cmp	r3, #18
 8001992:	d123      	bne.n	80019dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	08da      	lsrs	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0203 	and.w	r2, r3, #3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80be 	beq.w	8001b9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a65      	ldr	r2, [pc, #404]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <HAL_GPIO_Init+0x324>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a36:	4a61      	ldr	r2, [pc, #388]	; (8001bbc <HAL_GPIO_Init+0x328>)
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <HAL_GPIO_Init+0x32c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d037      	beq.n	8001ad2 <HAL_GPIO_Init+0x23e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a57      	ldr	r2, [pc, #348]	; (8001bc4 <HAL_GPIO_Init+0x330>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d031      	beq.n	8001ace <HAL_GPIO_Init+0x23a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a56      	ldr	r2, [pc, #344]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d02b      	beq.n	8001aca <HAL_GPIO_Init+0x236>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a55      	ldr	r2, [pc, #340]	; (8001bcc <HAL_GPIO_Init+0x338>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d025      	beq.n	8001ac6 <HAL_GPIO_Init+0x232>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a54      	ldr	r2, [pc, #336]	; (8001bd0 <HAL_GPIO_Init+0x33c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d01f      	beq.n	8001ac2 <HAL_GPIO_Init+0x22e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a53      	ldr	r2, [pc, #332]	; (8001bd4 <HAL_GPIO_Init+0x340>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d019      	beq.n	8001abe <HAL_GPIO_Init+0x22a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a52      	ldr	r2, [pc, #328]	; (8001bd8 <HAL_GPIO_Init+0x344>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0x226>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a51      	ldr	r2, [pc, #324]	; (8001bdc <HAL_GPIO_Init+0x348>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00d      	beq.n	8001ab6 <HAL_GPIO_Init+0x222>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a50      	ldr	r2, [pc, #320]	; (8001be0 <HAL_GPIO_Init+0x34c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x21e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4f      	ldr	r2, [pc, #316]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_GPIO_Init+0x21a>
 8001aaa:	2309      	movs	r3, #9
 8001aac:	e012      	b.n	8001ad4 <HAL_GPIO_Init+0x240>
 8001aae:	230a      	movs	r3, #10
 8001ab0:	e010      	b.n	8001ad4 <HAL_GPIO_Init+0x240>
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	e00e      	b.n	8001ad4 <HAL_GPIO_Init+0x240>
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	e00c      	b.n	8001ad4 <HAL_GPIO_Init+0x240>
 8001aba:	2306      	movs	r3, #6
 8001abc:	e00a      	b.n	8001ad4 <HAL_GPIO_Init+0x240>
 8001abe:	2305      	movs	r3, #5
 8001ac0:	e008      	b.n	8001ad4 <HAL_GPIO_Init+0x240>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x240>
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e004      	b.n	8001ad4 <HAL_GPIO_Init+0x240>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_Init+0x240>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x240>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	f002 0203 	and.w	r2, r2, #3
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	4093      	lsls	r3, r2
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ae4:	4935      	ldr	r1, [pc, #212]	; (8001bbc <HAL_GPIO_Init+0x328>)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_GPIO_Init+0x354>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b16:	4a34      	ldr	r2, [pc, #208]	; (8001be8 <HAL_GPIO_Init+0x354>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b1c:	4b32      	ldr	r3, [pc, #200]	; (8001be8 <HAL_GPIO_Init+0x354>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b40:	4a29      	ldr	r2, [pc, #164]	; (8001be8 <HAL_GPIO_Init+0x354>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b46:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <HAL_GPIO_Init+0x354>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6a:	4a1f      	ldr	r2, [pc, #124]	; (8001be8 <HAL_GPIO_Init+0x354>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b70:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_GPIO_Init+0x354>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b94:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <HAL_GPIO_Init+0x354>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	f67f ae86 	bls.w	80018b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	40020c00 	.word	0x40020c00
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40021400 	.word	0x40021400
 8001bd8:	40021800 	.word	0x40021800
 8001bdc:	40021c00 	.word	0x40021c00
 8001be0:	40022000 	.word	0x40022000
 8001be4:	40022400 	.word	0x40022400
 8001be8:	40013c00 	.word	0x40013c00

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c08:	e003      	b.n	8001c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	041a      	lsls	r2, r3, #16
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	619a      	str	r2, [r3, #24]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e29b      	b.n	800216e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8087 	beq.w	8001d52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c44:	4b96      	ldr	r3, [pc, #600]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d00c      	beq.n	8001c6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c50:	4b93      	ldr	r3, [pc, #588]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d112      	bne.n	8001c82 <HAL_RCC_OscConfig+0x62>
 8001c5c:	4b90      	ldr	r3, [pc, #576]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c68:	d10b      	bne.n	8001c82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6a:	4b8d      	ldr	r3, [pc, #564]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d06c      	beq.n	8001d50 <HAL_RCC_OscConfig+0x130>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d168      	bne.n	8001d50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e275      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x7a>
 8001c8c:	4b84      	ldr	r3, [pc, #528]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a83      	ldr	r2, [pc, #524]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	e02e      	b.n	8001cf8 <HAL_RCC_OscConfig+0xd8>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x9c>
 8001ca2:	4b7f      	ldr	r3, [pc, #508]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a7e      	ldr	r2, [pc, #504]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b7c      	ldr	r3, [pc, #496]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a7b      	ldr	r2, [pc, #492]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e01d      	b.n	8001cf8 <HAL_RCC_OscConfig+0xd8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0xc0>
 8001cc6:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b73      	ldr	r3, [pc, #460]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a72      	ldr	r2, [pc, #456]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0xd8>
 8001ce0:	4b6f      	ldr	r3, [pc, #444]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a6e      	ldr	r2, [pc, #440]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b6c      	ldr	r3, [pc, #432]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a6b      	ldr	r2, [pc, #428]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fbf4 	bl	80014ec <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fbf0 	bl	80014ec <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e229      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b61      	ldr	r3, [pc, #388]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0xe8>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fbe0 	bl	80014ec <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fbdc 	bl	80014ec <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e215      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x110>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d069      	beq.n	8001e32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5e:	4b50      	ldr	r3, [pc, #320]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d11c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x190>
 8001d76:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d116      	bne.n	8001db0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_RCC_OscConfig+0x17a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e1e9      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	493d      	ldr	r1, [pc, #244]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	e040      	b.n	8001e32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d023      	beq.n	8001e00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db8:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a38      	ldr	r2, [pc, #224]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fb92 	bl	80014ec <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fb8e 	bl	80014ec <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1c7      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4929      	ldr	r1, [pc, #164]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
 8001dfe:	e018      	b.n	8001e32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a26      	ldr	r2, [pc, #152]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001e06:	f023 0301 	bic.w	r3, r3, #1
 8001e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fb6e 	bl	80014ec <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e14:	f7ff fb6a 	bl	80014ec <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e1a3      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d038      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d019      	beq.n	8001e7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e4a:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7ff fb4b 	bl	80014ec <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fb47 	bl	80014ec <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e180      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x23a>
 8001e78:	e01a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_RCC_OscConfig+0x280>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e86:	f7ff fb31 	bl	80014ec <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff fb2d 	bl	80014ec <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d903      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e166      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
 8001ea0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea4:	4b92      	ldr	r3, [pc, #584]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ee      	bne.n	8001e8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a4 	beq.w	8002006 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebe:	4b8c      	ldr	r3, [pc, #560]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b89      	ldr	r3, [pc, #548]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a88      	ldr	r2, [pc, #544]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b86      	ldr	r3, [pc, #536]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee6:	4b83      	ldr	r3, [pc, #524]	; (80020f4 <HAL_RCC_OscConfig+0x4d4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d118      	bne.n	8001f24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ef2:	4b80      	ldr	r3, [pc, #512]	; (80020f4 <HAL_RCC_OscConfig+0x4d4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7f      	ldr	r2, [pc, #508]	; (80020f4 <HAL_RCC_OscConfig+0x4d4>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efe:	f7ff faf5 	bl	80014ec <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7ff faf1 	bl	80014ec <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b64      	cmp	r3, #100	; 0x64
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e12a      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f18:	4b76      	ldr	r3, [pc, #472]	; (80020f4 <HAL_RCC_OscConfig+0x4d4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x31a>
 8001f2c:	4b70      	ldr	r3, [pc, #448]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f30:	4a6f      	ldr	r2, [pc, #444]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6713      	str	r3, [r2, #112]	; 0x70
 8001f38:	e02d      	b.n	8001f96 <HAL_RCC_OscConfig+0x376>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x33c>
 8001f42:	4b6b      	ldr	r3, [pc, #428]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	4a6a      	ldr	r2, [pc, #424]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4e:	4b68      	ldr	r3, [pc, #416]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	4a67      	ldr	r2, [pc, #412]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f54:	f023 0304 	bic.w	r3, r3, #4
 8001f58:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5a:	e01c      	b.n	8001f96 <HAL_RCC_OscConfig+0x376>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	d10c      	bne.n	8001f7e <HAL_RCC_OscConfig+0x35e>
 8001f64:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f68:	4a61      	ldr	r2, [pc, #388]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f70:	4b5f      	ldr	r3, [pc, #380]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	4a5e      	ldr	r2, [pc, #376]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7c:	e00b      	b.n	8001f96 <HAL_RCC_OscConfig+0x376>
 8001f7e:	4b5c      	ldr	r3, [pc, #368]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	4a5b      	ldr	r2, [pc, #364]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8a:	4b59      	ldr	r3, [pc, #356]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d015      	beq.n	8001fca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9e:	f7ff faa5 	bl	80014ec <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff faa1 	bl	80014ec <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0d8      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbc:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ee      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x386>
 8001fc8:	e014      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7ff fa8f 	bl	80014ec <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7ff fa8b 	bl	80014ec <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0c2      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ee      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d105      	bne.n	8002006 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a3c      	ldr	r2, [pc, #240]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8002000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80ae 	beq.w	800216c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002010:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b08      	cmp	r3, #8
 800201a:	d06d      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d14b      	bne.n	80020bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002024:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a31      	ldr	r2, [pc, #196]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 800202a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800202e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff fa5c 	bl	80014ec <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff fa58 	bl	80014ec <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e091      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69da      	ldr	r2, [r3, #28]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	085b      	lsrs	r3, r3, #1
 800206e:	3b01      	subs	r3, #1
 8002070:	041b      	lsls	r3, r3, #16
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	061b      	lsls	r3, r3, #24
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	071b      	lsls	r3, r3, #28
 8002082:	491b      	ldr	r1, [pc, #108]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 800208e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff fa2a 	bl	80014ec <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff fa26 	bl	80014ec <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e05f      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x47c>
 80020ba:	e057      	b.n	800216c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 80020c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff fa10 	bl	80014ec <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d0:	f7ff fa0c 	bl	80014ec <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e045      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e2:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <HAL_RCC_OscConfig+0x4d0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4b0>
 80020ee:	e03d      	b.n	800216c <HAL_RCC_OscConfig+0x54c>
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <HAL_RCC_OscConfig+0x558>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d030      	beq.n	8002168 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d129      	bne.n	8002168 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d122      	bne.n	8002168 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800212e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002130:	4293      	cmp	r3, r2
 8002132:	d119      	bne.n	8002168 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	3b01      	subs	r3, #1
 8002142:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d10f      	bne.n	8002168 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d107      	bne.n	8002168 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800

0800217c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0d0      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002194:	4b6a      	ldr	r3, [pc, #424]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d910      	bls.n	80021c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b67      	ldr	r3, [pc, #412]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 020f 	bic.w	r2, r3, #15
 80021aa:	4965      	ldr	r1, [pc, #404]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b63      	ldr	r3, [pc, #396]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0b8      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021dc:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4a58      	ldr	r2, [pc, #352]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80021e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f4:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80021fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002200:	4b50      	ldr	r3, [pc, #320]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	494d      	ldr	r1, [pc, #308]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d040      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d115      	bne.n	800225e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e07f      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e073      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224e:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e06b      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4936      	ldr	r1, [pc, #216]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002270:	f7ff f93c 	bl	80014ec <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	e00a      	b.n	800228e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7ff f938 	bl	80014ec <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e053      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 020c 	and.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	429a      	cmp	r2, r3
 800229e:	d1eb      	bne.n	8002278 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d210      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 020f 	bic.w	r2, r3, #15
 80022b6:	4922      	ldr	r1, [pc, #136]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e032      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4916      	ldr	r1, [pc, #88]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d009      	beq.n	800230e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	490e      	ldr	r1, [pc, #56]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800230e:	f000 f821 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 8002312:	4602      	mov	r2, r0
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_ClockConfig+0x1c8>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	490a      	ldr	r1, [pc, #40]	; (8002348 <HAL_RCC_ClockConfig+0x1cc>)
 8002320:	5ccb      	ldrb	r3, [r1, r3]
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <HAL_RCC_ClockConfig+0x1d0>)
 8002328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1d4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f898 	bl	8001464 <HAL_InitTick>

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023c00 	.word	0x40023c00
 8002344:	40023800 	.word	0x40023800
 8002348:	08008a08 	.word	0x08008a08
 800234c:	20000070 	.word	0x20000070
 8002350:	20000074 	.word	0x20000074

08002354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002354:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	2300      	movs	r3, #0
 8002366:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800236c:	4b67      	ldr	r3, [pc, #412]	; (800250c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d00d      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x40>
 8002378:	2b08      	cmp	r3, #8
 800237a:	f200 80bd 	bhi.w	80024f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0x34>
 8002382:	2b04      	cmp	r3, #4
 8002384:	d003      	beq.n	800238e <HAL_RCC_GetSysClockFreq+0x3a>
 8002386:	e0b7      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002388:	4b61      	ldr	r3, [pc, #388]	; (8002510 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800238a:	60bb      	str	r3, [r7, #8]
      break;
 800238c:	e0b7      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800238e:	4b60      	ldr	r3, [pc, #384]	; (8002510 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002390:	60bb      	str	r3, [r7, #8]
      break;
 8002392:	e0b4      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002394:	4b5d      	ldr	r3, [pc, #372]	; (800250c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800239c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800239e:	4b5b      	ldr	r3, [pc, #364]	; (800250c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d04d      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023aa:	4b58      	ldr	r3, [pc, #352]	; (800250c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	461a      	mov	r2, r3
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	ea02 0800 	and.w	r8, r2, r0
 80023c2:	ea03 0901 	and.w	r9, r3, r1
 80023c6:	4640      	mov	r0, r8
 80023c8:	4649      	mov	r1, r9
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	014b      	lsls	r3, r1, #5
 80023d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023d8:	0142      	lsls	r2, r0, #5
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	ebb0 0008 	subs.w	r0, r0, r8
 80023e2:	eb61 0109 	sbc.w	r1, r1, r9
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	018b      	lsls	r3, r1, #6
 80023f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023f4:	0182      	lsls	r2, r0, #6
 80023f6:	1a12      	subs	r2, r2, r0
 80023f8:	eb63 0301 	sbc.w	r3, r3, r1
 80023fc:	f04f 0000 	mov.w	r0, #0
 8002400:	f04f 0100 	mov.w	r1, #0
 8002404:	00d9      	lsls	r1, r3, #3
 8002406:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800240a:	00d0      	lsls	r0, r2, #3
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	eb12 0208 	adds.w	r2, r2, r8
 8002414:	eb43 0309 	adc.w	r3, r3, r9
 8002418:	f04f 0000 	mov.w	r0, #0
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	0299      	lsls	r1, r3, #10
 8002422:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002426:	0290      	lsls	r0, r2, #10
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	f7fe f926 	bl	8000688 <__aeabi_uldivmod>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4613      	mov	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e04a      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002446:	4b31      	ldr	r3, [pc, #196]	; (800250c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	461a      	mov	r2, r3
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	ea02 0400 	and.w	r4, r2, r0
 800245e:	ea03 0501 	and.w	r5, r3, r1
 8002462:	4620      	mov	r0, r4
 8002464:	4629      	mov	r1, r5
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	014b      	lsls	r3, r1, #5
 8002470:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002474:	0142      	lsls	r2, r0, #5
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	1b00      	subs	r0, r0, r4
 800247c:	eb61 0105 	sbc.w	r1, r1, r5
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	018b      	lsls	r3, r1, #6
 800248a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800248e:	0182      	lsls	r2, r0, #6
 8002490:	1a12      	subs	r2, r2, r0
 8002492:	eb63 0301 	sbc.w	r3, r3, r1
 8002496:	f04f 0000 	mov.w	r0, #0
 800249a:	f04f 0100 	mov.w	r1, #0
 800249e:	00d9      	lsls	r1, r3, #3
 80024a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024a4:	00d0      	lsls	r0, r2, #3
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	1912      	adds	r2, r2, r4
 80024ac:	eb45 0303 	adc.w	r3, r5, r3
 80024b0:	f04f 0000 	mov.w	r0, #0
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	0299      	lsls	r1, r3, #10
 80024ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024be:	0290      	lsls	r0, r2, #10
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	461a      	mov	r2, r3
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	f7fe f8da 	bl	8000688 <__aeabi_uldivmod>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4613      	mov	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	3301      	adds	r3, #1
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	60bb      	str	r3, [r7, #8]
      break;
 80024f6:	e002      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024fa:	60bb      	str	r3, [r7, #8]
      break;
 80024fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fe:	68bb      	ldr	r3, [r7, #8]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	00f42400 	.word	0x00f42400

08002514 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_RCC_GetHCLKFreq+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000070 	.word	0x20000070

0800252c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002530:	f7ff fff0 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0a9b      	lsrs	r3, r3, #10
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4903      	ldr	r1, [pc, #12]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002542:	5ccb      	ldrb	r3, [r1, r3]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	08008a18 	.word	0x08008a18

08002554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002558:	f7ff ffdc 	bl	8002514 <HAL_RCC_GetHCLKFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	0b5b      	lsrs	r3, r3, #13
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4903      	ldr	r1, [pc, #12]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	08008a18 	.word	0x08008a18

0800257c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d012      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025a4:	4b69      	ldr	r3, [pc, #420]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a68      	ldr	r2, [pc, #416]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025ae:	6093      	str	r3, [r2, #8]
 80025b0:	4b66      	ldr	r3, [pc, #408]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	4964      	ldr	r1, [pc, #400]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d017      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d6:	4b5d      	ldr	r3, [pc, #372]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	4959      	ldr	r1, [pc, #356]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f4:	d101      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002602:	2301      	movs	r3, #1
 8002604:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d017      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002612:	4b4e      	ldr	r3, [pc, #312]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002618:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	494a      	ldr	r1, [pc, #296]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002630:	d101      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800264e:	2301      	movs	r3, #1
 8002650:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 808b 	beq.w	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002660:	4b3a      	ldr	r3, [pc, #232]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	4a39      	ldr	r2, [pc, #228]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266a:	6413      	str	r3, [r2, #64]	; 0x40
 800266c:	4b37      	ldr	r3, [pc, #220]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002678:	4b35      	ldr	r3, [pc, #212]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a34      	ldr	r2, [pc, #208]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800267e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002684:	f7fe ff32 	bl	80014ec <HAL_GetTick>
 8002688:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268c:	f7fe ff2e 	bl	80014ec <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e38f      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026aa:	4b28      	ldr	r3, [pc, #160]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d035      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d02e      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026c8:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a1d      	ldr	r2, [pc, #116]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026ea:	4a18      	ldr	r2, [pc, #96]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026f0:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d114      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fc:	f7fe fef6 	bl	80014ec <HAL_GetTick>
 8002700:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002702:	e00a      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7fe fef2 	bl	80014ec <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e351      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0ee      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002732:	d111      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002742:	400b      	ands	r3, r1
 8002744:	4901      	ldr	r1, [pc, #4]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
 800274a:	e00b      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800274c:	40023800 	.word	0x40023800
 8002750:	40007000 	.word	0x40007000
 8002754:	0ffffcff 	.word	0x0ffffcff
 8002758:	4bb3      	ldr	r3, [pc, #716]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4ab2      	ldr	r2, [pc, #712]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800275e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002762:	6093      	str	r3, [r2, #8]
 8002764:	4bb0      	ldr	r3, [pc, #704]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002766:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002770:	49ad      	ldr	r1, [pc, #692]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002772:	4313      	orrs	r3, r2
 8002774:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	d010      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002782:	4ba9      	ldr	r3, [pc, #676]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002788:	4aa7      	ldr	r2, [pc, #668]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800278a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800278e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002792:	4ba5      	ldr	r3, [pc, #660]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002794:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	49a2      	ldr	r1, [pc, #648]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027b0:	4b9d      	ldr	r3, [pc, #628]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027be:	499a      	ldr	r1, [pc, #616]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027d2:	4b95      	ldr	r3, [pc, #596]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e0:	4991      	ldr	r1, [pc, #580]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027f4:	4b8c      	ldr	r3, [pc, #560]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002802:	4989      	ldr	r1, [pc, #548]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002816:	4b84      	ldr	r3, [pc, #528]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	4980      	ldr	r1, [pc, #512]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002838:	4b7b      	ldr	r3, [pc, #492]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	f023 0203 	bic.w	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	4978      	ldr	r1, [pc, #480]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800285a:	4b73      	ldr	r3, [pc, #460]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	f023 020c 	bic.w	r2, r3, #12
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002868:	496f      	ldr	r1, [pc, #444]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800287c:	4b6a      	ldr	r3, [pc, #424]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	4967      	ldr	r1, [pc, #412]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800289e:	4b62      	ldr	r3, [pc, #392]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ac:	495e      	ldr	r1, [pc, #376]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028c0:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	4956      	ldr	r1, [pc, #344]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028e2:	4b51      	ldr	r3, [pc, #324]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	494d      	ldr	r1, [pc, #308]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002904:	4b48      	ldr	r3, [pc, #288]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	4945      	ldr	r1, [pc, #276]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002926:	4b40      	ldr	r3, [pc, #256]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002934:	493c      	ldr	r1, [pc, #240]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002948:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002956:	4934      	ldr	r1, [pc, #208]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d011      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800296a:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002970:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002978:	492b      	ldr	r1, [pc, #172]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002988:	d101      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800298a:	2301      	movs	r3, #1
 800298c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800299a:	2301      	movs	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b8:	491b      	ldr	r1, [pc, #108]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029dc:	4912      	ldr	r1, [pc, #72]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00b      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a00:	4909      	ldr	r1, [pc, #36]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00f      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	e002      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	4986      	ldr	r1, [pc, #536]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a40:	4b81      	ldr	r3, [pc, #516]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a50:	497d      	ldr	r1, [pc, #500]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d006      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80d6 	beq.w	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a6c:	4b76      	ldr	r3, [pc, #472]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a75      	ldr	r2, [pc, #468]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a78:	f7fe fd38 	bl	80014ec <HAL_GetTick>
 8002a7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a80:	f7fe fd34 	bl	80014ec <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	; 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e195      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a92:	4b6d      	ldr	r3, [pc, #436]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d021      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11d      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ab2:	4b65      	ldr	r3, [pc, #404]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ac0:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac6:	0e1b      	lsrs	r3, r3, #24
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	019a      	lsls	r2, r3, #6
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	071b      	lsls	r3, r3, #28
 8002ae6:	4958      	ldr	r1, [pc, #352]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d02e      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b18:	d129      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b1a:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b28:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2e:	0f1b      	lsrs	r3, r3, #28
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	019a      	lsls	r2, r3, #6
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	061b      	lsls	r3, r3, #24
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	071b      	lsls	r3, r3, #28
 8002b4e:	493e      	ldr	r1, [pc, #248]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b56:	4b3c      	ldr	r3, [pc, #240]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b5c:	f023 021f 	bic.w	r2, r3, #31
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	3b01      	subs	r3, #1
 8002b66:	4938      	ldr	r1, [pc, #224]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01d      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b7a:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b80:	0e1b      	lsrs	r3, r3, #24
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b88:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8e:	0f1b      	lsrs	r3, r3, #28
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	019a      	lsls	r2, r3, #6
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	061b      	lsls	r3, r3, #24
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	071b      	lsls	r3, r3, #28
 8002bae:	4926      	ldr	r1, [pc, #152]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d011      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	019a      	lsls	r2, r3, #6
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	071b      	lsls	r3, r3, #28
 8002bde:	491a      	ldr	r1, [pc, #104]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002be6:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf2:	f7fe fc7b 	bl	80014ec <HAL_GetTick>
 8002bf6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bfa:	f7fe fc77 	bl	80014ec <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b64      	cmp	r3, #100	; 0x64
 8002c06:	d901      	bls.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e0d8      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	f040 80ce 	bne.w	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fc5e 	bl	80014ec <HAL_GetTick>
 8002c30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c32:	e00b      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c34:	f7fe fc5a 	bl	80014ec <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d904      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e0bb      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c4c:	4b5e      	ldr	r3, [pc, #376]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c58:	d0ec      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d02e      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d12a      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c82:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c90:	4b4d      	ldr	r3, [pc, #308]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	0f1b      	lsrs	r3, r3, #28
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	019a      	lsls	r2, r3, #6
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	061b      	lsls	r3, r3, #24
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	071b      	lsls	r3, r3, #28
 8002cb6:	4944      	ldr	r1, [pc, #272]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cbe:	4b42      	ldr	r3, [pc, #264]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	493d      	ldr	r1, [pc, #244]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d022      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cec:	d11d      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cee:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	0e1b      	lsrs	r3, r3, #24
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cfc:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	0f1b      	lsrs	r3, r3, #28
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	019a      	lsls	r2, r3, #6
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	431a      	orrs	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	061b      	lsls	r3, r3, #24
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	071b      	lsls	r3, r3, #28
 8002d22:	4929      	ldr	r1, [pc, #164]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d028      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d36:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3c:	0e1b      	lsrs	r3, r3, #24
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d44:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	0c1b      	lsrs	r3, r3, #16
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	019a      	lsls	r2, r3, #6
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	071b      	lsls	r3, r3, #28
 8002d6a:	4917      	ldr	r1, [pc, #92]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	4911      	ldr	r1, [pc, #68]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d94:	f7fe fbaa 	bl	80014ec <HAL_GetTick>
 8002d98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d9c:	f7fe fba6 	bl	80014ec <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	; 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e007      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dba:	d1ef      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800

08002dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e049      	b.n	8002e72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe f96a 	bl	80010cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f000 f8a6 	bl	8002f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d001      	beq.n	8002e94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e04c      	b.n	8002f2e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <HAL_TIM_Base_Start+0xc0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d022      	beq.n	8002eec <HAL_TIM_Base_Start+0x70>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eae:	d01d      	beq.n	8002eec <HAL_TIM_Base_Start+0x70>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <HAL_TIM_Base_Start+0xc4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d018      	beq.n	8002eec <HAL_TIM_Base_Start+0x70>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <HAL_TIM_Base_Start+0xc8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_TIM_Base_Start+0x70>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <HAL_TIM_Base_Start+0xcc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00e      	beq.n	8002eec <HAL_TIM_Base_Start+0x70>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1e      	ldr	r2, [pc, #120]	; (8002f4c <HAL_TIM_Base_Start+0xd0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_TIM_Base_Start+0x70>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <HAL_TIM_Base_Start+0xd4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_TIM_Base_Start+0x70>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1b      	ldr	r2, [pc, #108]	; (8002f54 <HAL_TIM_Base_Start+0xd8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d115      	bne.n	8002f18 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_TIM_Base_Start+0xdc>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d015      	beq.n	8002f2a <HAL_TIM_Base_Start+0xae>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f04:	d011      	beq.n	8002f2a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f16:	e008      	b.n	8002f2a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e000      	b.n	8002f2c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40000800 	.word	0x40000800
 8002f48:	40000c00 	.word	0x40000c00
 8002f4c:	40010400 	.word	0x40010400
 8002f50:	40014000 	.word	0x40014000
 8002f54:	40001800 	.word	0x40001800
 8002f58:	00010007 	.word	0x00010007

08002f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a40      	ldr	r2, [pc, #256]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7a:	d00f      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3d      	ldr	r2, [pc, #244]	; (8003074 <TIM_Base_SetConfig+0x118>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3c      	ldr	r2, [pc, #240]	; (8003078 <TIM_Base_SetConfig+0x11c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	; (800307c <TIM_Base_SetConfig+0x120>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d108      	bne.n	8002fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2f      	ldr	r2, [pc, #188]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02b      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d027      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2c      	ldr	r2, [pc, #176]	; (8003074 <TIM_Base_SetConfig+0x118>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d023      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <TIM_Base_SetConfig+0x11c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01f      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <TIM_Base_SetConfig+0x120>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01b      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a29      	ldr	r2, [pc, #164]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d017      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a28      	ldr	r2, [pc, #160]	; (8003084 <TIM_Base_SetConfig+0x128>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a27      	ldr	r2, [pc, #156]	; (8003088 <TIM_Base_SetConfig+0x12c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00f      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a26      	ldr	r2, [pc, #152]	; (800308c <TIM_Base_SetConfig+0x130>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00b      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a25      	ldr	r2, [pc, #148]	; (8003090 <TIM_Base_SetConfig+0x134>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a24      	ldr	r2, [pc, #144]	; (8003094 <TIM_Base_SetConfig+0x138>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a23      	ldr	r2, [pc, #140]	; (8003098 <TIM_Base_SetConfig+0x13c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d108      	bne.n	8003020 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_Base_SetConfig+0xf8>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a0c      	ldr	r2, [pc, #48]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d103      	bne.n	800305c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	615a      	str	r2, [r3, #20]
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40010400 	.word	0x40010400
 8003084:	40014000 	.word	0x40014000
 8003088:	40014400 	.word	0x40014400
 800308c:	40014800 	.word	0x40014800
 8003090:	40001800 	.word	0x40001800
 8003094:	40001c00 	.word	0x40001c00
 8003098:	40002000 	.word	0x40002000

0800309c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e040      	b.n	8003130 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe f824 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2224      	movs	r2, #36	; 0x24
 80030c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0201 	bic.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fb26 	bl	800372c <UART_SetConfig>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e022      	b.n	8003130 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fd7c 	bl	8003bf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003116:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fe03 	bl	8003d34 <UART_CheckIdleState>
 800312e:	4603      	mov	r3, r0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800314c:	2b20      	cmp	r3, #32
 800314e:	f040 8081 	bne.w	8003254 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_UART_Transmit+0x26>
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e079      	b.n	8003256 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_UART_Transmit+0x38>
 800316c:	2302      	movs	r3, #2
 800316e:	e072      	b.n	8003256 <HAL_UART_Transmit+0x11e>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2221      	movs	r2, #33	; 0x21
 8003184:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003186:	f7fe f9b1 	bl	80014ec <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a4:	d108      	bne.n	80031b8 <HAL_UART_Transmit+0x80>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d104      	bne.n	80031b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	e003      	b.n	80031c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80031c8:	e02c      	b.n	8003224 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2180      	movs	r1, #128	; 0x80
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fdf6 	bl	8003dc6 <UART_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e038      	b.n	8003256 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10b      	bne.n	8003202 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	3302      	adds	r3, #2
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	e007      	b.n	8003212 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	781a      	ldrb	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	3301      	adds	r3, #1
 8003210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1cc      	bne.n	80031ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2200      	movs	r2, #0
 8003238:	2140      	movs	r1, #64	; 0x40
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fdc3 	bl	8003dc6 <UART_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e005      	b.n	8003256 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	4613      	mov	r3, r2
 800326a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003270:	2b20      	cmp	r3, #32
 8003272:	d12c      	bne.n	80032ce <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_UART_Receive_IT+0x22>
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e025      	b.n	80032d0 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_UART_Receive_IT+0x34>
 800328e:	2302      	movs	r3, #2
 8003290:	e01e      	b.n	80032d0 <HAL_UART_Receive_IT+0x72>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032bc:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	461a      	mov	r2, r3
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fdfb 	bl	8003ec0 <UART_Start_Receive_IT>
 80032ca:	4603      	mov	r3, r0
 80032cc:	e000      	b.n	80032d0 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
  }
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d113      	bne.n	8003330 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00e      	beq.n	8003330 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 81cc 	beq.w	80036be <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
      }
      return;
 800332e:	e1c6      	b.n	80036be <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80e3 	beq.w	80034fe <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d105      	bne.n	800334e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4ba5      	ldr	r3, [pc, #660]	; (80035dc <HAL_UART_IRQHandler+0x304>)
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80d8 	beq.w	80034fe <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d010      	beq.n	800337a <HAL_UART_IRQHandler+0xa2>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2201      	movs	r2, #1
 8003368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <HAL_UART_IRQHandler+0xce>
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2202      	movs	r2, #2
 8003394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800339c:	f043 0204 	orr.w	r2, r3, #4
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d010      	beq.n	80033d2 <HAL_UART_IRQHandler+0xfa>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2204      	movs	r2, #4
 80033c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033c8:	f043 0202 	orr.w	r2, r3, #2
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d015      	beq.n	8003408 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d104      	bne.n	80033f0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2208      	movs	r2, #8
 80033f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fe:	f043 0208 	orr.w	r2, r3, #8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340e:	2b00      	cmp	r3, #0
 8003410:	d011      	beq.n	8003436 <HAL_UART_IRQHandler+0x15e>
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00c      	beq.n	8003436 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8140 	beq.w	80036c2 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00c      	beq.n	8003466 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800346c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d004      	beq.n	8003486 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003482:	2b00      	cmp	r3, #0
 8003484:	d031      	beq.n	80034ea <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fda2 	bl	8003fd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003496:	2b40      	cmp	r3, #64	; 0x40
 8003498:	d123      	bne.n	80034e2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d013      	beq.n	80034da <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a4a      	ldr	r2, [pc, #296]	; (80035e0 <HAL_UART_IRQHandler+0x308>)
 80034b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe f9c5 	bl	800184e <HAL_DMA_Abort_IT>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d017      	beq.n	80034fa <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80034d4:	4610      	mov	r0, r2
 80034d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d8:	e00f      	b.n	80034fa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f906 	bl	80036ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e0:	e00b      	b.n	80034fa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f902 	bl	80036ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e8:	e007      	b.n	80034fa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f8fe 	bl	80036ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80034f8:	e0e3      	b.n	80036c2 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fa:	bf00      	nop
    return;
 80034fc:	e0e1      	b.n	80036c2 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	2b01      	cmp	r3, #1
 8003504:	f040 80a7 	bne.w	8003656 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80a1 	beq.w	8003656 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 809b 	beq.w	8003656 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2210      	movs	r2, #16
 8003526:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d156      	bne.n	80035e4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003540:	893b      	ldrh	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80bf 	beq.w	80036c6 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800354e:	893a      	ldrh	r2, [r7, #8]
 8003550:	429a      	cmp	r2, r3
 8003552:	f080 80b8 	bcs.w	80036c6 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	893a      	ldrh	r2, [r7, #8]
 800355a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003568:	d02a      	beq.n	80035c0 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003578:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003598:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0210 	bic.w	r2, r2, #16
 80035b4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe f8d7 	bl	800176e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f893 	bl	8003700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035da:	e074      	b.n	80036c6 <HAL_UART_IRQHandler+0x3ee>
 80035dc:	04000120 	.word	0x04000120
 80035e0:	0800402f 	.word	0x0800402f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d063      	beq.n	80036ca <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8003602:	897b      	ldrh	r3, [r7, #10]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d060      	beq.n	80036ca <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003616:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0210 	bic.w	r2, r2, #16
 8003648:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800364a:	897b      	ldrh	r3, [r7, #10]
 800364c:	4619      	mov	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f856 	bl	8003700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003654:	e039      	b.n	80036ca <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <HAL_UART_IRQHandler+0x3a4>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003672:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f84f 	bl	8003718 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800367a:	e029      	b.n	80036d0 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00d      	beq.n	80036a2 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01a      	beq.n	80036ce <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
    }
    return;
 80036a0:	e015      	b.n	80036ce <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d011      	beq.n	80036d0 <HAL_UART_IRQHandler+0x3f8>
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00c      	beq.n	80036d0 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fccf 	bl	800405a <UART_EndTransmit_IT>
    return;
 80036bc:	e008      	b.n	80036d0 <HAL_UART_IRQHandler+0x3f8>
      return;
 80036be:	bf00      	nop
 80036c0:	e006      	b.n	80036d0 <HAL_UART_IRQHandler+0x3f8>
    return;
 80036c2:	bf00      	nop
 80036c4:	e004      	b.n	80036d0 <HAL_UART_IRQHandler+0x3f8>
      return;
 80036c6:	bf00      	nop
 80036c8:	e002      	b.n	80036d0 <HAL_UART_IRQHandler+0x3f8>
      return;
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <HAL_UART_IRQHandler+0x3f8>
    return;
 80036ce:	bf00      	nop
  }

}
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop

080036d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4ba7      	ldr	r3, [pc, #668]	; (80039f4 <UART_SetConfig+0x2c8>)
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	6979      	ldr	r1, [r7, #20]
 8003760:	430b      	orrs	r3, r1
 8003762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	430a      	orrs	r2, r1
 800379c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a95      	ldr	r2, [pc, #596]	; (80039f8 <UART_SetConfig+0x2cc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d120      	bne.n	80037ea <UART_SetConfig+0xbe>
 80037a8:	4b94      	ldr	r3, [pc, #592]	; (80039fc <UART_SetConfig+0x2d0>)
 80037aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d816      	bhi.n	80037e4 <UART_SetConfig+0xb8>
 80037b6:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0x90>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037d9 	.word	0x080037d9
 80037c4:	080037d3 	.word	0x080037d3
 80037c8:	080037df 	.word	0x080037df
 80037cc:	2301      	movs	r3, #1
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e14f      	b.n	8003a72 <UART_SetConfig+0x346>
 80037d2:	2302      	movs	r3, #2
 80037d4:	77fb      	strb	r3, [r7, #31]
 80037d6:	e14c      	b.n	8003a72 <UART_SetConfig+0x346>
 80037d8:	2304      	movs	r3, #4
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	e149      	b.n	8003a72 <UART_SetConfig+0x346>
 80037de:	2308      	movs	r3, #8
 80037e0:	77fb      	strb	r3, [r7, #31]
 80037e2:	e146      	b.n	8003a72 <UART_SetConfig+0x346>
 80037e4:	2310      	movs	r3, #16
 80037e6:	77fb      	strb	r3, [r7, #31]
 80037e8:	e143      	b.n	8003a72 <UART_SetConfig+0x346>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a84      	ldr	r2, [pc, #528]	; (8003a00 <UART_SetConfig+0x2d4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d132      	bne.n	800385a <UART_SetConfig+0x12e>
 80037f4:	4b81      	ldr	r3, [pc, #516]	; (80039fc <UART_SetConfig+0x2d0>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d828      	bhi.n	8003854 <UART_SetConfig+0x128>
 8003802:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <UART_SetConfig+0xdc>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	0800383d 	.word	0x0800383d
 800380c:	08003855 	.word	0x08003855
 8003810:	08003855 	.word	0x08003855
 8003814:	08003855 	.word	0x08003855
 8003818:	08003849 	.word	0x08003849
 800381c:	08003855 	.word	0x08003855
 8003820:	08003855 	.word	0x08003855
 8003824:	08003855 	.word	0x08003855
 8003828:	08003843 	.word	0x08003843
 800382c:	08003855 	.word	0x08003855
 8003830:	08003855 	.word	0x08003855
 8003834:	08003855 	.word	0x08003855
 8003838:	0800384f 	.word	0x0800384f
 800383c:	2300      	movs	r3, #0
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e117      	b.n	8003a72 <UART_SetConfig+0x346>
 8003842:	2302      	movs	r3, #2
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	e114      	b.n	8003a72 <UART_SetConfig+0x346>
 8003848:	2304      	movs	r3, #4
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e111      	b.n	8003a72 <UART_SetConfig+0x346>
 800384e:	2308      	movs	r3, #8
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	e10e      	b.n	8003a72 <UART_SetConfig+0x346>
 8003854:	2310      	movs	r3, #16
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e10b      	b.n	8003a72 <UART_SetConfig+0x346>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a69      	ldr	r2, [pc, #420]	; (8003a04 <UART_SetConfig+0x2d8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d120      	bne.n	80038a6 <UART_SetConfig+0x17a>
 8003864:	4b65      	ldr	r3, [pc, #404]	; (80039fc <UART_SetConfig+0x2d0>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800386e:	2b30      	cmp	r3, #48	; 0x30
 8003870:	d013      	beq.n	800389a <UART_SetConfig+0x16e>
 8003872:	2b30      	cmp	r3, #48	; 0x30
 8003874:	d814      	bhi.n	80038a0 <UART_SetConfig+0x174>
 8003876:	2b20      	cmp	r3, #32
 8003878:	d009      	beq.n	800388e <UART_SetConfig+0x162>
 800387a:	2b20      	cmp	r3, #32
 800387c:	d810      	bhi.n	80038a0 <UART_SetConfig+0x174>
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <UART_SetConfig+0x15c>
 8003882:	2b10      	cmp	r3, #16
 8003884:	d006      	beq.n	8003894 <UART_SetConfig+0x168>
 8003886:	e00b      	b.n	80038a0 <UART_SetConfig+0x174>
 8003888:	2300      	movs	r3, #0
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e0f1      	b.n	8003a72 <UART_SetConfig+0x346>
 800388e:	2302      	movs	r3, #2
 8003890:	77fb      	strb	r3, [r7, #31]
 8003892:	e0ee      	b.n	8003a72 <UART_SetConfig+0x346>
 8003894:	2304      	movs	r3, #4
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e0eb      	b.n	8003a72 <UART_SetConfig+0x346>
 800389a:	2308      	movs	r3, #8
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e0e8      	b.n	8003a72 <UART_SetConfig+0x346>
 80038a0:	2310      	movs	r3, #16
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e0e5      	b.n	8003a72 <UART_SetConfig+0x346>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a57      	ldr	r2, [pc, #348]	; (8003a08 <UART_SetConfig+0x2dc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d120      	bne.n	80038f2 <UART_SetConfig+0x1c6>
 80038b0:	4b52      	ldr	r3, [pc, #328]	; (80039fc <UART_SetConfig+0x2d0>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038ba:	2bc0      	cmp	r3, #192	; 0xc0
 80038bc:	d013      	beq.n	80038e6 <UART_SetConfig+0x1ba>
 80038be:	2bc0      	cmp	r3, #192	; 0xc0
 80038c0:	d814      	bhi.n	80038ec <UART_SetConfig+0x1c0>
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d009      	beq.n	80038da <UART_SetConfig+0x1ae>
 80038c6:	2b80      	cmp	r3, #128	; 0x80
 80038c8:	d810      	bhi.n	80038ec <UART_SetConfig+0x1c0>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <UART_SetConfig+0x1a8>
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d006      	beq.n	80038e0 <UART_SetConfig+0x1b4>
 80038d2:	e00b      	b.n	80038ec <UART_SetConfig+0x1c0>
 80038d4:	2300      	movs	r3, #0
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e0cb      	b.n	8003a72 <UART_SetConfig+0x346>
 80038da:	2302      	movs	r3, #2
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e0c8      	b.n	8003a72 <UART_SetConfig+0x346>
 80038e0:	2304      	movs	r3, #4
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e0c5      	b.n	8003a72 <UART_SetConfig+0x346>
 80038e6:	2308      	movs	r3, #8
 80038e8:	77fb      	strb	r3, [r7, #31]
 80038ea:	e0c2      	b.n	8003a72 <UART_SetConfig+0x346>
 80038ec:	2310      	movs	r3, #16
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e0bf      	b.n	8003a72 <UART_SetConfig+0x346>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a45      	ldr	r2, [pc, #276]	; (8003a0c <UART_SetConfig+0x2e0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d125      	bne.n	8003948 <UART_SetConfig+0x21c>
 80038fc:	4b3f      	ldr	r3, [pc, #252]	; (80039fc <UART_SetConfig+0x2d0>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800390a:	d017      	beq.n	800393c <UART_SetConfig+0x210>
 800390c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003910:	d817      	bhi.n	8003942 <UART_SetConfig+0x216>
 8003912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003916:	d00b      	beq.n	8003930 <UART_SetConfig+0x204>
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d811      	bhi.n	8003942 <UART_SetConfig+0x216>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <UART_SetConfig+0x1fe>
 8003922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003926:	d006      	beq.n	8003936 <UART_SetConfig+0x20a>
 8003928:	e00b      	b.n	8003942 <UART_SetConfig+0x216>
 800392a:	2300      	movs	r3, #0
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e0a0      	b.n	8003a72 <UART_SetConfig+0x346>
 8003930:	2302      	movs	r3, #2
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e09d      	b.n	8003a72 <UART_SetConfig+0x346>
 8003936:	2304      	movs	r3, #4
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e09a      	b.n	8003a72 <UART_SetConfig+0x346>
 800393c:	2308      	movs	r3, #8
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e097      	b.n	8003a72 <UART_SetConfig+0x346>
 8003942:	2310      	movs	r3, #16
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e094      	b.n	8003a72 <UART_SetConfig+0x346>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a30      	ldr	r2, [pc, #192]	; (8003a10 <UART_SetConfig+0x2e4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d125      	bne.n	800399e <UART_SetConfig+0x272>
 8003952:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <UART_SetConfig+0x2d0>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800395c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003960:	d017      	beq.n	8003992 <UART_SetConfig+0x266>
 8003962:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003966:	d817      	bhi.n	8003998 <UART_SetConfig+0x26c>
 8003968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396c:	d00b      	beq.n	8003986 <UART_SetConfig+0x25a>
 800396e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003972:	d811      	bhi.n	8003998 <UART_SetConfig+0x26c>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <UART_SetConfig+0x254>
 8003978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397c:	d006      	beq.n	800398c <UART_SetConfig+0x260>
 800397e:	e00b      	b.n	8003998 <UART_SetConfig+0x26c>
 8003980:	2301      	movs	r3, #1
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e075      	b.n	8003a72 <UART_SetConfig+0x346>
 8003986:	2302      	movs	r3, #2
 8003988:	77fb      	strb	r3, [r7, #31]
 800398a:	e072      	b.n	8003a72 <UART_SetConfig+0x346>
 800398c:	2304      	movs	r3, #4
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e06f      	b.n	8003a72 <UART_SetConfig+0x346>
 8003992:	2308      	movs	r3, #8
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	e06c      	b.n	8003a72 <UART_SetConfig+0x346>
 8003998:	2310      	movs	r3, #16
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e069      	b.n	8003a72 <UART_SetConfig+0x346>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <UART_SetConfig+0x2e8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d137      	bne.n	8003a18 <UART_SetConfig+0x2ec>
 80039a8:	4b14      	ldr	r3, [pc, #80]	; (80039fc <UART_SetConfig+0x2d0>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80039b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039b6:	d017      	beq.n	80039e8 <UART_SetConfig+0x2bc>
 80039b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039bc:	d817      	bhi.n	80039ee <UART_SetConfig+0x2c2>
 80039be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c2:	d00b      	beq.n	80039dc <UART_SetConfig+0x2b0>
 80039c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c8:	d811      	bhi.n	80039ee <UART_SetConfig+0x2c2>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <UART_SetConfig+0x2aa>
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	d006      	beq.n	80039e2 <UART_SetConfig+0x2b6>
 80039d4:	e00b      	b.n	80039ee <UART_SetConfig+0x2c2>
 80039d6:	2300      	movs	r3, #0
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e04a      	b.n	8003a72 <UART_SetConfig+0x346>
 80039dc:	2302      	movs	r3, #2
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e047      	b.n	8003a72 <UART_SetConfig+0x346>
 80039e2:	2304      	movs	r3, #4
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e044      	b.n	8003a72 <UART_SetConfig+0x346>
 80039e8:	2308      	movs	r3, #8
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e041      	b.n	8003a72 <UART_SetConfig+0x346>
 80039ee:	2310      	movs	r3, #16
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e03e      	b.n	8003a72 <UART_SetConfig+0x346>
 80039f4:	efff69f3 	.word	0xefff69f3
 80039f8:	40011000 	.word	0x40011000
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40004400 	.word	0x40004400
 8003a04:	40004800 	.word	0x40004800
 8003a08:	40004c00 	.word	0x40004c00
 8003a0c:	40005000 	.word	0x40005000
 8003a10:	40011400 	.word	0x40011400
 8003a14:	40007800 	.word	0x40007800
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a71      	ldr	r2, [pc, #452]	; (8003be4 <UART_SetConfig+0x4b8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d125      	bne.n	8003a6e <UART_SetConfig+0x342>
 8003a22:	4b71      	ldr	r3, [pc, #452]	; (8003be8 <UART_SetConfig+0x4bc>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a30:	d017      	beq.n	8003a62 <UART_SetConfig+0x336>
 8003a32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a36:	d817      	bhi.n	8003a68 <UART_SetConfig+0x33c>
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3c:	d00b      	beq.n	8003a56 <UART_SetConfig+0x32a>
 8003a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a42:	d811      	bhi.n	8003a68 <UART_SetConfig+0x33c>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <UART_SetConfig+0x324>
 8003a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a4c:	d006      	beq.n	8003a5c <UART_SetConfig+0x330>
 8003a4e:	e00b      	b.n	8003a68 <UART_SetConfig+0x33c>
 8003a50:	2300      	movs	r3, #0
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e00d      	b.n	8003a72 <UART_SetConfig+0x346>
 8003a56:	2302      	movs	r3, #2
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e00a      	b.n	8003a72 <UART_SetConfig+0x346>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	e007      	b.n	8003a72 <UART_SetConfig+0x346>
 8003a62:	2308      	movs	r3, #8
 8003a64:	77fb      	strb	r3, [r7, #31]
 8003a66:	e004      	b.n	8003a72 <UART_SetConfig+0x346>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	77fb      	strb	r3, [r7, #31]
 8003a6c:	e001      	b.n	8003a72 <UART_SetConfig+0x346>
 8003a6e:	2310      	movs	r3, #16
 8003a70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7a:	d15b      	bne.n	8003b34 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003a7c:	7ffb      	ldrb	r3, [r7, #31]
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d827      	bhi.n	8003ad2 <UART_SetConfig+0x3a6>
 8003a82:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <UART_SetConfig+0x35c>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003aad 	.word	0x08003aad
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003abd 	.word	0x08003abd
 8003a94:	08003ad3 	.word	0x08003ad3
 8003a98:	08003ac3 	.word	0x08003ac3
 8003a9c:	08003ad3 	.word	0x08003ad3
 8003aa0:	08003ad3 	.word	0x08003ad3
 8003aa4:	08003ad3 	.word	0x08003ad3
 8003aa8:	08003acb 	.word	0x08003acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aac:	f7fe fd3e 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8003ab0:	61b8      	str	r0, [r7, #24]
        break;
 8003ab2:	e013      	b.n	8003adc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab4:	f7fe fd4e 	bl	8002554 <HAL_RCC_GetPCLK2Freq>
 8003ab8:	61b8      	str	r0, [r7, #24]
        break;
 8003aba:	e00f      	b.n	8003adc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003abc:	4b4b      	ldr	r3, [pc, #300]	; (8003bec <UART_SetConfig+0x4c0>)
 8003abe:	61bb      	str	r3, [r7, #24]
        break;
 8003ac0:	e00c      	b.n	8003adc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac2:	f7fe fc47 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 8003ac6:	61b8      	str	r0, [r7, #24]
        break;
 8003ac8:	e008      	b.n	8003adc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ace:	61bb      	str	r3, [r7, #24]
        break;
 8003ad0:	e004      	b.n	8003adc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	77bb      	strb	r3, [r7, #30]
        break;
 8003ada:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d074      	beq.n	8003bcc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	005a      	lsls	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	441a      	add	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b0f      	cmp	r3, #15
 8003afe:	d916      	bls.n	8003b2e <UART_SetConfig+0x402>
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b06:	d212      	bcs.n	8003b2e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f023 030f 	bic.w	r3, r3, #15
 8003b10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	89fb      	ldrh	r3, [r7, #14]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	89fa      	ldrh	r2, [r7, #14]
 8003b2a:	60da      	str	r2, [r3, #12]
 8003b2c:	e04e      	b.n	8003bcc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	77bb      	strb	r3, [r7, #30]
 8003b32:	e04b      	b.n	8003bcc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b34:	7ffb      	ldrb	r3, [r7, #31]
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d827      	bhi.n	8003b8a <UART_SetConfig+0x45e>
 8003b3a:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <UART_SetConfig+0x414>)
 8003b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b40:	08003b65 	.word	0x08003b65
 8003b44:	08003b6d 	.word	0x08003b6d
 8003b48:	08003b75 	.word	0x08003b75
 8003b4c:	08003b8b 	.word	0x08003b8b
 8003b50:	08003b7b 	.word	0x08003b7b
 8003b54:	08003b8b 	.word	0x08003b8b
 8003b58:	08003b8b 	.word	0x08003b8b
 8003b5c:	08003b8b 	.word	0x08003b8b
 8003b60:	08003b83 	.word	0x08003b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b64:	f7fe fce2 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8003b68:	61b8      	str	r0, [r7, #24]
        break;
 8003b6a:	e013      	b.n	8003b94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b6c:	f7fe fcf2 	bl	8002554 <HAL_RCC_GetPCLK2Freq>
 8003b70:	61b8      	str	r0, [r7, #24]
        break;
 8003b72:	e00f      	b.n	8003b94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <UART_SetConfig+0x4c0>)
 8003b76:	61bb      	str	r3, [r7, #24]
        break;
 8003b78:	e00c      	b.n	8003b94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7a:	f7fe fbeb 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 8003b7e:	61b8      	str	r0, [r7, #24]
        break;
 8003b80:	e008      	b.n	8003b94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b86:	61bb      	str	r3, [r7, #24]
        break;
 8003b88:	e004      	b.n	8003b94 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	77bb      	strb	r3, [r7, #30]
        break;
 8003b92:	bf00      	nop
    }

    if (pclk != 0U)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d018      	beq.n	8003bcc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	085a      	lsrs	r2, r3, #1
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	441a      	add	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	d908      	bls.n	8003bc8 <UART_SetConfig+0x49c>
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbc:	d204      	bcs.n	8003bc8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	e001      	b.n	8003bcc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003bd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40007c00 	.word	0x40007c00
 8003be8:	40023800 	.word	0x40023800
 8003bec:	00f42400 	.word	0x00f42400

08003bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01a      	beq.n	8003d06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cee:	d10a      	bne.n	8003d06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
  }
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d44:	f7fd fbd2 	bl	80014ec <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d10e      	bne.n	8003d76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f82d 	bl	8003dc6 <UART_WaitOnFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e023      	b.n	8003dbe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d10e      	bne.n	8003da2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f817 	bl	8003dc6 <UART_WaitOnFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e00d      	b.n	8003dbe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd6:	e05e      	b.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d05a      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de0:	f7fd fb84 	bl	80014ec <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d302      	bcc.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11b      	bne.n	8003e2e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0201 	bic.w	r2, r2, #1
 8003e14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e043      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d02c      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e4a:	d124      	bne.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e64:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e00f      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	bf0c      	ite	eq
 8003ea6:	2301      	moveq	r3, #1
 8003ea8:	2300      	movne	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d091      	beq.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	88fa      	ldrh	r2, [r7, #6]
 8003ee0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef2:	d10e      	bne.n	8003f12 <UART_Start_Receive_IT+0x52>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d105      	bne.n	8003f08 <UART_Start_Receive_IT+0x48>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f06:	e02d      	b.n	8003f64 <UART_Start_Receive_IT+0xa4>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	22ff      	movs	r2, #255	; 0xff
 8003f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f10:	e028      	b.n	8003f64 <UART_Start_Receive_IT+0xa4>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10d      	bne.n	8003f36 <UART_Start_Receive_IT+0x76>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d104      	bne.n	8003f2c <UART_Start_Receive_IT+0x6c>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	22ff      	movs	r2, #255	; 0xff
 8003f26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f2a:	e01b      	b.n	8003f64 <UART_Start_Receive_IT+0xa4>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	227f      	movs	r2, #127	; 0x7f
 8003f30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f34:	e016      	b.n	8003f64 <UART_Start_Receive_IT+0xa4>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f3e:	d10d      	bne.n	8003f5c <UART_Start_Receive_IT+0x9c>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <UART_Start_Receive_IT+0x92>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	227f      	movs	r2, #127	; 0x7f
 8003f4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f50:	e008      	b.n	8003f64 <UART_Start_Receive_IT+0xa4>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	223f      	movs	r2, #63	; 0x3f
 8003f56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f5a:	e003      	b.n	8003f64 <UART_Start_Receive_IT+0xa4>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2222      	movs	r2, #34	; 0x22
 8003f70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0201 	orr.w	r2, r2, #1
 8003f80:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8a:	d107      	bne.n	8003f9c <UART_Start_Receive_IT+0xdc>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a0c      	ldr	r2, [pc, #48]	; (8003fc8 <UART_Start_Receive_IT+0x108>)
 8003f98:	665a      	str	r2, [r3, #100]	; 0x64
 8003f9a:	e002      	b.n	8003fa2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <UART_Start_Receive_IT+0x10c>)
 8003fa0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003fb8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	08004161 	.word	0x08004161
 8003fcc:	0800408d 	.word	0x0800408d

08003fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fe6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0201 	bic.w	r2, r2, #1
 8003ff6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d107      	bne.n	8004010 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0210 	bic.w	r2, r2, #16
 800400e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7ff fb4d 	bl	80036ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004070:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff fb2a 	bl	80036d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800409a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040a0:	2b22      	cmp	r3, #34	; 0x22
 80040a2:	d151      	bne.n	8004148 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040ac:	89bb      	ldrh	r3, [r7, #12]
 80040ae:	b2d9      	uxtb	r1, r3
 80040b0:	89fb      	ldrh	r3, [r7, #14]
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	400a      	ands	r2, r1
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d138      	bne.n	8004158 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040f4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004116:	2b01      	cmp	r3, #1
 8004118:	d10f      	bne.n	800413a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0210 	bic.w	r2, r2, #16
 8004128:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fae4 	bl	8003700 <HAL_UARTEx_RxEventCallback>
 8004138:	e002      	b.n	8004140 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fc ff92 	bl	8001064 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004146:	e007      	b.n	8004158 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0208 	orr.w	r2, r2, #8
 8004156:	619a      	str	r2, [r3, #24]
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800416e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004174:	2b22      	cmp	r3, #34	; 0x22
 8004176:	d151      	bne.n	800421c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004186:	89ba      	ldrh	r2, [r7, #12]
 8004188:	89fb      	ldrh	r3, [r7, #14]
 800418a:	4013      	ands	r3, r2
 800418c:	b29a      	uxth	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	1c9a      	adds	r2, r3, #2
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d138      	bne.n	800422c <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041c8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10f      	bne.n	800420e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0210 	bic.w	r2, r2, #16
 80041fc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fa7a 	bl	8003700 <HAL_UARTEx_RxEventCallback>
 800420c:	e002      	b.n	8004214 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fc ff28 	bl	8001064 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800421a:	e007      	b.n	800422c <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0208 	orr.w	r2, r2, #8
 800422a:	619a      	str	r2, [r3, #24]
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <__errno>:
 8004234:	4b01      	ldr	r3, [pc, #4]	; (800423c <__errno+0x8>)
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	2000007c 	.word	0x2000007c

08004240 <__libc_init_array>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	4d0d      	ldr	r5, [pc, #52]	; (8004278 <__libc_init_array+0x38>)
 8004244:	4c0d      	ldr	r4, [pc, #52]	; (800427c <__libc_init_array+0x3c>)
 8004246:	1b64      	subs	r4, r4, r5
 8004248:	10a4      	asrs	r4, r4, #2
 800424a:	2600      	movs	r6, #0
 800424c:	42a6      	cmp	r6, r4
 800424e:	d109      	bne.n	8004264 <__libc_init_array+0x24>
 8004250:	4d0b      	ldr	r5, [pc, #44]	; (8004280 <__libc_init_array+0x40>)
 8004252:	4c0c      	ldr	r4, [pc, #48]	; (8004284 <__libc_init_array+0x44>)
 8004254:	f004 fb8c 	bl	8008970 <_init>
 8004258:	1b64      	subs	r4, r4, r5
 800425a:	10a4      	asrs	r4, r4, #2
 800425c:	2600      	movs	r6, #0
 800425e:	42a6      	cmp	r6, r4
 8004260:	d105      	bne.n	800426e <__libc_init_array+0x2e>
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	f855 3b04 	ldr.w	r3, [r5], #4
 8004268:	4798      	blx	r3
 800426a:	3601      	adds	r6, #1
 800426c:	e7ee      	b.n	800424c <__libc_init_array+0xc>
 800426e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004272:	4798      	blx	r3
 8004274:	3601      	adds	r6, #1
 8004276:	e7f2      	b.n	800425e <__libc_init_array+0x1e>
 8004278:	08008edc 	.word	0x08008edc
 800427c:	08008edc 	.word	0x08008edc
 8004280:	08008edc 	.word	0x08008edc
 8004284:	08008ee0 	.word	0x08008ee0

08004288 <memset>:
 8004288:	4402      	add	r2, r0
 800428a:	4603      	mov	r3, r0
 800428c:	4293      	cmp	r3, r2
 800428e:	d100      	bne.n	8004292 <memset+0xa>
 8004290:	4770      	bx	lr
 8004292:	f803 1b01 	strb.w	r1, [r3], #1
 8004296:	e7f9      	b.n	800428c <memset+0x4>

08004298 <__cvt>:
 8004298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800429a:	ed2d 8b02 	vpush	{d8}
 800429e:	eeb0 8b40 	vmov.f64	d8, d0
 80042a2:	b085      	sub	sp, #20
 80042a4:	4617      	mov	r7, r2
 80042a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80042a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80042aa:	ee18 2a90 	vmov	r2, s17
 80042ae:	f025 0520 	bic.w	r5, r5, #32
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	bfb6      	itet	lt
 80042b6:	222d      	movlt	r2, #45	; 0x2d
 80042b8:	2200      	movge	r2, #0
 80042ba:	eeb1 8b40 	vneglt.f64	d8, d0
 80042be:	2d46      	cmp	r5, #70	; 0x46
 80042c0:	460c      	mov	r4, r1
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	d004      	beq.n	80042d0 <__cvt+0x38>
 80042c6:	2d45      	cmp	r5, #69	; 0x45
 80042c8:	d100      	bne.n	80042cc <__cvt+0x34>
 80042ca:	3401      	adds	r4, #1
 80042cc:	2102      	movs	r1, #2
 80042ce:	e000      	b.n	80042d2 <__cvt+0x3a>
 80042d0:	2103      	movs	r1, #3
 80042d2:	ab03      	add	r3, sp, #12
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	ab02      	add	r3, sp, #8
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	4622      	mov	r2, r4
 80042dc:	4633      	mov	r3, r6
 80042de:	eeb0 0b48 	vmov.f64	d0, d8
 80042e2:	f001 fd69 	bl	8005db8 <_dtoa_r>
 80042e6:	2d47      	cmp	r5, #71	; 0x47
 80042e8:	d109      	bne.n	80042fe <__cvt+0x66>
 80042ea:	07fb      	lsls	r3, r7, #31
 80042ec:	d407      	bmi.n	80042fe <__cvt+0x66>
 80042ee:	9b03      	ldr	r3, [sp, #12]
 80042f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042f2:	1a1b      	subs	r3, r3, r0
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	b005      	add	sp, #20
 80042f8:	ecbd 8b02 	vpop	{d8}
 80042fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042fe:	2d46      	cmp	r5, #70	; 0x46
 8004300:	eb00 0204 	add.w	r2, r0, r4
 8004304:	d10c      	bne.n	8004320 <__cvt+0x88>
 8004306:	7803      	ldrb	r3, [r0, #0]
 8004308:	2b30      	cmp	r3, #48	; 0x30
 800430a:	d107      	bne.n	800431c <__cvt+0x84>
 800430c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004314:	bf1c      	itt	ne
 8004316:	f1c4 0401 	rsbne	r4, r4, #1
 800431a:	6034      	strne	r4, [r6, #0]
 800431c:	6833      	ldr	r3, [r6, #0]
 800431e:	441a      	add	r2, r3
 8004320:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004328:	bf08      	it	eq
 800432a:	9203      	streq	r2, [sp, #12]
 800432c:	2130      	movs	r1, #48	; 0x30
 800432e:	9b03      	ldr	r3, [sp, #12]
 8004330:	4293      	cmp	r3, r2
 8004332:	d2dc      	bcs.n	80042ee <__cvt+0x56>
 8004334:	1c5c      	adds	r4, r3, #1
 8004336:	9403      	str	r4, [sp, #12]
 8004338:	7019      	strb	r1, [r3, #0]
 800433a:	e7f8      	b.n	800432e <__cvt+0x96>

0800433c <__exponent>:
 800433c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800433e:	4603      	mov	r3, r0
 8004340:	2900      	cmp	r1, #0
 8004342:	bfb8      	it	lt
 8004344:	4249      	neglt	r1, r1
 8004346:	f803 2b02 	strb.w	r2, [r3], #2
 800434a:	bfb4      	ite	lt
 800434c:	222d      	movlt	r2, #45	; 0x2d
 800434e:	222b      	movge	r2, #43	; 0x2b
 8004350:	2909      	cmp	r1, #9
 8004352:	7042      	strb	r2, [r0, #1]
 8004354:	dd2a      	ble.n	80043ac <__exponent+0x70>
 8004356:	f10d 0407 	add.w	r4, sp, #7
 800435a:	46a4      	mov	ip, r4
 800435c:	270a      	movs	r7, #10
 800435e:	46a6      	mov	lr, r4
 8004360:	460a      	mov	r2, r1
 8004362:	fb91 f6f7 	sdiv	r6, r1, r7
 8004366:	fb07 1516 	mls	r5, r7, r6, r1
 800436a:	3530      	adds	r5, #48	; 0x30
 800436c:	2a63      	cmp	r2, #99	; 0x63
 800436e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004372:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004376:	4631      	mov	r1, r6
 8004378:	dcf1      	bgt.n	800435e <__exponent+0x22>
 800437a:	3130      	adds	r1, #48	; 0x30
 800437c:	f1ae 0502 	sub.w	r5, lr, #2
 8004380:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004384:	1c44      	adds	r4, r0, #1
 8004386:	4629      	mov	r1, r5
 8004388:	4561      	cmp	r1, ip
 800438a:	d30a      	bcc.n	80043a2 <__exponent+0x66>
 800438c:	f10d 0209 	add.w	r2, sp, #9
 8004390:	eba2 020e 	sub.w	r2, r2, lr
 8004394:	4565      	cmp	r5, ip
 8004396:	bf88      	it	hi
 8004398:	2200      	movhi	r2, #0
 800439a:	4413      	add	r3, r2
 800439c:	1a18      	subs	r0, r3, r0
 800439e:	b003      	add	sp, #12
 80043a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80043aa:	e7ed      	b.n	8004388 <__exponent+0x4c>
 80043ac:	2330      	movs	r3, #48	; 0x30
 80043ae:	3130      	adds	r1, #48	; 0x30
 80043b0:	7083      	strb	r3, [r0, #2]
 80043b2:	70c1      	strb	r1, [r0, #3]
 80043b4:	1d03      	adds	r3, r0, #4
 80043b6:	e7f1      	b.n	800439c <__exponent+0x60>

080043b8 <_printf_float>:
 80043b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043bc:	b08b      	sub	sp, #44	; 0x2c
 80043be:	460c      	mov	r4, r1
 80043c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80043c4:	4616      	mov	r6, r2
 80043c6:	461f      	mov	r7, r3
 80043c8:	4605      	mov	r5, r0
 80043ca:	f002 fde7 	bl	8006f9c <_localeconv_r>
 80043ce:	f8d0 b000 	ldr.w	fp, [r0]
 80043d2:	4658      	mov	r0, fp
 80043d4:	f7fb ff3e 	bl	8000254 <strlen>
 80043d8:	2300      	movs	r3, #0
 80043da:	9308      	str	r3, [sp, #32]
 80043dc:	f8d8 3000 	ldr.w	r3, [r8]
 80043e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80043e4:	6822      	ldr	r2, [r4, #0]
 80043e6:	3307      	adds	r3, #7
 80043e8:	f023 0307 	bic.w	r3, r3, #7
 80043ec:	f103 0108 	add.w	r1, r3, #8
 80043f0:	f8c8 1000 	str.w	r1, [r8]
 80043f4:	4682      	mov	sl, r0
 80043f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80043fe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8004660 <_printf_float+0x2a8>
 8004402:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004406:	eeb0 6bc0 	vabs.f64	d6, d0
 800440a:	eeb4 6b47 	vcmp.f64	d6, d7
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	dd24      	ble.n	800445e <_printf_float+0xa6>
 8004414:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441c:	d502      	bpl.n	8004424 <_printf_float+0x6c>
 800441e:	232d      	movs	r3, #45	; 0x2d
 8004420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004424:	4b90      	ldr	r3, [pc, #576]	; (8004668 <_printf_float+0x2b0>)
 8004426:	4891      	ldr	r0, [pc, #580]	; (800466c <_printf_float+0x2b4>)
 8004428:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800442c:	bf94      	ite	ls
 800442e:	4698      	movls	r8, r3
 8004430:	4680      	movhi	r8, r0
 8004432:	2303      	movs	r3, #3
 8004434:	6123      	str	r3, [r4, #16]
 8004436:	f022 0204 	bic.w	r2, r2, #4
 800443a:	2300      	movs	r3, #0
 800443c:	6022      	str	r2, [r4, #0]
 800443e:	9304      	str	r3, [sp, #16]
 8004440:	9700      	str	r7, [sp, #0]
 8004442:	4633      	mov	r3, r6
 8004444:	aa09      	add	r2, sp, #36	; 0x24
 8004446:	4621      	mov	r1, r4
 8004448:	4628      	mov	r0, r5
 800444a:	f000 f9d3 	bl	80047f4 <_printf_common>
 800444e:	3001      	adds	r0, #1
 8004450:	f040 808a 	bne.w	8004568 <_printf_float+0x1b0>
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	b00b      	add	sp, #44	; 0x2c
 800445a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800445e:	eeb4 0b40 	vcmp.f64	d0, d0
 8004462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004466:	d709      	bvc.n	800447c <_printf_float+0xc4>
 8004468:	ee10 3a90 	vmov	r3, s1
 800446c:	2b00      	cmp	r3, #0
 800446e:	bfbc      	itt	lt
 8004470:	232d      	movlt	r3, #45	; 0x2d
 8004472:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004476:	487e      	ldr	r0, [pc, #504]	; (8004670 <_printf_float+0x2b8>)
 8004478:	4b7e      	ldr	r3, [pc, #504]	; (8004674 <_printf_float+0x2bc>)
 800447a:	e7d5      	b.n	8004428 <_printf_float+0x70>
 800447c:	6863      	ldr	r3, [r4, #4]
 800447e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004482:	9104      	str	r1, [sp, #16]
 8004484:	1c59      	adds	r1, r3, #1
 8004486:	d13c      	bne.n	8004502 <_printf_float+0x14a>
 8004488:	2306      	movs	r3, #6
 800448a:	6063      	str	r3, [r4, #4]
 800448c:	2300      	movs	r3, #0
 800448e:	9303      	str	r3, [sp, #12]
 8004490:	ab08      	add	r3, sp, #32
 8004492:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004496:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800449a:	ab07      	add	r3, sp, #28
 800449c:	6861      	ldr	r1, [r4, #4]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	6022      	str	r2, [r4, #0]
 80044a2:	f10d 031b 	add.w	r3, sp, #27
 80044a6:	4628      	mov	r0, r5
 80044a8:	f7ff fef6 	bl	8004298 <__cvt>
 80044ac:	9b04      	ldr	r3, [sp, #16]
 80044ae:	9907      	ldr	r1, [sp, #28]
 80044b0:	2b47      	cmp	r3, #71	; 0x47
 80044b2:	4680      	mov	r8, r0
 80044b4:	d108      	bne.n	80044c8 <_printf_float+0x110>
 80044b6:	1cc8      	adds	r0, r1, #3
 80044b8:	db02      	blt.n	80044c0 <_printf_float+0x108>
 80044ba:	6863      	ldr	r3, [r4, #4]
 80044bc:	4299      	cmp	r1, r3
 80044be:	dd41      	ble.n	8004544 <_printf_float+0x18c>
 80044c0:	f1a9 0902 	sub.w	r9, r9, #2
 80044c4:	fa5f f989 	uxtb.w	r9, r9
 80044c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80044cc:	d820      	bhi.n	8004510 <_printf_float+0x158>
 80044ce:	3901      	subs	r1, #1
 80044d0:	464a      	mov	r2, r9
 80044d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044d6:	9107      	str	r1, [sp, #28]
 80044d8:	f7ff ff30 	bl	800433c <__exponent>
 80044dc:	9a08      	ldr	r2, [sp, #32]
 80044de:	9004      	str	r0, [sp, #16]
 80044e0:	1813      	adds	r3, r2, r0
 80044e2:	2a01      	cmp	r2, #1
 80044e4:	6123      	str	r3, [r4, #16]
 80044e6:	dc02      	bgt.n	80044ee <_printf_float+0x136>
 80044e8:	6822      	ldr	r2, [r4, #0]
 80044ea:	07d2      	lsls	r2, r2, #31
 80044ec:	d501      	bpl.n	80044f2 <_printf_float+0x13a>
 80044ee:	3301      	adds	r3, #1
 80044f0:	6123      	str	r3, [r4, #16]
 80044f2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0a2      	beq.n	8004440 <_printf_float+0x88>
 80044fa:	232d      	movs	r3, #45	; 0x2d
 80044fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004500:	e79e      	b.n	8004440 <_printf_float+0x88>
 8004502:	9904      	ldr	r1, [sp, #16]
 8004504:	2947      	cmp	r1, #71	; 0x47
 8004506:	d1c1      	bne.n	800448c <_printf_float+0xd4>
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1bf      	bne.n	800448c <_printf_float+0xd4>
 800450c:	2301      	movs	r3, #1
 800450e:	e7bc      	b.n	800448a <_printf_float+0xd2>
 8004510:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004514:	d118      	bne.n	8004548 <_printf_float+0x190>
 8004516:	2900      	cmp	r1, #0
 8004518:	6863      	ldr	r3, [r4, #4]
 800451a:	dd0b      	ble.n	8004534 <_printf_float+0x17c>
 800451c:	6121      	str	r1, [r4, #16]
 800451e:	b913      	cbnz	r3, 8004526 <_printf_float+0x16e>
 8004520:	6822      	ldr	r2, [r4, #0]
 8004522:	07d0      	lsls	r0, r2, #31
 8004524:	d502      	bpl.n	800452c <_printf_float+0x174>
 8004526:	3301      	adds	r3, #1
 8004528:	440b      	add	r3, r1
 800452a:	6123      	str	r3, [r4, #16]
 800452c:	2300      	movs	r3, #0
 800452e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004530:	9304      	str	r3, [sp, #16]
 8004532:	e7de      	b.n	80044f2 <_printf_float+0x13a>
 8004534:	b913      	cbnz	r3, 800453c <_printf_float+0x184>
 8004536:	6822      	ldr	r2, [r4, #0]
 8004538:	07d2      	lsls	r2, r2, #31
 800453a:	d501      	bpl.n	8004540 <_printf_float+0x188>
 800453c:	3302      	adds	r3, #2
 800453e:	e7f4      	b.n	800452a <_printf_float+0x172>
 8004540:	2301      	movs	r3, #1
 8004542:	e7f2      	b.n	800452a <_printf_float+0x172>
 8004544:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004548:	9b08      	ldr	r3, [sp, #32]
 800454a:	4299      	cmp	r1, r3
 800454c:	db05      	blt.n	800455a <_printf_float+0x1a2>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	6121      	str	r1, [r4, #16]
 8004552:	07d8      	lsls	r0, r3, #31
 8004554:	d5ea      	bpl.n	800452c <_printf_float+0x174>
 8004556:	1c4b      	adds	r3, r1, #1
 8004558:	e7e7      	b.n	800452a <_printf_float+0x172>
 800455a:	2900      	cmp	r1, #0
 800455c:	bfd4      	ite	le
 800455e:	f1c1 0202 	rsble	r2, r1, #2
 8004562:	2201      	movgt	r2, #1
 8004564:	4413      	add	r3, r2
 8004566:	e7e0      	b.n	800452a <_printf_float+0x172>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	055a      	lsls	r2, r3, #21
 800456c:	d407      	bmi.n	800457e <_printf_float+0x1c6>
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	4642      	mov	r2, r8
 8004572:	4631      	mov	r1, r6
 8004574:	4628      	mov	r0, r5
 8004576:	47b8      	blx	r7
 8004578:	3001      	adds	r0, #1
 800457a:	d12a      	bne.n	80045d2 <_printf_float+0x21a>
 800457c:	e76a      	b.n	8004454 <_printf_float+0x9c>
 800457e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004582:	f240 80e2 	bls.w	800474a <_printf_float+0x392>
 8004586:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800458a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800458e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004592:	d133      	bne.n	80045fc <_printf_float+0x244>
 8004594:	4a38      	ldr	r2, [pc, #224]	; (8004678 <_printf_float+0x2c0>)
 8004596:	2301      	movs	r3, #1
 8004598:	4631      	mov	r1, r6
 800459a:	4628      	mov	r0, r5
 800459c:	47b8      	blx	r7
 800459e:	3001      	adds	r0, #1
 80045a0:	f43f af58 	beq.w	8004454 <_printf_float+0x9c>
 80045a4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	db02      	blt.n	80045b2 <_printf_float+0x1fa>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	07d8      	lsls	r0, r3, #31
 80045b0:	d50f      	bpl.n	80045d2 <_printf_float+0x21a>
 80045b2:	4653      	mov	r3, sl
 80045b4:	465a      	mov	r2, fp
 80045b6:	4631      	mov	r1, r6
 80045b8:	4628      	mov	r0, r5
 80045ba:	47b8      	blx	r7
 80045bc:	3001      	adds	r0, #1
 80045be:	f43f af49 	beq.w	8004454 <_printf_float+0x9c>
 80045c2:	f04f 0800 	mov.w	r8, #0
 80045c6:	f104 091a 	add.w	r9, r4, #26
 80045ca:	9b08      	ldr	r3, [sp, #32]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	4543      	cmp	r3, r8
 80045d0:	dc09      	bgt.n	80045e6 <_printf_float+0x22e>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	079b      	lsls	r3, r3, #30
 80045d6:	f100 8108 	bmi.w	80047ea <_printf_float+0x432>
 80045da:	68e0      	ldr	r0, [r4, #12]
 80045dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045de:	4298      	cmp	r0, r3
 80045e0:	bfb8      	it	lt
 80045e2:	4618      	movlt	r0, r3
 80045e4:	e738      	b.n	8004458 <_printf_float+0xa0>
 80045e6:	2301      	movs	r3, #1
 80045e8:	464a      	mov	r2, r9
 80045ea:	4631      	mov	r1, r6
 80045ec:	4628      	mov	r0, r5
 80045ee:	47b8      	blx	r7
 80045f0:	3001      	adds	r0, #1
 80045f2:	f43f af2f 	beq.w	8004454 <_printf_float+0x9c>
 80045f6:	f108 0801 	add.w	r8, r8, #1
 80045fa:	e7e6      	b.n	80045ca <_printf_float+0x212>
 80045fc:	9b07      	ldr	r3, [sp, #28]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	dc3c      	bgt.n	800467c <_printf_float+0x2c4>
 8004602:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <_printf_float+0x2c0>)
 8004604:	2301      	movs	r3, #1
 8004606:	4631      	mov	r1, r6
 8004608:	4628      	mov	r0, r5
 800460a:	47b8      	blx	r7
 800460c:	3001      	adds	r0, #1
 800460e:	f43f af21 	beq.w	8004454 <_printf_float+0x9c>
 8004612:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004616:	4313      	orrs	r3, r2
 8004618:	d102      	bne.n	8004620 <_printf_float+0x268>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	07d9      	lsls	r1, r3, #31
 800461e:	d5d8      	bpl.n	80045d2 <_printf_float+0x21a>
 8004620:	4653      	mov	r3, sl
 8004622:	465a      	mov	r2, fp
 8004624:	4631      	mov	r1, r6
 8004626:	4628      	mov	r0, r5
 8004628:	47b8      	blx	r7
 800462a:	3001      	adds	r0, #1
 800462c:	f43f af12 	beq.w	8004454 <_printf_float+0x9c>
 8004630:	f04f 0900 	mov.w	r9, #0
 8004634:	f104 0a1a 	add.w	sl, r4, #26
 8004638:	9b07      	ldr	r3, [sp, #28]
 800463a:	425b      	negs	r3, r3
 800463c:	454b      	cmp	r3, r9
 800463e:	dc01      	bgt.n	8004644 <_printf_float+0x28c>
 8004640:	9b08      	ldr	r3, [sp, #32]
 8004642:	e795      	b.n	8004570 <_printf_float+0x1b8>
 8004644:	2301      	movs	r3, #1
 8004646:	4652      	mov	r2, sl
 8004648:	4631      	mov	r1, r6
 800464a:	4628      	mov	r0, r5
 800464c:	47b8      	blx	r7
 800464e:	3001      	adds	r0, #1
 8004650:	f43f af00 	beq.w	8004454 <_printf_float+0x9c>
 8004654:	f109 0901 	add.w	r9, r9, #1
 8004658:	e7ee      	b.n	8004638 <_printf_float+0x280>
 800465a:	bf00      	nop
 800465c:	f3af 8000 	nop.w
 8004660:	ffffffff 	.word	0xffffffff
 8004664:	7fefffff 	.word	0x7fefffff
 8004668:	08008a24 	.word	0x08008a24
 800466c:	08008a28 	.word	0x08008a28
 8004670:	08008a30 	.word	0x08008a30
 8004674:	08008a2c 	.word	0x08008a2c
 8004678:	08008a34 	.word	0x08008a34
 800467c:	9a08      	ldr	r2, [sp, #32]
 800467e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004680:	429a      	cmp	r2, r3
 8004682:	bfa8      	it	ge
 8004684:	461a      	movge	r2, r3
 8004686:	2a00      	cmp	r2, #0
 8004688:	4691      	mov	r9, r2
 800468a:	dc38      	bgt.n	80046fe <_printf_float+0x346>
 800468c:	2300      	movs	r3, #0
 800468e:	9305      	str	r3, [sp, #20]
 8004690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004694:	f104 021a 	add.w	r2, r4, #26
 8004698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800469a:	9905      	ldr	r1, [sp, #20]
 800469c:	9304      	str	r3, [sp, #16]
 800469e:	eba3 0309 	sub.w	r3, r3, r9
 80046a2:	428b      	cmp	r3, r1
 80046a4:	dc33      	bgt.n	800470e <_printf_float+0x356>
 80046a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	db3c      	blt.n	8004728 <_printf_float+0x370>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	07da      	lsls	r2, r3, #31
 80046b2:	d439      	bmi.n	8004728 <_printf_float+0x370>
 80046b4:	9a08      	ldr	r2, [sp, #32]
 80046b6:	9b04      	ldr	r3, [sp, #16]
 80046b8:	9907      	ldr	r1, [sp, #28]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	eba2 0901 	sub.w	r9, r2, r1
 80046c0:	4599      	cmp	r9, r3
 80046c2:	bfa8      	it	ge
 80046c4:	4699      	movge	r9, r3
 80046c6:	f1b9 0f00 	cmp.w	r9, #0
 80046ca:	dc35      	bgt.n	8004738 <_printf_float+0x380>
 80046cc:	f04f 0800 	mov.w	r8, #0
 80046d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046d4:	f104 0a1a 	add.w	sl, r4, #26
 80046d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	eba3 0309 	sub.w	r3, r3, r9
 80046e2:	4543      	cmp	r3, r8
 80046e4:	f77f af75 	ble.w	80045d2 <_printf_float+0x21a>
 80046e8:	2301      	movs	r3, #1
 80046ea:	4652      	mov	r2, sl
 80046ec:	4631      	mov	r1, r6
 80046ee:	4628      	mov	r0, r5
 80046f0:	47b8      	blx	r7
 80046f2:	3001      	adds	r0, #1
 80046f4:	f43f aeae 	beq.w	8004454 <_printf_float+0x9c>
 80046f8:	f108 0801 	add.w	r8, r8, #1
 80046fc:	e7ec      	b.n	80046d8 <_printf_float+0x320>
 80046fe:	4613      	mov	r3, r2
 8004700:	4631      	mov	r1, r6
 8004702:	4642      	mov	r2, r8
 8004704:	4628      	mov	r0, r5
 8004706:	47b8      	blx	r7
 8004708:	3001      	adds	r0, #1
 800470a:	d1bf      	bne.n	800468c <_printf_float+0x2d4>
 800470c:	e6a2      	b.n	8004454 <_printf_float+0x9c>
 800470e:	2301      	movs	r3, #1
 8004710:	4631      	mov	r1, r6
 8004712:	4628      	mov	r0, r5
 8004714:	9204      	str	r2, [sp, #16]
 8004716:	47b8      	blx	r7
 8004718:	3001      	adds	r0, #1
 800471a:	f43f ae9b 	beq.w	8004454 <_printf_float+0x9c>
 800471e:	9b05      	ldr	r3, [sp, #20]
 8004720:	9a04      	ldr	r2, [sp, #16]
 8004722:	3301      	adds	r3, #1
 8004724:	9305      	str	r3, [sp, #20]
 8004726:	e7b7      	b.n	8004698 <_printf_float+0x2e0>
 8004728:	4653      	mov	r3, sl
 800472a:	465a      	mov	r2, fp
 800472c:	4631      	mov	r1, r6
 800472e:	4628      	mov	r0, r5
 8004730:	47b8      	blx	r7
 8004732:	3001      	adds	r0, #1
 8004734:	d1be      	bne.n	80046b4 <_printf_float+0x2fc>
 8004736:	e68d      	b.n	8004454 <_printf_float+0x9c>
 8004738:	9a04      	ldr	r2, [sp, #16]
 800473a:	464b      	mov	r3, r9
 800473c:	4442      	add	r2, r8
 800473e:	4631      	mov	r1, r6
 8004740:	4628      	mov	r0, r5
 8004742:	47b8      	blx	r7
 8004744:	3001      	adds	r0, #1
 8004746:	d1c1      	bne.n	80046cc <_printf_float+0x314>
 8004748:	e684      	b.n	8004454 <_printf_float+0x9c>
 800474a:	9a08      	ldr	r2, [sp, #32]
 800474c:	2a01      	cmp	r2, #1
 800474e:	dc01      	bgt.n	8004754 <_printf_float+0x39c>
 8004750:	07db      	lsls	r3, r3, #31
 8004752:	d537      	bpl.n	80047c4 <_printf_float+0x40c>
 8004754:	2301      	movs	r3, #1
 8004756:	4642      	mov	r2, r8
 8004758:	4631      	mov	r1, r6
 800475a:	4628      	mov	r0, r5
 800475c:	47b8      	blx	r7
 800475e:	3001      	adds	r0, #1
 8004760:	f43f ae78 	beq.w	8004454 <_printf_float+0x9c>
 8004764:	4653      	mov	r3, sl
 8004766:	465a      	mov	r2, fp
 8004768:	4631      	mov	r1, r6
 800476a:	4628      	mov	r0, r5
 800476c:	47b8      	blx	r7
 800476e:	3001      	adds	r0, #1
 8004770:	f43f ae70 	beq.w	8004454 <_printf_float+0x9c>
 8004774:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004778:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800477c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004780:	d01b      	beq.n	80047ba <_printf_float+0x402>
 8004782:	9b08      	ldr	r3, [sp, #32]
 8004784:	f108 0201 	add.w	r2, r8, #1
 8004788:	3b01      	subs	r3, #1
 800478a:	4631      	mov	r1, r6
 800478c:	4628      	mov	r0, r5
 800478e:	47b8      	blx	r7
 8004790:	3001      	adds	r0, #1
 8004792:	d10e      	bne.n	80047b2 <_printf_float+0x3fa>
 8004794:	e65e      	b.n	8004454 <_printf_float+0x9c>
 8004796:	2301      	movs	r3, #1
 8004798:	464a      	mov	r2, r9
 800479a:	4631      	mov	r1, r6
 800479c:	4628      	mov	r0, r5
 800479e:	47b8      	blx	r7
 80047a0:	3001      	adds	r0, #1
 80047a2:	f43f ae57 	beq.w	8004454 <_printf_float+0x9c>
 80047a6:	f108 0801 	add.w	r8, r8, #1
 80047aa:	9b08      	ldr	r3, [sp, #32]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	4543      	cmp	r3, r8
 80047b0:	dcf1      	bgt.n	8004796 <_printf_float+0x3de>
 80047b2:	9b04      	ldr	r3, [sp, #16]
 80047b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047b8:	e6db      	b.n	8004572 <_printf_float+0x1ba>
 80047ba:	f04f 0800 	mov.w	r8, #0
 80047be:	f104 091a 	add.w	r9, r4, #26
 80047c2:	e7f2      	b.n	80047aa <_printf_float+0x3f2>
 80047c4:	2301      	movs	r3, #1
 80047c6:	4642      	mov	r2, r8
 80047c8:	e7df      	b.n	800478a <_printf_float+0x3d2>
 80047ca:	2301      	movs	r3, #1
 80047cc:	464a      	mov	r2, r9
 80047ce:	4631      	mov	r1, r6
 80047d0:	4628      	mov	r0, r5
 80047d2:	47b8      	blx	r7
 80047d4:	3001      	adds	r0, #1
 80047d6:	f43f ae3d 	beq.w	8004454 <_printf_float+0x9c>
 80047da:	f108 0801 	add.w	r8, r8, #1
 80047de:	68e3      	ldr	r3, [r4, #12]
 80047e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047e2:	1a5b      	subs	r3, r3, r1
 80047e4:	4543      	cmp	r3, r8
 80047e6:	dcf0      	bgt.n	80047ca <_printf_float+0x412>
 80047e8:	e6f7      	b.n	80045da <_printf_float+0x222>
 80047ea:	f04f 0800 	mov.w	r8, #0
 80047ee:	f104 0919 	add.w	r9, r4, #25
 80047f2:	e7f4      	b.n	80047de <_printf_float+0x426>

080047f4 <_printf_common>:
 80047f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f8:	4616      	mov	r6, r2
 80047fa:	4699      	mov	r9, r3
 80047fc:	688a      	ldr	r2, [r1, #8]
 80047fe:	690b      	ldr	r3, [r1, #16]
 8004800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004804:	4293      	cmp	r3, r2
 8004806:	bfb8      	it	lt
 8004808:	4613      	movlt	r3, r2
 800480a:	6033      	str	r3, [r6, #0]
 800480c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004810:	4607      	mov	r7, r0
 8004812:	460c      	mov	r4, r1
 8004814:	b10a      	cbz	r2, 800481a <_printf_common+0x26>
 8004816:	3301      	adds	r3, #1
 8004818:	6033      	str	r3, [r6, #0]
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	0699      	lsls	r1, r3, #26
 800481e:	bf42      	ittt	mi
 8004820:	6833      	ldrmi	r3, [r6, #0]
 8004822:	3302      	addmi	r3, #2
 8004824:	6033      	strmi	r3, [r6, #0]
 8004826:	6825      	ldr	r5, [r4, #0]
 8004828:	f015 0506 	ands.w	r5, r5, #6
 800482c:	d106      	bne.n	800483c <_printf_common+0x48>
 800482e:	f104 0a19 	add.w	sl, r4, #25
 8004832:	68e3      	ldr	r3, [r4, #12]
 8004834:	6832      	ldr	r2, [r6, #0]
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	42ab      	cmp	r3, r5
 800483a:	dc26      	bgt.n	800488a <_printf_common+0x96>
 800483c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004840:	1e13      	subs	r3, r2, #0
 8004842:	6822      	ldr	r2, [r4, #0]
 8004844:	bf18      	it	ne
 8004846:	2301      	movne	r3, #1
 8004848:	0692      	lsls	r2, r2, #26
 800484a:	d42b      	bmi.n	80048a4 <_printf_common+0xb0>
 800484c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004850:	4649      	mov	r1, r9
 8004852:	4638      	mov	r0, r7
 8004854:	47c0      	blx	r8
 8004856:	3001      	adds	r0, #1
 8004858:	d01e      	beq.n	8004898 <_printf_common+0xa4>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	68e5      	ldr	r5, [r4, #12]
 800485e:	6832      	ldr	r2, [r6, #0]
 8004860:	f003 0306 	and.w	r3, r3, #6
 8004864:	2b04      	cmp	r3, #4
 8004866:	bf08      	it	eq
 8004868:	1aad      	subeq	r5, r5, r2
 800486a:	68a3      	ldr	r3, [r4, #8]
 800486c:	6922      	ldr	r2, [r4, #16]
 800486e:	bf0c      	ite	eq
 8004870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004874:	2500      	movne	r5, #0
 8004876:	4293      	cmp	r3, r2
 8004878:	bfc4      	itt	gt
 800487a:	1a9b      	subgt	r3, r3, r2
 800487c:	18ed      	addgt	r5, r5, r3
 800487e:	2600      	movs	r6, #0
 8004880:	341a      	adds	r4, #26
 8004882:	42b5      	cmp	r5, r6
 8004884:	d11a      	bne.n	80048bc <_printf_common+0xc8>
 8004886:	2000      	movs	r0, #0
 8004888:	e008      	b.n	800489c <_printf_common+0xa8>
 800488a:	2301      	movs	r3, #1
 800488c:	4652      	mov	r2, sl
 800488e:	4649      	mov	r1, r9
 8004890:	4638      	mov	r0, r7
 8004892:	47c0      	blx	r8
 8004894:	3001      	adds	r0, #1
 8004896:	d103      	bne.n	80048a0 <_printf_common+0xac>
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a0:	3501      	adds	r5, #1
 80048a2:	e7c6      	b.n	8004832 <_printf_common+0x3e>
 80048a4:	18e1      	adds	r1, r4, r3
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	2030      	movs	r0, #48	; 0x30
 80048aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ae:	4422      	add	r2, r4
 80048b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048b8:	3302      	adds	r3, #2
 80048ba:	e7c7      	b.n	800484c <_printf_common+0x58>
 80048bc:	2301      	movs	r3, #1
 80048be:	4622      	mov	r2, r4
 80048c0:	4649      	mov	r1, r9
 80048c2:	4638      	mov	r0, r7
 80048c4:	47c0      	blx	r8
 80048c6:	3001      	adds	r0, #1
 80048c8:	d0e6      	beq.n	8004898 <_printf_common+0xa4>
 80048ca:	3601      	adds	r6, #1
 80048cc:	e7d9      	b.n	8004882 <_printf_common+0x8e>
	...

080048d0 <_printf_i>:
 80048d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048d4:	460c      	mov	r4, r1
 80048d6:	4691      	mov	r9, r2
 80048d8:	7e27      	ldrb	r7, [r4, #24]
 80048da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048dc:	2f78      	cmp	r7, #120	; 0x78
 80048de:	4680      	mov	r8, r0
 80048e0:	469a      	mov	sl, r3
 80048e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e6:	d807      	bhi.n	80048f8 <_printf_i+0x28>
 80048e8:	2f62      	cmp	r7, #98	; 0x62
 80048ea:	d80a      	bhi.n	8004902 <_printf_i+0x32>
 80048ec:	2f00      	cmp	r7, #0
 80048ee:	f000 80d8 	beq.w	8004aa2 <_printf_i+0x1d2>
 80048f2:	2f58      	cmp	r7, #88	; 0x58
 80048f4:	f000 80a3 	beq.w	8004a3e <_printf_i+0x16e>
 80048f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004900:	e03a      	b.n	8004978 <_printf_i+0xa8>
 8004902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004906:	2b15      	cmp	r3, #21
 8004908:	d8f6      	bhi.n	80048f8 <_printf_i+0x28>
 800490a:	a001      	add	r0, pc, #4	; (adr r0, 8004910 <_printf_i+0x40>)
 800490c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004910:	08004969 	.word	0x08004969
 8004914:	0800497d 	.word	0x0800497d
 8004918:	080048f9 	.word	0x080048f9
 800491c:	080048f9 	.word	0x080048f9
 8004920:	080048f9 	.word	0x080048f9
 8004924:	080048f9 	.word	0x080048f9
 8004928:	0800497d 	.word	0x0800497d
 800492c:	080048f9 	.word	0x080048f9
 8004930:	080048f9 	.word	0x080048f9
 8004934:	080048f9 	.word	0x080048f9
 8004938:	080048f9 	.word	0x080048f9
 800493c:	08004a89 	.word	0x08004a89
 8004940:	080049ad 	.word	0x080049ad
 8004944:	08004a6b 	.word	0x08004a6b
 8004948:	080048f9 	.word	0x080048f9
 800494c:	080048f9 	.word	0x080048f9
 8004950:	08004aab 	.word	0x08004aab
 8004954:	080048f9 	.word	0x080048f9
 8004958:	080049ad 	.word	0x080049ad
 800495c:	080048f9 	.word	0x080048f9
 8004960:	080048f9 	.word	0x080048f9
 8004964:	08004a73 	.word	0x08004a73
 8004968:	680b      	ldr	r3, [r1, #0]
 800496a:	1d1a      	adds	r2, r3, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	600a      	str	r2, [r1, #0]
 8004970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004978:	2301      	movs	r3, #1
 800497a:	e0a3      	b.n	8004ac4 <_printf_i+0x1f4>
 800497c:	6825      	ldr	r5, [r4, #0]
 800497e:	6808      	ldr	r0, [r1, #0]
 8004980:	062e      	lsls	r6, r5, #24
 8004982:	f100 0304 	add.w	r3, r0, #4
 8004986:	d50a      	bpl.n	800499e <_printf_i+0xce>
 8004988:	6805      	ldr	r5, [r0, #0]
 800498a:	600b      	str	r3, [r1, #0]
 800498c:	2d00      	cmp	r5, #0
 800498e:	da03      	bge.n	8004998 <_printf_i+0xc8>
 8004990:	232d      	movs	r3, #45	; 0x2d
 8004992:	426d      	negs	r5, r5
 8004994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004998:	485e      	ldr	r0, [pc, #376]	; (8004b14 <_printf_i+0x244>)
 800499a:	230a      	movs	r3, #10
 800499c:	e019      	b.n	80049d2 <_printf_i+0x102>
 800499e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80049a2:	6805      	ldr	r5, [r0, #0]
 80049a4:	600b      	str	r3, [r1, #0]
 80049a6:	bf18      	it	ne
 80049a8:	b22d      	sxthne	r5, r5
 80049aa:	e7ef      	b.n	800498c <_printf_i+0xbc>
 80049ac:	680b      	ldr	r3, [r1, #0]
 80049ae:	6825      	ldr	r5, [r4, #0]
 80049b0:	1d18      	adds	r0, r3, #4
 80049b2:	6008      	str	r0, [r1, #0]
 80049b4:	0628      	lsls	r0, r5, #24
 80049b6:	d501      	bpl.n	80049bc <_printf_i+0xec>
 80049b8:	681d      	ldr	r5, [r3, #0]
 80049ba:	e002      	b.n	80049c2 <_printf_i+0xf2>
 80049bc:	0669      	lsls	r1, r5, #25
 80049be:	d5fb      	bpl.n	80049b8 <_printf_i+0xe8>
 80049c0:	881d      	ldrh	r5, [r3, #0]
 80049c2:	4854      	ldr	r0, [pc, #336]	; (8004b14 <_printf_i+0x244>)
 80049c4:	2f6f      	cmp	r7, #111	; 0x6f
 80049c6:	bf0c      	ite	eq
 80049c8:	2308      	moveq	r3, #8
 80049ca:	230a      	movne	r3, #10
 80049cc:	2100      	movs	r1, #0
 80049ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049d2:	6866      	ldr	r6, [r4, #4]
 80049d4:	60a6      	str	r6, [r4, #8]
 80049d6:	2e00      	cmp	r6, #0
 80049d8:	bfa2      	ittt	ge
 80049da:	6821      	ldrge	r1, [r4, #0]
 80049dc:	f021 0104 	bicge.w	r1, r1, #4
 80049e0:	6021      	strge	r1, [r4, #0]
 80049e2:	b90d      	cbnz	r5, 80049e8 <_printf_i+0x118>
 80049e4:	2e00      	cmp	r6, #0
 80049e6:	d04d      	beq.n	8004a84 <_printf_i+0x1b4>
 80049e8:	4616      	mov	r6, r2
 80049ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80049ee:	fb03 5711 	mls	r7, r3, r1, r5
 80049f2:	5dc7      	ldrb	r7, [r0, r7]
 80049f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049f8:	462f      	mov	r7, r5
 80049fa:	42bb      	cmp	r3, r7
 80049fc:	460d      	mov	r5, r1
 80049fe:	d9f4      	bls.n	80049ea <_printf_i+0x11a>
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d10b      	bne.n	8004a1c <_printf_i+0x14c>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	07df      	lsls	r7, r3, #31
 8004a08:	d508      	bpl.n	8004a1c <_printf_i+0x14c>
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	6861      	ldr	r1, [r4, #4]
 8004a0e:	4299      	cmp	r1, r3
 8004a10:	bfde      	ittt	le
 8004a12:	2330      	movle	r3, #48	; 0x30
 8004a14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a1c:	1b92      	subs	r2, r2, r6
 8004a1e:	6122      	str	r2, [r4, #16]
 8004a20:	f8cd a000 	str.w	sl, [sp]
 8004a24:	464b      	mov	r3, r9
 8004a26:	aa03      	add	r2, sp, #12
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4640      	mov	r0, r8
 8004a2c:	f7ff fee2 	bl	80047f4 <_printf_common>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d14c      	bne.n	8004ace <_printf_i+0x1fe>
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	b004      	add	sp, #16
 8004a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3e:	4835      	ldr	r0, [pc, #212]	; (8004b14 <_printf_i+0x244>)
 8004a40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	680e      	ldr	r6, [r1, #0]
 8004a48:	061f      	lsls	r7, r3, #24
 8004a4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a4e:	600e      	str	r6, [r1, #0]
 8004a50:	d514      	bpl.n	8004a7c <_printf_i+0x1ac>
 8004a52:	07d9      	lsls	r1, r3, #31
 8004a54:	bf44      	itt	mi
 8004a56:	f043 0320 	orrmi.w	r3, r3, #32
 8004a5a:	6023      	strmi	r3, [r4, #0]
 8004a5c:	b91d      	cbnz	r5, 8004a66 <_printf_i+0x196>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	f023 0320 	bic.w	r3, r3, #32
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	2310      	movs	r3, #16
 8004a68:	e7b0      	b.n	80049cc <_printf_i+0xfc>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	f043 0320 	orr.w	r3, r3, #32
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	2378      	movs	r3, #120	; 0x78
 8004a74:	4828      	ldr	r0, [pc, #160]	; (8004b18 <_printf_i+0x248>)
 8004a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a7a:	e7e3      	b.n	8004a44 <_printf_i+0x174>
 8004a7c:	065e      	lsls	r6, r3, #25
 8004a7e:	bf48      	it	mi
 8004a80:	b2ad      	uxthmi	r5, r5
 8004a82:	e7e6      	b.n	8004a52 <_printf_i+0x182>
 8004a84:	4616      	mov	r6, r2
 8004a86:	e7bb      	b.n	8004a00 <_printf_i+0x130>
 8004a88:	680b      	ldr	r3, [r1, #0]
 8004a8a:	6826      	ldr	r6, [r4, #0]
 8004a8c:	6960      	ldr	r0, [r4, #20]
 8004a8e:	1d1d      	adds	r5, r3, #4
 8004a90:	600d      	str	r5, [r1, #0]
 8004a92:	0635      	lsls	r5, r6, #24
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	d501      	bpl.n	8004a9c <_printf_i+0x1cc>
 8004a98:	6018      	str	r0, [r3, #0]
 8004a9a:	e002      	b.n	8004aa2 <_printf_i+0x1d2>
 8004a9c:	0671      	lsls	r1, r6, #25
 8004a9e:	d5fb      	bpl.n	8004a98 <_printf_i+0x1c8>
 8004aa0:	8018      	strh	r0, [r3, #0]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	6123      	str	r3, [r4, #16]
 8004aa6:	4616      	mov	r6, r2
 8004aa8:	e7ba      	b.n	8004a20 <_printf_i+0x150>
 8004aaa:	680b      	ldr	r3, [r1, #0]
 8004aac:	1d1a      	adds	r2, r3, #4
 8004aae:	600a      	str	r2, [r1, #0]
 8004ab0:	681e      	ldr	r6, [r3, #0]
 8004ab2:	6862      	ldr	r2, [r4, #4]
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f7fb fbda 	bl	8000270 <memchr>
 8004abc:	b108      	cbz	r0, 8004ac2 <_printf_i+0x1f2>
 8004abe:	1b80      	subs	r0, r0, r6
 8004ac0:	6060      	str	r0, [r4, #4]
 8004ac2:	6863      	ldr	r3, [r4, #4]
 8004ac4:	6123      	str	r3, [r4, #16]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004acc:	e7a8      	b.n	8004a20 <_printf_i+0x150>
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	4632      	mov	r2, r6
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	4640      	mov	r0, r8
 8004ad6:	47d0      	blx	sl
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d0ab      	beq.n	8004a34 <_printf_i+0x164>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	079b      	lsls	r3, r3, #30
 8004ae0:	d413      	bmi.n	8004b0a <_printf_i+0x23a>
 8004ae2:	68e0      	ldr	r0, [r4, #12]
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	4298      	cmp	r0, r3
 8004ae8:	bfb8      	it	lt
 8004aea:	4618      	movlt	r0, r3
 8004aec:	e7a4      	b.n	8004a38 <_printf_i+0x168>
 8004aee:	2301      	movs	r3, #1
 8004af0:	4632      	mov	r2, r6
 8004af2:	4649      	mov	r1, r9
 8004af4:	4640      	mov	r0, r8
 8004af6:	47d0      	blx	sl
 8004af8:	3001      	adds	r0, #1
 8004afa:	d09b      	beq.n	8004a34 <_printf_i+0x164>
 8004afc:	3501      	adds	r5, #1
 8004afe:	68e3      	ldr	r3, [r4, #12]
 8004b00:	9903      	ldr	r1, [sp, #12]
 8004b02:	1a5b      	subs	r3, r3, r1
 8004b04:	42ab      	cmp	r3, r5
 8004b06:	dcf2      	bgt.n	8004aee <_printf_i+0x21e>
 8004b08:	e7eb      	b.n	8004ae2 <_printf_i+0x212>
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	f104 0619 	add.w	r6, r4, #25
 8004b10:	e7f5      	b.n	8004afe <_printf_i+0x22e>
 8004b12:	bf00      	nop
 8004b14:	08008a36 	.word	0x08008a36
 8004b18:	08008a47 	.word	0x08008a47

08004b1c <_scanf_float>:
 8004b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b20:	b087      	sub	sp, #28
 8004b22:	4617      	mov	r7, r2
 8004b24:	9303      	str	r3, [sp, #12]
 8004b26:	688b      	ldr	r3, [r1, #8]
 8004b28:	1e5a      	subs	r2, r3, #1
 8004b2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004b2e:	bf83      	ittte	hi
 8004b30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004b34:	195b      	addhi	r3, r3, r5
 8004b36:	9302      	strhi	r3, [sp, #8]
 8004b38:	2300      	movls	r3, #0
 8004b3a:	bf86      	itte	hi
 8004b3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004b40:	608b      	strhi	r3, [r1, #8]
 8004b42:	9302      	strls	r3, [sp, #8]
 8004b44:	680b      	ldr	r3, [r1, #0]
 8004b46:	468b      	mov	fp, r1
 8004b48:	2500      	movs	r5, #0
 8004b4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004b4e:	f84b 3b1c 	str.w	r3, [fp], #28
 8004b52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004b56:	4680      	mov	r8, r0
 8004b58:	460c      	mov	r4, r1
 8004b5a:	465e      	mov	r6, fp
 8004b5c:	46aa      	mov	sl, r5
 8004b5e:	46a9      	mov	r9, r5
 8004b60:	9501      	str	r5, [sp, #4]
 8004b62:	68a2      	ldr	r2, [r4, #8]
 8004b64:	b152      	cbz	r2, 8004b7c <_scanf_float+0x60>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b4e      	cmp	r3, #78	; 0x4e
 8004b6c:	d864      	bhi.n	8004c38 <_scanf_float+0x11c>
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d83c      	bhi.n	8004bec <_scanf_float+0xd0>
 8004b72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004b76:	b2c8      	uxtb	r0, r1
 8004b78:	280e      	cmp	r0, #14
 8004b7a:	d93a      	bls.n	8004bf2 <_scanf_float+0xd6>
 8004b7c:	f1b9 0f00 	cmp.w	r9, #0
 8004b80:	d003      	beq.n	8004b8a <_scanf_float+0x6e>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b8e:	f1ba 0f01 	cmp.w	sl, #1
 8004b92:	f200 8113 	bhi.w	8004dbc <_scanf_float+0x2a0>
 8004b96:	455e      	cmp	r6, fp
 8004b98:	f200 8105 	bhi.w	8004da6 <_scanf_float+0x28a>
 8004b9c:	2501      	movs	r5, #1
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	b007      	add	sp, #28
 8004ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004baa:	2a0d      	cmp	r2, #13
 8004bac:	d8e6      	bhi.n	8004b7c <_scanf_float+0x60>
 8004bae:	a101      	add	r1, pc, #4	; (adr r1, 8004bb4 <_scanf_float+0x98>)
 8004bb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004bb4:	08004cf3 	.word	0x08004cf3
 8004bb8:	08004b7d 	.word	0x08004b7d
 8004bbc:	08004b7d 	.word	0x08004b7d
 8004bc0:	08004b7d 	.word	0x08004b7d
 8004bc4:	08004d53 	.word	0x08004d53
 8004bc8:	08004d2b 	.word	0x08004d2b
 8004bcc:	08004b7d 	.word	0x08004b7d
 8004bd0:	08004b7d 	.word	0x08004b7d
 8004bd4:	08004d01 	.word	0x08004d01
 8004bd8:	08004b7d 	.word	0x08004b7d
 8004bdc:	08004b7d 	.word	0x08004b7d
 8004be0:	08004b7d 	.word	0x08004b7d
 8004be4:	08004b7d 	.word	0x08004b7d
 8004be8:	08004cb9 	.word	0x08004cb9
 8004bec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004bf0:	e7db      	b.n	8004baa <_scanf_float+0x8e>
 8004bf2:	290e      	cmp	r1, #14
 8004bf4:	d8c2      	bhi.n	8004b7c <_scanf_float+0x60>
 8004bf6:	a001      	add	r0, pc, #4	; (adr r0, 8004bfc <_scanf_float+0xe0>)
 8004bf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004bfc:	08004cab 	.word	0x08004cab
 8004c00:	08004b7d 	.word	0x08004b7d
 8004c04:	08004cab 	.word	0x08004cab
 8004c08:	08004d3f 	.word	0x08004d3f
 8004c0c:	08004b7d 	.word	0x08004b7d
 8004c10:	08004c59 	.word	0x08004c59
 8004c14:	08004c95 	.word	0x08004c95
 8004c18:	08004c95 	.word	0x08004c95
 8004c1c:	08004c95 	.word	0x08004c95
 8004c20:	08004c95 	.word	0x08004c95
 8004c24:	08004c95 	.word	0x08004c95
 8004c28:	08004c95 	.word	0x08004c95
 8004c2c:	08004c95 	.word	0x08004c95
 8004c30:	08004c95 	.word	0x08004c95
 8004c34:	08004c95 	.word	0x08004c95
 8004c38:	2b6e      	cmp	r3, #110	; 0x6e
 8004c3a:	d809      	bhi.n	8004c50 <_scanf_float+0x134>
 8004c3c:	2b60      	cmp	r3, #96	; 0x60
 8004c3e:	d8b2      	bhi.n	8004ba6 <_scanf_float+0x8a>
 8004c40:	2b54      	cmp	r3, #84	; 0x54
 8004c42:	d077      	beq.n	8004d34 <_scanf_float+0x218>
 8004c44:	2b59      	cmp	r3, #89	; 0x59
 8004c46:	d199      	bne.n	8004b7c <_scanf_float+0x60>
 8004c48:	2d07      	cmp	r5, #7
 8004c4a:	d197      	bne.n	8004b7c <_scanf_float+0x60>
 8004c4c:	2508      	movs	r5, #8
 8004c4e:	e029      	b.n	8004ca4 <_scanf_float+0x188>
 8004c50:	2b74      	cmp	r3, #116	; 0x74
 8004c52:	d06f      	beq.n	8004d34 <_scanf_float+0x218>
 8004c54:	2b79      	cmp	r3, #121	; 0x79
 8004c56:	e7f6      	b.n	8004c46 <_scanf_float+0x12a>
 8004c58:	6821      	ldr	r1, [r4, #0]
 8004c5a:	05c8      	lsls	r0, r1, #23
 8004c5c:	d51a      	bpl.n	8004c94 <_scanf_float+0x178>
 8004c5e:	9b02      	ldr	r3, [sp, #8]
 8004c60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004c64:	6021      	str	r1, [r4, #0]
 8004c66:	f109 0901 	add.w	r9, r9, #1
 8004c6a:	b11b      	cbz	r3, 8004c74 <_scanf_float+0x158>
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	3201      	adds	r2, #1
 8004c70:	9302      	str	r3, [sp, #8]
 8004c72:	60a2      	str	r2, [r4, #8]
 8004c74:	68a3      	ldr	r3, [r4, #8]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	60a3      	str	r3, [r4, #8]
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	6123      	str	r3, [r4, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	f340 8084 	ble.w	8004d94 <_scanf_float+0x278>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	603b      	str	r3, [r7, #0]
 8004c92:	e766      	b.n	8004b62 <_scanf_float+0x46>
 8004c94:	eb1a 0f05 	cmn.w	sl, r5
 8004c98:	f47f af70 	bne.w	8004b7c <_scanf_float+0x60>
 8004c9c:	6822      	ldr	r2, [r4, #0]
 8004c9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004ca2:	6022      	str	r2, [r4, #0]
 8004ca4:	f806 3b01 	strb.w	r3, [r6], #1
 8004ca8:	e7e4      	b.n	8004c74 <_scanf_float+0x158>
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	0610      	lsls	r0, r2, #24
 8004cae:	f57f af65 	bpl.w	8004b7c <_scanf_float+0x60>
 8004cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cb6:	e7f4      	b.n	8004ca2 <_scanf_float+0x186>
 8004cb8:	f1ba 0f00 	cmp.w	sl, #0
 8004cbc:	d10e      	bne.n	8004cdc <_scanf_float+0x1c0>
 8004cbe:	f1b9 0f00 	cmp.w	r9, #0
 8004cc2:	d10e      	bne.n	8004ce2 <_scanf_float+0x1c6>
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004cca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004cce:	d108      	bne.n	8004ce2 <_scanf_float+0x1c6>
 8004cd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004cd4:	6022      	str	r2, [r4, #0]
 8004cd6:	f04f 0a01 	mov.w	sl, #1
 8004cda:	e7e3      	b.n	8004ca4 <_scanf_float+0x188>
 8004cdc:	f1ba 0f02 	cmp.w	sl, #2
 8004ce0:	d055      	beq.n	8004d8e <_scanf_float+0x272>
 8004ce2:	2d01      	cmp	r5, #1
 8004ce4:	d002      	beq.n	8004cec <_scanf_float+0x1d0>
 8004ce6:	2d04      	cmp	r5, #4
 8004ce8:	f47f af48 	bne.w	8004b7c <_scanf_float+0x60>
 8004cec:	3501      	adds	r5, #1
 8004cee:	b2ed      	uxtb	r5, r5
 8004cf0:	e7d8      	b.n	8004ca4 <_scanf_float+0x188>
 8004cf2:	f1ba 0f01 	cmp.w	sl, #1
 8004cf6:	f47f af41 	bne.w	8004b7c <_scanf_float+0x60>
 8004cfa:	f04f 0a02 	mov.w	sl, #2
 8004cfe:	e7d1      	b.n	8004ca4 <_scanf_float+0x188>
 8004d00:	b97d      	cbnz	r5, 8004d22 <_scanf_float+0x206>
 8004d02:	f1b9 0f00 	cmp.w	r9, #0
 8004d06:	f47f af3c 	bne.w	8004b82 <_scanf_float+0x66>
 8004d0a:	6822      	ldr	r2, [r4, #0]
 8004d0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d14:	f47f af39 	bne.w	8004b8a <_scanf_float+0x6e>
 8004d18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d1c:	6022      	str	r2, [r4, #0]
 8004d1e:	2501      	movs	r5, #1
 8004d20:	e7c0      	b.n	8004ca4 <_scanf_float+0x188>
 8004d22:	2d03      	cmp	r5, #3
 8004d24:	d0e2      	beq.n	8004cec <_scanf_float+0x1d0>
 8004d26:	2d05      	cmp	r5, #5
 8004d28:	e7de      	b.n	8004ce8 <_scanf_float+0x1cc>
 8004d2a:	2d02      	cmp	r5, #2
 8004d2c:	f47f af26 	bne.w	8004b7c <_scanf_float+0x60>
 8004d30:	2503      	movs	r5, #3
 8004d32:	e7b7      	b.n	8004ca4 <_scanf_float+0x188>
 8004d34:	2d06      	cmp	r5, #6
 8004d36:	f47f af21 	bne.w	8004b7c <_scanf_float+0x60>
 8004d3a:	2507      	movs	r5, #7
 8004d3c:	e7b2      	b.n	8004ca4 <_scanf_float+0x188>
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	0591      	lsls	r1, r2, #22
 8004d42:	f57f af1b 	bpl.w	8004b7c <_scanf_float+0x60>
 8004d46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004d4a:	6022      	str	r2, [r4, #0]
 8004d4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d50:	e7a8      	b.n	8004ca4 <_scanf_float+0x188>
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004d58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004d5c:	d006      	beq.n	8004d6c <_scanf_float+0x250>
 8004d5e:	0550      	lsls	r0, r2, #21
 8004d60:	f57f af0c 	bpl.w	8004b7c <_scanf_float+0x60>
 8004d64:	f1b9 0f00 	cmp.w	r9, #0
 8004d68:	f43f af0f 	beq.w	8004b8a <_scanf_float+0x6e>
 8004d6c:	0591      	lsls	r1, r2, #22
 8004d6e:	bf58      	it	pl
 8004d70:	9901      	ldrpl	r1, [sp, #4]
 8004d72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d76:	bf58      	it	pl
 8004d78:	eba9 0101 	subpl.w	r1, r9, r1
 8004d7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004d80:	bf58      	it	pl
 8004d82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004d86:	6022      	str	r2, [r4, #0]
 8004d88:	f04f 0900 	mov.w	r9, #0
 8004d8c:	e78a      	b.n	8004ca4 <_scanf_float+0x188>
 8004d8e:	f04f 0a03 	mov.w	sl, #3
 8004d92:	e787      	b.n	8004ca4 <_scanf_float+0x188>
 8004d94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004d98:	4639      	mov	r1, r7
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	4798      	blx	r3
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	f43f aedf 	beq.w	8004b62 <_scanf_float+0x46>
 8004da4:	e6ea      	b.n	8004b7c <_scanf_float+0x60>
 8004da6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004daa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004dae:	463a      	mov	r2, r7
 8004db0:	4640      	mov	r0, r8
 8004db2:	4798      	blx	r3
 8004db4:	6923      	ldr	r3, [r4, #16]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	6123      	str	r3, [r4, #16]
 8004dba:	e6ec      	b.n	8004b96 <_scanf_float+0x7a>
 8004dbc:	1e6b      	subs	r3, r5, #1
 8004dbe:	2b06      	cmp	r3, #6
 8004dc0:	d825      	bhi.n	8004e0e <_scanf_float+0x2f2>
 8004dc2:	2d02      	cmp	r5, #2
 8004dc4:	d836      	bhi.n	8004e34 <_scanf_float+0x318>
 8004dc6:	455e      	cmp	r6, fp
 8004dc8:	f67f aee8 	bls.w	8004b9c <_scanf_float+0x80>
 8004dcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004dd0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004dd4:	463a      	mov	r2, r7
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	4798      	blx	r3
 8004dda:	6923      	ldr	r3, [r4, #16]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	6123      	str	r3, [r4, #16]
 8004de0:	e7f1      	b.n	8004dc6 <_scanf_float+0x2aa>
 8004de2:	9802      	ldr	r0, [sp, #8]
 8004de4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004de8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004dec:	9002      	str	r0, [sp, #8]
 8004dee:	463a      	mov	r2, r7
 8004df0:	4640      	mov	r0, r8
 8004df2:	4798      	blx	r3
 8004df4:	6923      	ldr	r3, [r4, #16]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	6123      	str	r3, [r4, #16]
 8004dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dfe:	fa5f fa8a 	uxtb.w	sl, sl
 8004e02:	f1ba 0f02 	cmp.w	sl, #2
 8004e06:	d1ec      	bne.n	8004de2 <_scanf_float+0x2c6>
 8004e08:	3d03      	subs	r5, #3
 8004e0a:	b2ed      	uxtb	r5, r5
 8004e0c:	1b76      	subs	r6, r6, r5
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	05da      	lsls	r2, r3, #23
 8004e12:	d52f      	bpl.n	8004e74 <_scanf_float+0x358>
 8004e14:	055b      	lsls	r3, r3, #21
 8004e16:	d510      	bpl.n	8004e3a <_scanf_float+0x31e>
 8004e18:	455e      	cmp	r6, fp
 8004e1a:	f67f aebf 	bls.w	8004b9c <_scanf_float+0x80>
 8004e1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e26:	463a      	mov	r2, r7
 8004e28:	4640      	mov	r0, r8
 8004e2a:	4798      	blx	r3
 8004e2c:	6923      	ldr	r3, [r4, #16]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	6123      	str	r3, [r4, #16]
 8004e32:	e7f1      	b.n	8004e18 <_scanf_float+0x2fc>
 8004e34:	46aa      	mov	sl, r5
 8004e36:	9602      	str	r6, [sp, #8]
 8004e38:	e7df      	b.n	8004dfa <_scanf_float+0x2de>
 8004e3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004e3e:	6923      	ldr	r3, [r4, #16]
 8004e40:	2965      	cmp	r1, #101	; 0x65
 8004e42:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e46:	f106 35ff 	add.w	r5, r6, #4294967295
 8004e4a:	6123      	str	r3, [r4, #16]
 8004e4c:	d00c      	beq.n	8004e68 <_scanf_float+0x34c>
 8004e4e:	2945      	cmp	r1, #69	; 0x45
 8004e50:	d00a      	beq.n	8004e68 <_scanf_float+0x34c>
 8004e52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e56:	463a      	mov	r2, r7
 8004e58:	4640      	mov	r0, r8
 8004e5a:	4798      	blx	r3
 8004e5c:	6923      	ldr	r3, [r4, #16]
 8004e5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	1eb5      	subs	r5, r6, #2
 8004e66:	6123      	str	r3, [r4, #16]
 8004e68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e6c:	463a      	mov	r2, r7
 8004e6e:	4640      	mov	r0, r8
 8004e70:	4798      	blx	r3
 8004e72:	462e      	mov	r6, r5
 8004e74:	6825      	ldr	r5, [r4, #0]
 8004e76:	f015 0510 	ands.w	r5, r5, #16
 8004e7a:	d14d      	bne.n	8004f18 <_scanf_float+0x3fc>
 8004e7c:	7035      	strb	r5, [r6, #0]
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e88:	d11a      	bne.n	8004ec0 <_scanf_float+0x3a4>
 8004e8a:	9b01      	ldr	r3, [sp, #4]
 8004e8c:	454b      	cmp	r3, r9
 8004e8e:	eba3 0209 	sub.w	r2, r3, r9
 8004e92:	d122      	bne.n	8004eda <_scanf_float+0x3be>
 8004e94:	2200      	movs	r2, #0
 8004e96:	4659      	mov	r1, fp
 8004e98:	4640      	mov	r0, r8
 8004e9a:	f000 fe73 	bl	8005b84 <_strtod_r>
 8004e9e:	9b03      	ldr	r3, [sp, #12]
 8004ea0:	6821      	ldr	r1, [r4, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f011 0f02 	tst.w	r1, #2
 8004ea8:	f103 0204 	add.w	r2, r3, #4
 8004eac:	d020      	beq.n	8004ef0 <_scanf_float+0x3d4>
 8004eae:	9903      	ldr	r1, [sp, #12]
 8004eb0:	600a      	str	r2, [r1, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	ed83 0b00 	vstr	d0, [r3]
 8004eb8:	68e3      	ldr	r3, [r4, #12]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60e3      	str	r3, [r4, #12]
 8004ebe:	e66e      	b.n	8004b9e <_scanf_float+0x82>
 8004ec0:	9b04      	ldr	r3, [sp, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0e6      	beq.n	8004e94 <_scanf_float+0x378>
 8004ec6:	9905      	ldr	r1, [sp, #20]
 8004ec8:	230a      	movs	r3, #10
 8004eca:	462a      	mov	r2, r5
 8004ecc:	3101      	adds	r1, #1
 8004ece:	4640      	mov	r0, r8
 8004ed0:	f000 fee2 	bl	8005c98 <_strtol_r>
 8004ed4:	9b04      	ldr	r3, [sp, #16]
 8004ed6:	9e05      	ldr	r6, [sp, #20]
 8004ed8:	1ac2      	subs	r2, r0, r3
 8004eda:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004ede:	429e      	cmp	r6, r3
 8004ee0:	bf28      	it	cs
 8004ee2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004ee6:	490d      	ldr	r1, [pc, #52]	; (8004f1c <_scanf_float+0x400>)
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f000 f821 	bl	8004f30 <siprintf>
 8004eee:	e7d1      	b.n	8004e94 <_scanf_float+0x378>
 8004ef0:	f011 0f04 	tst.w	r1, #4
 8004ef4:	9903      	ldr	r1, [sp, #12]
 8004ef6:	600a      	str	r2, [r1, #0]
 8004ef8:	d1db      	bne.n	8004eb2 <_scanf_float+0x396>
 8004efa:	eeb4 0b40 	vcmp.f64	d0, d0
 8004efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f02:	681e      	ldr	r6, [r3, #0]
 8004f04:	d705      	bvc.n	8004f12 <_scanf_float+0x3f6>
 8004f06:	4806      	ldr	r0, [pc, #24]	; (8004f20 <_scanf_float+0x404>)
 8004f08:	f000 f80c 	bl	8004f24 <nanf>
 8004f0c:	ed86 0a00 	vstr	s0, [r6]
 8004f10:	e7d2      	b.n	8004eb8 <_scanf_float+0x39c>
 8004f12:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8004f16:	e7f9      	b.n	8004f0c <_scanf_float+0x3f0>
 8004f18:	2500      	movs	r5, #0
 8004f1a:	e640      	b.n	8004b9e <_scanf_float+0x82>
 8004f1c:	08008a58 	.word	0x08008a58
 8004f20:	08008e70 	.word	0x08008e70

08004f24 <nanf>:
 8004f24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004f2c <nanf+0x8>
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	7fc00000 	.word	0x7fc00000

08004f30 <siprintf>:
 8004f30:	b40e      	push	{r1, r2, r3}
 8004f32:	b500      	push	{lr}
 8004f34:	b09c      	sub	sp, #112	; 0x70
 8004f36:	ab1d      	add	r3, sp, #116	; 0x74
 8004f38:	9002      	str	r0, [sp, #8]
 8004f3a:	9006      	str	r0, [sp, #24]
 8004f3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f40:	4809      	ldr	r0, [pc, #36]	; (8004f68 <siprintf+0x38>)
 8004f42:	9107      	str	r1, [sp, #28]
 8004f44:	9104      	str	r1, [sp, #16]
 8004f46:	4909      	ldr	r1, [pc, #36]	; (8004f6c <siprintf+0x3c>)
 8004f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f4c:	9105      	str	r1, [sp, #20]
 8004f4e:	6800      	ldr	r0, [r0, #0]
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	a902      	add	r1, sp, #8
 8004f54:	f002 fe20 	bl	8007b98 <_svfiprintf_r>
 8004f58:	9b02      	ldr	r3, [sp, #8]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	b01c      	add	sp, #112	; 0x70
 8004f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f64:	b003      	add	sp, #12
 8004f66:	4770      	bx	lr
 8004f68:	2000007c 	.word	0x2000007c
 8004f6c:	ffff0208 	.word	0xffff0208

08004f70 <strstr>:
 8004f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f72:	780c      	ldrb	r4, [r1, #0]
 8004f74:	b164      	cbz	r4, 8004f90 <strstr+0x20>
 8004f76:	4603      	mov	r3, r0
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	1c5e      	adds	r6, r3, #1
 8004f7e:	b90a      	cbnz	r2, 8004f84 <strstr+0x14>
 8004f80:	4610      	mov	r0, r2
 8004f82:	e005      	b.n	8004f90 <strstr+0x20>
 8004f84:	4294      	cmp	r4, r2
 8004f86:	d108      	bne.n	8004f9a <strstr+0x2a>
 8004f88:	460d      	mov	r5, r1
 8004f8a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004f8e:	b902      	cbnz	r2, 8004f92 <strstr+0x22>
 8004f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f92:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004f96:	4297      	cmp	r7, r2
 8004f98:	d0f7      	beq.n	8004f8a <strstr+0x1a>
 8004f9a:	4633      	mov	r3, r6
 8004f9c:	e7ec      	b.n	8004f78 <strstr+0x8>

08004f9e <sulp>:
 8004f9e:	b570      	push	{r4, r5, r6, lr}
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	460d      	mov	r5, r1
 8004fa4:	4616      	mov	r6, r2
 8004fa6:	ec45 4b10 	vmov	d0, r4, r5
 8004faa:	f002 fb8f 	bl	80076cc <__ulp>
 8004fae:	b17e      	cbz	r6, 8004fd0 <sulp+0x32>
 8004fb0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004fb4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	dd09      	ble.n	8004fd0 <sulp+0x32>
 8004fbc:	051b      	lsls	r3, r3, #20
 8004fbe:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8004fc8:	ec41 0b17 	vmov	d7, r0, r1
 8004fcc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8004fd0:	bd70      	pop	{r4, r5, r6, pc}
 8004fd2:	0000      	movs	r0, r0
 8004fd4:	0000      	movs	r0, r0
	...

08004fd8 <_strtod_l>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	ed2d 8b0c 	vpush	{d8-d13}
 8004fe0:	b09d      	sub	sp, #116	; 0x74
 8004fe2:	461f      	mov	r7, r3
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9318      	str	r3, [sp, #96]	; 0x60
 8004fe8:	4ba6      	ldr	r3, [pc, #664]	; (8005284 <_strtod_l+0x2ac>)
 8004fea:	9213      	str	r2, [sp, #76]	; 0x4c
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	9308      	str	r3, [sp, #32]
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	468a      	mov	sl, r1
 8004ff6:	f7fb f92d 	bl	8000254 <strlen>
 8004ffa:	f04f 0800 	mov.w	r8, #0
 8004ffe:	4605      	mov	r5, r0
 8005000:	f04f 0900 	mov.w	r9, #0
 8005004:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8005008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800500a:	781a      	ldrb	r2, [r3, #0]
 800500c:	2a2b      	cmp	r2, #43	; 0x2b
 800500e:	d04d      	beq.n	80050ac <_strtod_l+0xd4>
 8005010:	d83a      	bhi.n	8005088 <_strtod_l+0xb0>
 8005012:	2a0d      	cmp	r2, #13
 8005014:	d833      	bhi.n	800507e <_strtod_l+0xa6>
 8005016:	2a08      	cmp	r2, #8
 8005018:	d833      	bhi.n	8005082 <_strtod_l+0xaa>
 800501a:	2a00      	cmp	r2, #0
 800501c:	d03d      	beq.n	800509a <_strtod_l+0xc2>
 800501e:	2300      	movs	r3, #0
 8005020:	930b      	str	r3, [sp, #44]	; 0x2c
 8005022:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005024:	7833      	ldrb	r3, [r6, #0]
 8005026:	2b30      	cmp	r3, #48	; 0x30
 8005028:	f040 80b6 	bne.w	8005198 <_strtod_l+0x1c0>
 800502c:	7873      	ldrb	r3, [r6, #1]
 800502e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005032:	2b58      	cmp	r3, #88	; 0x58
 8005034:	d16d      	bne.n	8005112 <_strtod_l+0x13a>
 8005036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	ab18      	add	r3, sp, #96	; 0x60
 800503c:	9702      	str	r7, [sp, #8]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	4a91      	ldr	r2, [pc, #580]	; (8005288 <_strtod_l+0x2b0>)
 8005042:	ab19      	add	r3, sp, #100	; 0x64
 8005044:	a917      	add	r1, sp, #92	; 0x5c
 8005046:	4620      	mov	r0, r4
 8005048:	f001 fca0 	bl	800698c <__gethex>
 800504c:	f010 0507 	ands.w	r5, r0, #7
 8005050:	4607      	mov	r7, r0
 8005052:	d005      	beq.n	8005060 <_strtod_l+0x88>
 8005054:	2d06      	cmp	r5, #6
 8005056:	d12b      	bne.n	80050b0 <_strtod_l+0xd8>
 8005058:	3601      	adds	r6, #1
 800505a:	2300      	movs	r3, #0
 800505c:	9617      	str	r6, [sp, #92]	; 0x5c
 800505e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005060:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005062:	2b00      	cmp	r3, #0
 8005064:	f040 856e 	bne.w	8005b44 <_strtod_l+0xb6c>
 8005068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800506a:	b1e3      	cbz	r3, 80050a6 <_strtod_l+0xce>
 800506c:	ec49 8b17 	vmov	d7, r8, r9
 8005070:	eeb1 0b47 	vneg.f64	d0, d7
 8005074:	b01d      	add	sp, #116	; 0x74
 8005076:	ecbd 8b0c 	vpop	{d8-d13}
 800507a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507e:	2a20      	cmp	r2, #32
 8005080:	d1cd      	bne.n	800501e <_strtod_l+0x46>
 8005082:	3301      	adds	r3, #1
 8005084:	9317      	str	r3, [sp, #92]	; 0x5c
 8005086:	e7bf      	b.n	8005008 <_strtod_l+0x30>
 8005088:	2a2d      	cmp	r2, #45	; 0x2d
 800508a:	d1c8      	bne.n	800501e <_strtod_l+0x46>
 800508c:	2201      	movs	r2, #1
 800508e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	9217      	str	r2, [sp, #92]	; 0x5c
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1c3      	bne.n	8005022 <_strtod_l+0x4a>
 800509a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800509c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f040 854d 	bne.w	8005b40 <_strtod_l+0xb68>
 80050a6:	ec49 8b10 	vmov	d0, r8, r9
 80050aa:	e7e3      	b.n	8005074 <_strtod_l+0x9c>
 80050ac:	2200      	movs	r2, #0
 80050ae:	e7ee      	b.n	800508e <_strtod_l+0xb6>
 80050b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80050b2:	b13a      	cbz	r2, 80050c4 <_strtod_l+0xec>
 80050b4:	2135      	movs	r1, #53	; 0x35
 80050b6:	a81a      	add	r0, sp, #104	; 0x68
 80050b8:	f002 fc14 	bl	80078e4 <__copybits>
 80050bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80050be:	4620      	mov	r0, r4
 80050c0:	f001 ffd8 	bl	8007074 <_Bfree>
 80050c4:	3d01      	subs	r5, #1
 80050c6:	2d05      	cmp	r5, #5
 80050c8:	d807      	bhi.n	80050da <_strtod_l+0x102>
 80050ca:	e8df f005 	tbb	[pc, r5]
 80050ce:	0b0e      	.short	0x0b0e
 80050d0:	030e1d18 	.word	0x030e1d18
 80050d4:	f04f 0900 	mov.w	r9, #0
 80050d8:	46c8      	mov	r8, r9
 80050da:	073b      	lsls	r3, r7, #28
 80050dc:	d5c0      	bpl.n	8005060 <_strtod_l+0x88>
 80050de:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80050e2:	e7bd      	b.n	8005060 <_strtod_l+0x88>
 80050e4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80050e8:	e7f7      	b.n	80050da <_strtod_l+0x102>
 80050ea:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80050ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80050f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80050f4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80050f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80050fc:	e7ed      	b.n	80050da <_strtod_l+0x102>
 80050fe:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800528c <_strtod_l+0x2b4>
 8005102:	f04f 0800 	mov.w	r8, #0
 8005106:	e7e8      	b.n	80050da <_strtod_l+0x102>
 8005108:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800510c:	f04f 38ff 	mov.w	r8, #4294967295
 8005110:	e7e3      	b.n	80050da <_strtod_l+0x102>
 8005112:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	9217      	str	r2, [sp, #92]	; 0x5c
 8005118:	785b      	ldrb	r3, [r3, #1]
 800511a:	2b30      	cmp	r3, #48	; 0x30
 800511c:	d0f9      	beq.n	8005112 <_strtod_l+0x13a>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d09e      	beq.n	8005060 <_strtod_l+0x88>
 8005122:	2301      	movs	r3, #1
 8005124:	9306      	str	r3, [sp, #24]
 8005126:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005128:	930c      	str	r3, [sp, #48]	; 0x30
 800512a:	2300      	movs	r3, #0
 800512c:	9304      	str	r3, [sp, #16]
 800512e:	930a      	str	r3, [sp, #40]	; 0x28
 8005130:	461e      	mov	r6, r3
 8005132:	220a      	movs	r2, #10
 8005134:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005136:	f890 b000 	ldrb.w	fp, [r0]
 800513a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800513e:	b2d9      	uxtb	r1, r3
 8005140:	2909      	cmp	r1, #9
 8005142:	d92b      	bls.n	800519c <_strtod_l+0x1c4>
 8005144:	9908      	ldr	r1, [sp, #32]
 8005146:	462a      	mov	r2, r5
 8005148:	f002 fe3e 	bl	8007dc8 <strncmp>
 800514c:	2800      	cmp	r0, #0
 800514e:	d035      	beq.n	80051bc <_strtod_l+0x1e4>
 8005150:	2000      	movs	r0, #0
 8005152:	465a      	mov	r2, fp
 8005154:	4633      	mov	r3, r6
 8005156:	4683      	mov	fp, r0
 8005158:	4601      	mov	r1, r0
 800515a:	2a65      	cmp	r2, #101	; 0x65
 800515c:	d001      	beq.n	8005162 <_strtod_l+0x18a>
 800515e:	2a45      	cmp	r2, #69	; 0x45
 8005160:	d118      	bne.n	8005194 <_strtod_l+0x1bc>
 8005162:	b91b      	cbnz	r3, 800516c <_strtod_l+0x194>
 8005164:	9b06      	ldr	r3, [sp, #24]
 8005166:	4303      	orrs	r3, r0
 8005168:	d097      	beq.n	800509a <_strtod_l+0xc2>
 800516a:	2300      	movs	r3, #0
 800516c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8005170:	f10a 0201 	add.w	r2, sl, #1
 8005174:	9217      	str	r2, [sp, #92]	; 0x5c
 8005176:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800517a:	2a2b      	cmp	r2, #43	; 0x2b
 800517c:	d077      	beq.n	800526e <_strtod_l+0x296>
 800517e:	2a2d      	cmp	r2, #45	; 0x2d
 8005180:	d07d      	beq.n	800527e <_strtod_l+0x2a6>
 8005182:	f04f 0e00 	mov.w	lr, #0
 8005186:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800518a:	2d09      	cmp	r5, #9
 800518c:	f240 8084 	bls.w	8005298 <_strtod_l+0x2c0>
 8005190:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8005194:	2500      	movs	r5, #0
 8005196:	e09f      	b.n	80052d8 <_strtod_l+0x300>
 8005198:	2300      	movs	r3, #0
 800519a:	e7c3      	b.n	8005124 <_strtod_l+0x14c>
 800519c:	2e08      	cmp	r6, #8
 800519e:	bfd5      	itete	le
 80051a0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80051a2:	9904      	ldrgt	r1, [sp, #16]
 80051a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80051a8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80051ac:	f100 0001 	add.w	r0, r0, #1
 80051b0:	bfd4      	ite	le
 80051b2:	930a      	strle	r3, [sp, #40]	; 0x28
 80051b4:	9304      	strgt	r3, [sp, #16]
 80051b6:	3601      	adds	r6, #1
 80051b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80051ba:	e7bb      	b.n	8005134 <_strtod_l+0x15c>
 80051bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051be:	195a      	adds	r2, r3, r5
 80051c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80051c2:	5d5a      	ldrb	r2, [r3, r5]
 80051c4:	b3ae      	cbz	r6, 8005232 <_strtod_l+0x25a>
 80051c6:	4683      	mov	fp, r0
 80051c8:	4633      	mov	r3, r6
 80051ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80051ce:	2909      	cmp	r1, #9
 80051d0:	d912      	bls.n	80051f8 <_strtod_l+0x220>
 80051d2:	2101      	movs	r1, #1
 80051d4:	e7c1      	b.n	800515a <_strtod_l+0x182>
 80051d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	9217      	str	r2, [sp, #92]	; 0x5c
 80051dc:	785a      	ldrb	r2, [r3, #1]
 80051de:	3001      	adds	r0, #1
 80051e0:	2a30      	cmp	r2, #48	; 0x30
 80051e2:	d0f8      	beq.n	80051d6 <_strtod_l+0x1fe>
 80051e4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	f200 84b0 	bhi.w	8005b4e <_strtod_l+0xb76>
 80051ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051f0:	930c      	str	r3, [sp, #48]	; 0x30
 80051f2:	4683      	mov	fp, r0
 80051f4:	2000      	movs	r0, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	3a30      	subs	r2, #48	; 0x30
 80051fa:	f100 0101 	add.w	r1, r0, #1
 80051fe:	d012      	beq.n	8005226 <_strtod_l+0x24e>
 8005200:	448b      	add	fp, r1
 8005202:	eb00 0c03 	add.w	ip, r0, r3
 8005206:	4619      	mov	r1, r3
 8005208:	250a      	movs	r5, #10
 800520a:	4561      	cmp	r1, ip
 800520c:	d113      	bne.n	8005236 <_strtod_l+0x25e>
 800520e:	1819      	adds	r1, r3, r0
 8005210:	2908      	cmp	r1, #8
 8005212:	f103 0301 	add.w	r3, r3, #1
 8005216:	4403      	add	r3, r0
 8005218:	dc1d      	bgt.n	8005256 <_strtod_l+0x27e>
 800521a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800521c:	210a      	movs	r1, #10
 800521e:	fb01 2200 	mla	r2, r1, r0, r2
 8005222:	920a      	str	r2, [sp, #40]	; 0x28
 8005224:	2100      	movs	r1, #0
 8005226:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005228:	1c50      	adds	r0, r2, #1
 800522a:	9017      	str	r0, [sp, #92]	; 0x5c
 800522c:	7852      	ldrb	r2, [r2, #1]
 800522e:	4608      	mov	r0, r1
 8005230:	e7cb      	b.n	80051ca <_strtod_l+0x1f2>
 8005232:	4630      	mov	r0, r6
 8005234:	e7d4      	b.n	80051e0 <_strtod_l+0x208>
 8005236:	2908      	cmp	r1, #8
 8005238:	dc04      	bgt.n	8005244 <_strtod_l+0x26c>
 800523a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800523c:	436f      	muls	r7, r5
 800523e:	970a      	str	r7, [sp, #40]	; 0x28
 8005240:	3101      	adds	r1, #1
 8005242:	e7e2      	b.n	800520a <_strtod_l+0x232>
 8005244:	f101 0e01 	add.w	lr, r1, #1
 8005248:	f1be 0f10 	cmp.w	lr, #16
 800524c:	bfde      	ittt	le
 800524e:	9f04      	ldrle	r7, [sp, #16]
 8005250:	436f      	mulle	r7, r5
 8005252:	9704      	strle	r7, [sp, #16]
 8005254:	e7f4      	b.n	8005240 <_strtod_l+0x268>
 8005256:	2b10      	cmp	r3, #16
 8005258:	bfdf      	itttt	le
 800525a:	9804      	ldrle	r0, [sp, #16]
 800525c:	210a      	movle	r1, #10
 800525e:	fb01 2200 	mlale	r2, r1, r0, r2
 8005262:	9204      	strle	r2, [sp, #16]
 8005264:	e7de      	b.n	8005224 <_strtod_l+0x24c>
 8005266:	f04f 0b00 	mov.w	fp, #0
 800526a:	2101      	movs	r1, #1
 800526c:	e77a      	b.n	8005164 <_strtod_l+0x18c>
 800526e:	f04f 0e00 	mov.w	lr, #0
 8005272:	f10a 0202 	add.w	r2, sl, #2
 8005276:	9217      	str	r2, [sp, #92]	; 0x5c
 8005278:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800527c:	e783      	b.n	8005186 <_strtod_l+0x1ae>
 800527e:	f04f 0e01 	mov.w	lr, #1
 8005282:	e7f6      	b.n	8005272 <_strtod_l+0x29a>
 8005284:	08008cb0 	.word	0x08008cb0
 8005288:	08008a60 	.word	0x08008a60
 800528c:	7ff00000 	.word	0x7ff00000
 8005290:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005292:	1c55      	adds	r5, r2, #1
 8005294:	9517      	str	r5, [sp, #92]	; 0x5c
 8005296:	7852      	ldrb	r2, [r2, #1]
 8005298:	2a30      	cmp	r2, #48	; 0x30
 800529a:	d0f9      	beq.n	8005290 <_strtod_l+0x2b8>
 800529c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80052a0:	2d08      	cmp	r5, #8
 80052a2:	f63f af77 	bhi.w	8005194 <_strtod_l+0x1bc>
 80052a6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80052aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80052ac:	9208      	str	r2, [sp, #32]
 80052ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80052b0:	1c55      	adds	r5, r2, #1
 80052b2:	9517      	str	r5, [sp, #92]	; 0x5c
 80052b4:	7852      	ldrb	r2, [r2, #1]
 80052b6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80052ba:	2f09      	cmp	r7, #9
 80052bc:	d937      	bls.n	800532e <_strtod_l+0x356>
 80052be:	9f08      	ldr	r7, [sp, #32]
 80052c0:	1bed      	subs	r5, r5, r7
 80052c2:	2d08      	cmp	r5, #8
 80052c4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80052c8:	dc02      	bgt.n	80052d0 <_strtod_l+0x2f8>
 80052ca:	4565      	cmp	r5, ip
 80052cc:	bfa8      	it	ge
 80052ce:	4665      	movge	r5, ip
 80052d0:	f1be 0f00 	cmp.w	lr, #0
 80052d4:	d000      	beq.n	80052d8 <_strtod_l+0x300>
 80052d6:	426d      	negs	r5, r5
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d14f      	bne.n	800537c <_strtod_l+0x3a4>
 80052dc:	9b06      	ldr	r3, [sp, #24]
 80052de:	4303      	orrs	r3, r0
 80052e0:	f47f aebe 	bne.w	8005060 <_strtod_l+0x88>
 80052e4:	2900      	cmp	r1, #0
 80052e6:	f47f aed8 	bne.w	800509a <_strtod_l+0xc2>
 80052ea:	2a69      	cmp	r2, #105	; 0x69
 80052ec:	d027      	beq.n	800533e <_strtod_l+0x366>
 80052ee:	dc24      	bgt.n	800533a <_strtod_l+0x362>
 80052f0:	2a49      	cmp	r2, #73	; 0x49
 80052f2:	d024      	beq.n	800533e <_strtod_l+0x366>
 80052f4:	2a4e      	cmp	r2, #78	; 0x4e
 80052f6:	f47f aed0 	bne.w	800509a <_strtod_l+0xc2>
 80052fa:	499b      	ldr	r1, [pc, #620]	; (8005568 <_strtod_l+0x590>)
 80052fc:	a817      	add	r0, sp, #92	; 0x5c
 80052fe:	f001 fd9d 	bl	8006e3c <__match>
 8005302:	2800      	cmp	r0, #0
 8005304:	f43f aec9 	beq.w	800509a <_strtod_l+0xc2>
 8005308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b28      	cmp	r3, #40	; 0x28
 800530e:	d12d      	bne.n	800536c <_strtod_l+0x394>
 8005310:	4996      	ldr	r1, [pc, #600]	; (800556c <_strtod_l+0x594>)
 8005312:	aa1a      	add	r2, sp, #104	; 0x68
 8005314:	a817      	add	r0, sp, #92	; 0x5c
 8005316:	f001 fda5 	bl	8006e64 <__hexnan>
 800531a:	2805      	cmp	r0, #5
 800531c:	d126      	bne.n	800536c <_strtod_l+0x394>
 800531e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005320:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005324:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005328:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800532c:	e698      	b.n	8005060 <_strtod_l+0x88>
 800532e:	250a      	movs	r5, #10
 8005330:	fb05 250c 	mla	r5, r5, ip, r2
 8005334:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8005338:	e7b9      	b.n	80052ae <_strtod_l+0x2d6>
 800533a:	2a6e      	cmp	r2, #110	; 0x6e
 800533c:	e7db      	b.n	80052f6 <_strtod_l+0x31e>
 800533e:	498c      	ldr	r1, [pc, #560]	; (8005570 <_strtod_l+0x598>)
 8005340:	a817      	add	r0, sp, #92	; 0x5c
 8005342:	f001 fd7b 	bl	8006e3c <__match>
 8005346:	2800      	cmp	r0, #0
 8005348:	f43f aea7 	beq.w	800509a <_strtod_l+0xc2>
 800534c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800534e:	4989      	ldr	r1, [pc, #548]	; (8005574 <_strtod_l+0x59c>)
 8005350:	3b01      	subs	r3, #1
 8005352:	a817      	add	r0, sp, #92	; 0x5c
 8005354:	9317      	str	r3, [sp, #92]	; 0x5c
 8005356:	f001 fd71 	bl	8006e3c <__match>
 800535a:	b910      	cbnz	r0, 8005362 <_strtod_l+0x38a>
 800535c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800535e:	3301      	adds	r3, #1
 8005360:	9317      	str	r3, [sp, #92]	; 0x5c
 8005362:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8005588 <_strtod_l+0x5b0>
 8005366:	f04f 0800 	mov.w	r8, #0
 800536a:	e679      	b.n	8005060 <_strtod_l+0x88>
 800536c:	4882      	ldr	r0, [pc, #520]	; (8005578 <_strtod_l+0x5a0>)
 800536e:	f002 fd13 	bl	8007d98 <nan>
 8005372:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005376:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800537a:	e671      	b.n	8005060 <_strtod_l+0x88>
 800537c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8005380:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005384:	eba5 020b 	sub.w	r2, r5, fp
 8005388:	2e00      	cmp	r6, #0
 800538a:	bf08      	it	eq
 800538c:	461e      	moveq	r6, r3
 800538e:	2b10      	cmp	r3, #16
 8005390:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005394:	9206      	str	r2, [sp, #24]
 8005396:	461a      	mov	r2, r3
 8005398:	bfa8      	it	ge
 800539a:	2210      	movge	r2, #16
 800539c:	2b09      	cmp	r3, #9
 800539e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80053a2:	dd0e      	ble.n	80053c2 <_strtod_l+0x3ea>
 80053a4:	4975      	ldr	r1, [pc, #468]	; (800557c <_strtod_l+0x5a4>)
 80053a6:	eddd 7a04 	vldr	s15, [sp, #16]
 80053aa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80053ae:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80053b2:	ed9d 5b08 	vldr	d5, [sp, #32]
 80053b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80053ba:	eea5 7b06 	vfma.f64	d7, d5, d6
 80053be:	ec59 8b17 	vmov	r8, r9, d7
 80053c2:	2b0f      	cmp	r3, #15
 80053c4:	dc37      	bgt.n	8005436 <_strtod_l+0x45e>
 80053c6:	9906      	ldr	r1, [sp, #24]
 80053c8:	2900      	cmp	r1, #0
 80053ca:	f43f ae49 	beq.w	8005060 <_strtod_l+0x88>
 80053ce:	dd23      	ble.n	8005418 <_strtod_l+0x440>
 80053d0:	2916      	cmp	r1, #22
 80053d2:	dc0b      	bgt.n	80053ec <_strtod_l+0x414>
 80053d4:	4b69      	ldr	r3, [pc, #420]	; (800557c <_strtod_l+0x5a4>)
 80053d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80053da:	ed93 7b00 	vldr	d7, [r3]
 80053de:	ec49 8b16 	vmov	d6, r8, r9
 80053e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053e6:	ec59 8b17 	vmov	r8, r9, d7
 80053ea:	e639      	b.n	8005060 <_strtod_l+0x88>
 80053ec:	9806      	ldr	r0, [sp, #24]
 80053ee:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80053f2:	4281      	cmp	r1, r0
 80053f4:	db1f      	blt.n	8005436 <_strtod_l+0x45e>
 80053f6:	4a61      	ldr	r2, [pc, #388]	; (800557c <_strtod_l+0x5a4>)
 80053f8:	f1c3 030f 	rsb	r3, r3, #15
 80053fc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005400:	ed91 7b00 	vldr	d7, [r1]
 8005404:	ec49 8b16 	vmov	d6, r8, r9
 8005408:	1ac3      	subs	r3, r0, r3
 800540a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800540e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005412:	ed92 6b00 	vldr	d6, [r2]
 8005416:	e7e4      	b.n	80053e2 <_strtod_l+0x40a>
 8005418:	9906      	ldr	r1, [sp, #24]
 800541a:	3116      	adds	r1, #22
 800541c:	db0b      	blt.n	8005436 <_strtod_l+0x45e>
 800541e:	4b57      	ldr	r3, [pc, #348]	; (800557c <_strtod_l+0x5a4>)
 8005420:	ebab 0505 	sub.w	r5, fp, r5
 8005424:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005428:	ed95 7b00 	vldr	d7, [r5]
 800542c:	ec49 8b16 	vmov	d6, r8, r9
 8005430:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005434:	e7d7      	b.n	80053e6 <_strtod_l+0x40e>
 8005436:	9906      	ldr	r1, [sp, #24]
 8005438:	1a9a      	subs	r2, r3, r2
 800543a:	440a      	add	r2, r1
 800543c:	2a00      	cmp	r2, #0
 800543e:	dd74      	ble.n	800552a <_strtod_l+0x552>
 8005440:	f012 000f 	ands.w	r0, r2, #15
 8005444:	d00a      	beq.n	800545c <_strtod_l+0x484>
 8005446:	494d      	ldr	r1, [pc, #308]	; (800557c <_strtod_l+0x5a4>)
 8005448:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800544c:	ed91 7b00 	vldr	d7, [r1]
 8005450:	ec49 8b16 	vmov	d6, r8, r9
 8005454:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005458:	ec59 8b17 	vmov	r8, r9, d7
 800545c:	f032 020f 	bics.w	r2, r2, #15
 8005460:	d04f      	beq.n	8005502 <_strtod_l+0x52a>
 8005462:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8005466:	dd22      	ble.n	80054ae <_strtod_l+0x4d6>
 8005468:	2500      	movs	r5, #0
 800546a:	462e      	mov	r6, r5
 800546c:	950a      	str	r5, [sp, #40]	; 0x28
 800546e:	462f      	mov	r7, r5
 8005470:	2322      	movs	r3, #34	; 0x22
 8005472:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8005588 <_strtod_l+0x5b0>
 8005476:	6023      	str	r3, [r4, #0]
 8005478:	f04f 0800 	mov.w	r8, #0
 800547c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800547e:	2b00      	cmp	r3, #0
 8005480:	f43f adee 	beq.w	8005060 <_strtod_l+0x88>
 8005484:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005486:	4620      	mov	r0, r4
 8005488:	f001 fdf4 	bl	8007074 <_Bfree>
 800548c:	4639      	mov	r1, r7
 800548e:	4620      	mov	r0, r4
 8005490:	f001 fdf0 	bl	8007074 <_Bfree>
 8005494:	4631      	mov	r1, r6
 8005496:	4620      	mov	r0, r4
 8005498:	f001 fdec 	bl	8007074 <_Bfree>
 800549c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800549e:	4620      	mov	r0, r4
 80054a0:	f001 fde8 	bl	8007074 <_Bfree>
 80054a4:	4629      	mov	r1, r5
 80054a6:	4620      	mov	r0, r4
 80054a8:	f001 fde4 	bl	8007074 <_Bfree>
 80054ac:	e5d8      	b.n	8005060 <_strtod_l+0x88>
 80054ae:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80054b2:	2000      	movs	r0, #0
 80054b4:	4f32      	ldr	r7, [pc, #200]	; (8005580 <_strtod_l+0x5a8>)
 80054b6:	1112      	asrs	r2, r2, #4
 80054b8:	4601      	mov	r1, r0
 80054ba:	2a01      	cmp	r2, #1
 80054bc:	dc24      	bgt.n	8005508 <_strtod_l+0x530>
 80054be:	b108      	cbz	r0, 80054c4 <_strtod_l+0x4ec>
 80054c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80054c4:	4a2e      	ldr	r2, [pc, #184]	; (8005580 <_strtod_l+0x5a8>)
 80054c6:	482f      	ldr	r0, [pc, #188]	; (8005584 <_strtod_l+0x5ac>)
 80054c8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80054cc:	ed91 7b00 	vldr	d7, [r1]
 80054d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80054d4:	ec49 8b16 	vmov	d6, r8, r9
 80054d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80054dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80054e0:	9905      	ldr	r1, [sp, #20]
 80054e2:	4a29      	ldr	r2, [pc, #164]	; (8005588 <_strtod_l+0x5b0>)
 80054e4:	400a      	ands	r2, r1
 80054e6:	4282      	cmp	r2, r0
 80054e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80054ec:	d8bc      	bhi.n	8005468 <_strtod_l+0x490>
 80054ee:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80054f2:	4282      	cmp	r2, r0
 80054f4:	bf86      	itte	hi
 80054f6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800558c <_strtod_l+0x5b4>
 80054fa:	f04f 38ff 	movhi.w	r8, #4294967295
 80054fe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8005502:	2200      	movs	r2, #0
 8005504:	9204      	str	r2, [sp, #16]
 8005506:	e07f      	b.n	8005608 <_strtod_l+0x630>
 8005508:	f012 0f01 	tst.w	r2, #1
 800550c:	d00a      	beq.n	8005524 <_strtod_l+0x54c>
 800550e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8005512:	ed90 7b00 	vldr	d7, [r0]
 8005516:	ed9d 6b04 	vldr	d6, [sp, #16]
 800551a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800551e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005522:	2001      	movs	r0, #1
 8005524:	3101      	adds	r1, #1
 8005526:	1052      	asrs	r2, r2, #1
 8005528:	e7c7      	b.n	80054ba <_strtod_l+0x4e2>
 800552a:	d0ea      	beq.n	8005502 <_strtod_l+0x52a>
 800552c:	4252      	negs	r2, r2
 800552e:	f012 000f 	ands.w	r0, r2, #15
 8005532:	d00a      	beq.n	800554a <_strtod_l+0x572>
 8005534:	4911      	ldr	r1, [pc, #68]	; (800557c <_strtod_l+0x5a4>)
 8005536:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800553a:	ed91 7b00 	vldr	d7, [r1]
 800553e:	ec49 8b16 	vmov	d6, r8, r9
 8005542:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005546:	ec59 8b17 	vmov	r8, r9, d7
 800554a:	1112      	asrs	r2, r2, #4
 800554c:	d0d9      	beq.n	8005502 <_strtod_l+0x52a>
 800554e:	2a1f      	cmp	r2, #31
 8005550:	dd1e      	ble.n	8005590 <_strtod_l+0x5b8>
 8005552:	2500      	movs	r5, #0
 8005554:	462e      	mov	r6, r5
 8005556:	950a      	str	r5, [sp, #40]	; 0x28
 8005558:	462f      	mov	r7, r5
 800555a:	2322      	movs	r3, #34	; 0x22
 800555c:	f04f 0800 	mov.w	r8, #0
 8005560:	f04f 0900 	mov.w	r9, #0
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	e789      	b.n	800547c <_strtod_l+0x4a4>
 8005568:	08008a31 	.word	0x08008a31
 800556c:	08008a74 	.word	0x08008a74
 8005570:	08008a29 	.word	0x08008a29
 8005574:	08008bb4 	.word	0x08008bb4
 8005578:	08008e70 	.word	0x08008e70
 800557c:	08008d50 	.word	0x08008d50
 8005580:	08008d28 	.word	0x08008d28
 8005584:	7ca00000 	.word	0x7ca00000
 8005588:	7ff00000 	.word	0x7ff00000
 800558c:	7fefffff 	.word	0x7fefffff
 8005590:	f012 0110 	ands.w	r1, r2, #16
 8005594:	bf18      	it	ne
 8005596:	216a      	movne	r1, #106	; 0x6a
 8005598:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800559c:	9104      	str	r1, [sp, #16]
 800559e:	49c0      	ldr	r1, [pc, #768]	; (80058a0 <_strtod_l+0x8c8>)
 80055a0:	2000      	movs	r0, #0
 80055a2:	07d7      	lsls	r7, r2, #31
 80055a4:	d508      	bpl.n	80055b8 <_strtod_l+0x5e0>
 80055a6:	ed9d 6b08 	vldr	d6, [sp, #32]
 80055aa:	ed91 7b00 	vldr	d7, [r1]
 80055ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 80055b2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80055b6:	2001      	movs	r0, #1
 80055b8:	1052      	asrs	r2, r2, #1
 80055ba:	f101 0108 	add.w	r1, r1, #8
 80055be:	d1f0      	bne.n	80055a2 <_strtod_l+0x5ca>
 80055c0:	b108      	cbz	r0, 80055c6 <_strtod_l+0x5ee>
 80055c2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80055c6:	9a04      	ldr	r2, [sp, #16]
 80055c8:	b1ba      	cbz	r2, 80055fa <_strtod_l+0x622>
 80055ca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80055ce:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80055d2:	2a00      	cmp	r2, #0
 80055d4:	4649      	mov	r1, r9
 80055d6:	dd10      	ble.n	80055fa <_strtod_l+0x622>
 80055d8:	2a1f      	cmp	r2, #31
 80055da:	f340 8132 	ble.w	8005842 <_strtod_l+0x86a>
 80055de:	2a34      	cmp	r2, #52	; 0x34
 80055e0:	bfde      	ittt	le
 80055e2:	3a20      	suble	r2, #32
 80055e4:	f04f 30ff 	movle.w	r0, #4294967295
 80055e8:	fa00 f202 	lslle.w	r2, r0, r2
 80055ec:	f04f 0800 	mov.w	r8, #0
 80055f0:	bfcc      	ite	gt
 80055f2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80055f6:	ea02 0901 	andle.w	r9, r2, r1
 80055fa:	ec49 8b17 	vmov	d7, r8, r9
 80055fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005606:	d0a4      	beq.n	8005552 <_strtod_l+0x57a>
 8005608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800560a:	9200      	str	r2, [sp, #0]
 800560c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800560e:	4632      	mov	r2, r6
 8005610:	4620      	mov	r0, r4
 8005612:	f001 fd9b 	bl	800714c <__s2b>
 8005616:	900a      	str	r0, [sp, #40]	; 0x28
 8005618:	2800      	cmp	r0, #0
 800561a:	f43f af25 	beq.w	8005468 <_strtod_l+0x490>
 800561e:	9b06      	ldr	r3, [sp, #24]
 8005620:	ebab 0505 	sub.w	r5, fp, r5
 8005624:	2b00      	cmp	r3, #0
 8005626:	bfb4      	ite	lt
 8005628:	462b      	movlt	r3, r5
 800562a:	2300      	movge	r3, #0
 800562c:	930c      	str	r3, [sp, #48]	; 0x30
 800562e:	9b06      	ldr	r3, [sp, #24]
 8005630:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8005888 <_strtod_l+0x8b0>
 8005634:	ed9f ab96 	vldr	d10, [pc, #600]	; 8005890 <_strtod_l+0x8b8>
 8005638:	ed9f bb97 	vldr	d11, [pc, #604]	; 8005898 <_strtod_l+0x8c0>
 800563c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005640:	2500      	movs	r5, #0
 8005642:	9312      	str	r3, [sp, #72]	; 0x48
 8005644:	462e      	mov	r6, r5
 8005646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005648:	4620      	mov	r0, r4
 800564a:	6859      	ldr	r1, [r3, #4]
 800564c:	f001 fcd2 	bl	8006ff4 <_Balloc>
 8005650:	4607      	mov	r7, r0
 8005652:	2800      	cmp	r0, #0
 8005654:	f43f af0c 	beq.w	8005470 <_strtod_l+0x498>
 8005658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	3202      	adds	r2, #2
 800565e:	f103 010c 	add.w	r1, r3, #12
 8005662:	0092      	lsls	r2, r2, #2
 8005664:	300c      	adds	r0, #12
 8005666:	f001 fcb7 	bl	8006fd8 <memcpy>
 800566a:	ec49 8b10 	vmov	d0, r8, r9
 800566e:	aa1a      	add	r2, sp, #104	; 0x68
 8005670:	a919      	add	r1, sp, #100	; 0x64
 8005672:	4620      	mov	r0, r4
 8005674:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8005678:	f002 f8a4 	bl	80077c4 <__d2b>
 800567c:	9018      	str	r0, [sp, #96]	; 0x60
 800567e:	2800      	cmp	r0, #0
 8005680:	f43f aef6 	beq.w	8005470 <_strtod_l+0x498>
 8005684:	2101      	movs	r1, #1
 8005686:	4620      	mov	r0, r4
 8005688:	f001 fdfa 	bl	8007280 <__i2b>
 800568c:	4606      	mov	r6, r0
 800568e:	2800      	cmp	r0, #0
 8005690:	f43f aeee 	beq.w	8005470 <_strtod_l+0x498>
 8005694:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005696:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005698:	2b00      	cmp	r3, #0
 800569a:	bfab      	itete	ge
 800569c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800569e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80056a0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80056a4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80056a8:	bfac      	ite	ge
 80056aa:	eb03 0b02 	addge.w	fp, r3, r2
 80056ae:	eba2 0a03 	sublt.w	sl, r2, r3
 80056b2:	9a04      	ldr	r2, [sp, #16]
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	440b      	add	r3, r1
 80056b8:	4a7a      	ldr	r2, [pc, #488]	; (80058a4 <_strtod_l+0x8cc>)
 80056ba:	3b01      	subs	r3, #1
 80056bc:	4293      	cmp	r3, r2
 80056be:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80056c2:	f280 80d1 	bge.w	8005868 <_strtod_l+0x890>
 80056c6:	1ad2      	subs	r2, r2, r3
 80056c8:	2a1f      	cmp	r2, #31
 80056ca:	eba1 0102 	sub.w	r1, r1, r2
 80056ce:	f04f 0001 	mov.w	r0, #1
 80056d2:	f300 80bd 	bgt.w	8005850 <_strtod_l+0x878>
 80056d6:	fa00 f302 	lsl.w	r3, r0, r2
 80056da:	930e      	str	r3, [sp, #56]	; 0x38
 80056dc:	2300      	movs	r3, #0
 80056de:	930d      	str	r3, [sp, #52]	; 0x34
 80056e0:	eb0b 0301 	add.w	r3, fp, r1
 80056e4:	9a04      	ldr	r2, [sp, #16]
 80056e6:	459b      	cmp	fp, r3
 80056e8:	448a      	add	sl, r1
 80056ea:	4492      	add	sl, r2
 80056ec:	465a      	mov	r2, fp
 80056ee:	bfa8      	it	ge
 80056f0:	461a      	movge	r2, r3
 80056f2:	4552      	cmp	r2, sl
 80056f4:	bfa8      	it	ge
 80056f6:	4652      	movge	r2, sl
 80056f8:	2a00      	cmp	r2, #0
 80056fa:	bfc2      	ittt	gt
 80056fc:	1a9b      	subgt	r3, r3, r2
 80056fe:	ebaa 0a02 	subgt.w	sl, sl, r2
 8005702:	ebab 0b02 	subgt.w	fp, fp, r2
 8005706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005708:	2a00      	cmp	r2, #0
 800570a:	dd18      	ble.n	800573e <_strtod_l+0x766>
 800570c:	4631      	mov	r1, r6
 800570e:	4620      	mov	r0, r4
 8005710:	9315      	str	r3, [sp, #84]	; 0x54
 8005712:	f001 fe71 	bl	80073f8 <__pow5mult>
 8005716:	4606      	mov	r6, r0
 8005718:	2800      	cmp	r0, #0
 800571a:	f43f aea9 	beq.w	8005470 <_strtod_l+0x498>
 800571e:	4601      	mov	r1, r0
 8005720:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005722:	4620      	mov	r0, r4
 8005724:	f001 fdc2 	bl	80072ac <__multiply>
 8005728:	9014      	str	r0, [sp, #80]	; 0x50
 800572a:	2800      	cmp	r0, #0
 800572c:	f43f aea0 	beq.w	8005470 <_strtod_l+0x498>
 8005730:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005732:	4620      	mov	r0, r4
 8005734:	f001 fc9e 	bl	8007074 <_Bfree>
 8005738:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800573a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800573c:	9218      	str	r2, [sp, #96]	; 0x60
 800573e:	2b00      	cmp	r3, #0
 8005740:	f300 8097 	bgt.w	8005872 <_strtod_l+0x89a>
 8005744:	9b06      	ldr	r3, [sp, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	dd08      	ble.n	800575c <_strtod_l+0x784>
 800574a:	4639      	mov	r1, r7
 800574c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800574e:	4620      	mov	r0, r4
 8005750:	f001 fe52 	bl	80073f8 <__pow5mult>
 8005754:	4607      	mov	r7, r0
 8005756:	2800      	cmp	r0, #0
 8005758:	f43f ae8a 	beq.w	8005470 <_strtod_l+0x498>
 800575c:	f1ba 0f00 	cmp.w	sl, #0
 8005760:	dd08      	ble.n	8005774 <_strtod_l+0x79c>
 8005762:	4639      	mov	r1, r7
 8005764:	4652      	mov	r2, sl
 8005766:	4620      	mov	r0, r4
 8005768:	f001 fea0 	bl	80074ac <__lshift>
 800576c:	4607      	mov	r7, r0
 800576e:	2800      	cmp	r0, #0
 8005770:	f43f ae7e 	beq.w	8005470 <_strtod_l+0x498>
 8005774:	f1bb 0f00 	cmp.w	fp, #0
 8005778:	dd08      	ble.n	800578c <_strtod_l+0x7b4>
 800577a:	4631      	mov	r1, r6
 800577c:	465a      	mov	r2, fp
 800577e:	4620      	mov	r0, r4
 8005780:	f001 fe94 	bl	80074ac <__lshift>
 8005784:	4606      	mov	r6, r0
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f ae72 	beq.w	8005470 <_strtod_l+0x498>
 800578c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800578e:	463a      	mov	r2, r7
 8005790:	4620      	mov	r0, r4
 8005792:	f001 ff13 	bl	80075bc <__mdiff>
 8005796:	4605      	mov	r5, r0
 8005798:	2800      	cmp	r0, #0
 800579a:	f43f ae69 	beq.w	8005470 <_strtod_l+0x498>
 800579e:	2300      	movs	r3, #0
 80057a0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80057a4:	60c3      	str	r3, [r0, #12]
 80057a6:	4631      	mov	r1, r6
 80057a8:	f001 feec 	bl	8007584 <__mcmp>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	da7f      	bge.n	80058b0 <_strtod_l+0x8d8>
 80057b0:	ea5a 0308 	orrs.w	r3, sl, r8
 80057b4:	f040 80a5 	bne.w	8005902 <_strtod_l+0x92a>
 80057b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f040 80a0 	bne.w	8005902 <_strtod_l+0x92a>
 80057c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057c6:	0d1b      	lsrs	r3, r3, #20
 80057c8:	051b      	lsls	r3, r3, #20
 80057ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80057ce:	f240 8098 	bls.w	8005902 <_strtod_l+0x92a>
 80057d2:	696b      	ldr	r3, [r5, #20]
 80057d4:	b91b      	cbnz	r3, 80057de <_strtod_l+0x806>
 80057d6:	692b      	ldr	r3, [r5, #16]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	f340 8092 	ble.w	8005902 <_strtod_l+0x92a>
 80057de:	4629      	mov	r1, r5
 80057e0:	2201      	movs	r2, #1
 80057e2:	4620      	mov	r0, r4
 80057e4:	f001 fe62 	bl	80074ac <__lshift>
 80057e8:	4631      	mov	r1, r6
 80057ea:	4605      	mov	r5, r0
 80057ec:	f001 feca 	bl	8007584 <__mcmp>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	f340 8086 	ble.w	8005902 <_strtod_l+0x92a>
 80057f6:	9904      	ldr	r1, [sp, #16]
 80057f8:	4a2b      	ldr	r2, [pc, #172]	; (80058a8 <_strtod_l+0x8d0>)
 80057fa:	464b      	mov	r3, r9
 80057fc:	2900      	cmp	r1, #0
 80057fe:	f000 80a1 	beq.w	8005944 <_strtod_l+0x96c>
 8005802:	ea02 0109 	and.w	r1, r2, r9
 8005806:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800580a:	f300 809b 	bgt.w	8005944 <_strtod_l+0x96c>
 800580e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005812:	f77f aea2 	ble.w	800555a <_strtod_l+0x582>
 8005816:	4a25      	ldr	r2, [pc, #148]	; (80058ac <_strtod_l+0x8d4>)
 8005818:	2300      	movs	r3, #0
 800581a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800581e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8005822:	ec49 8b17 	vmov	d7, r8, r9
 8005826:	ee27 7b06 	vmul.f64	d7, d7, d6
 800582a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800582e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	bf08      	it	eq
 8005836:	2322      	moveq	r3, #34	; 0x22
 8005838:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800583c:	bf08      	it	eq
 800583e:	6023      	streq	r3, [r4, #0]
 8005840:	e620      	b.n	8005484 <_strtod_l+0x4ac>
 8005842:	f04f 31ff 	mov.w	r1, #4294967295
 8005846:	fa01 f202 	lsl.w	r2, r1, r2
 800584a:	ea02 0808 	and.w	r8, r2, r8
 800584e:	e6d4      	b.n	80055fa <_strtod_l+0x622>
 8005850:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8005854:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8005858:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800585c:	33e2      	adds	r3, #226	; 0xe2
 800585e:	fa00 f303 	lsl.w	r3, r0, r3
 8005862:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8005866:	e73b      	b.n	80056e0 <_strtod_l+0x708>
 8005868:	2000      	movs	r0, #0
 800586a:	2301      	movs	r3, #1
 800586c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8005870:	e736      	b.n	80056e0 <_strtod_l+0x708>
 8005872:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005874:	461a      	mov	r2, r3
 8005876:	4620      	mov	r0, r4
 8005878:	f001 fe18 	bl	80074ac <__lshift>
 800587c:	9018      	str	r0, [sp, #96]	; 0x60
 800587e:	2800      	cmp	r0, #0
 8005880:	f47f af60 	bne.w	8005744 <_strtod_l+0x76c>
 8005884:	e5f4      	b.n	8005470 <_strtod_l+0x498>
 8005886:	bf00      	nop
 8005888:	94a03595 	.word	0x94a03595
 800588c:	3fcfffff 	.word	0x3fcfffff
 8005890:	94a03595 	.word	0x94a03595
 8005894:	3fdfffff 	.word	0x3fdfffff
 8005898:	35afe535 	.word	0x35afe535
 800589c:	3fe00000 	.word	0x3fe00000
 80058a0:	08008a88 	.word	0x08008a88
 80058a4:	fffffc02 	.word	0xfffffc02
 80058a8:	7ff00000 	.word	0x7ff00000
 80058ac:	39500000 	.word	0x39500000
 80058b0:	46cb      	mov	fp, r9
 80058b2:	d165      	bne.n	8005980 <_strtod_l+0x9a8>
 80058b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058b8:	f1ba 0f00 	cmp.w	sl, #0
 80058bc:	d02a      	beq.n	8005914 <_strtod_l+0x93c>
 80058be:	4aaa      	ldr	r2, [pc, #680]	; (8005b68 <_strtod_l+0xb90>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d12b      	bne.n	800591c <_strtod_l+0x944>
 80058c4:	9b04      	ldr	r3, [sp, #16]
 80058c6:	4641      	mov	r1, r8
 80058c8:	b1fb      	cbz	r3, 800590a <_strtod_l+0x932>
 80058ca:	4aa8      	ldr	r2, [pc, #672]	; (8005b6c <_strtod_l+0xb94>)
 80058cc:	ea09 0202 	and.w	r2, r9, r2
 80058d0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80058d4:	f04f 30ff 	mov.w	r0, #4294967295
 80058d8:	d81a      	bhi.n	8005910 <_strtod_l+0x938>
 80058da:	0d12      	lsrs	r2, r2, #20
 80058dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80058e0:	fa00 f303 	lsl.w	r3, r0, r3
 80058e4:	4299      	cmp	r1, r3
 80058e6:	d119      	bne.n	800591c <_strtod_l+0x944>
 80058e8:	4ba1      	ldr	r3, [pc, #644]	; (8005b70 <_strtod_l+0xb98>)
 80058ea:	459b      	cmp	fp, r3
 80058ec:	d102      	bne.n	80058f4 <_strtod_l+0x91c>
 80058ee:	3101      	adds	r1, #1
 80058f0:	f43f adbe 	beq.w	8005470 <_strtod_l+0x498>
 80058f4:	4b9d      	ldr	r3, [pc, #628]	; (8005b6c <_strtod_l+0xb94>)
 80058f6:	ea0b 0303 	and.w	r3, fp, r3
 80058fa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80058fe:	f04f 0800 	mov.w	r8, #0
 8005902:	9b04      	ldr	r3, [sp, #16]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d186      	bne.n	8005816 <_strtod_l+0x83e>
 8005908:	e5bc      	b.n	8005484 <_strtod_l+0x4ac>
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	e7e9      	b.n	80058e4 <_strtod_l+0x90c>
 8005910:	4603      	mov	r3, r0
 8005912:	e7e7      	b.n	80058e4 <_strtod_l+0x90c>
 8005914:	ea53 0308 	orrs.w	r3, r3, r8
 8005918:	f43f af6d 	beq.w	80057f6 <_strtod_l+0x81e>
 800591c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800591e:	b1db      	cbz	r3, 8005958 <_strtod_l+0x980>
 8005920:	ea13 0f0b 	tst.w	r3, fp
 8005924:	d0ed      	beq.n	8005902 <_strtod_l+0x92a>
 8005926:	9a04      	ldr	r2, [sp, #16]
 8005928:	4640      	mov	r0, r8
 800592a:	4649      	mov	r1, r9
 800592c:	f1ba 0f00 	cmp.w	sl, #0
 8005930:	d016      	beq.n	8005960 <_strtod_l+0x988>
 8005932:	f7ff fb34 	bl	8004f9e <sulp>
 8005936:	ed9d 7b08 	vldr	d7, [sp, #32]
 800593a:	ee37 7b00 	vadd.f64	d7, d7, d0
 800593e:	ec59 8b17 	vmov	r8, r9, d7
 8005942:	e7de      	b.n	8005902 <_strtod_l+0x92a>
 8005944:	4013      	ands	r3, r2
 8005946:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800594a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800594e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005952:	f04f 38ff 	mov.w	r8, #4294967295
 8005956:	e7d4      	b.n	8005902 <_strtod_l+0x92a>
 8005958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800595a:	ea13 0f08 	tst.w	r3, r8
 800595e:	e7e1      	b.n	8005924 <_strtod_l+0x94c>
 8005960:	f7ff fb1d 	bl	8004f9e <sulp>
 8005964:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005968:	ee37 7b40 	vsub.f64	d7, d7, d0
 800596c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005970:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005978:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800597c:	d1c1      	bne.n	8005902 <_strtod_l+0x92a>
 800597e:	e5ec      	b.n	800555a <_strtod_l+0x582>
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	f001 ff7a 	bl	800787c <__ratio>
 8005988:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800598c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005994:	d867      	bhi.n	8005a66 <_strtod_l+0xa8e>
 8005996:	f1ba 0f00 	cmp.w	sl, #0
 800599a:	d044      	beq.n	8005a26 <_strtod_l+0xa4e>
 800599c:	4b75      	ldr	r3, [pc, #468]	; (8005b74 <_strtod_l+0xb9c>)
 800599e:	2200      	movs	r2, #0
 80059a0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80059a4:	4971      	ldr	r1, [pc, #452]	; (8005b6c <_strtod_l+0xb94>)
 80059a6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8005b80 <_strtod_l+0xba8>
 80059aa:	ea0b 0001 	and.w	r0, fp, r1
 80059ae:	4560      	cmp	r0, ip
 80059b0:	900d      	str	r0, [sp, #52]	; 0x34
 80059b2:	f040 808b 	bne.w	8005acc <_strtod_l+0xaf4>
 80059b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80059ba:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80059be:	ec49 8b10 	vmov	d0, r8, r9
 80059c2:	ec43 2b1c 	vmov	d12, r2, r3
 80059c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059ca:	f001 fe7f 	bl	80076cc <__ulp>
 80059ce:	ec49 8b1d 	vmov	d13, r8, r9
 80059d2:	eeac db00 	vfma.f64	d13, d12, d0
 80059d6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 80059da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059dc:	4963      	ldr	r1, [pc, #396]	; (8005b6c <_strtod_l+0xb94>)
 80059de:	4a66      	ldr	r2, [pc, #408]	; (8005b78 <_strtod_l+0xba0>)
 80059e0:	4019      	ands	r1, r3
 80059e2:	4291      	cmp	r1, r2
 80059e4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80059e8:	d947      	bls.n	8005a7a <_strtod_l+0xaa2>
 80059ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d103      	bne.n	80059fc <_strtod_l+0xa24>
 80059f4:	9b08      	ldr	r3, [sp, #32]
 80059f6:	3301      	adds	r3, #1
 80059f8:	f43f ad3a 	beq.w	8005470 <_strtod_l+0x498>
 80059fc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8005b70 <_strtod_l+0xb98>
 8005a00:	f04f 38ff 	mov.w	r8, #4294967295
 8005a04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a06:	4620      	mov	r0, r4
 8005a08:	f001 fb34 	bl	8007074 <_Bfree>
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f001 fb30 	bl	8007074 <_Bfree>
 8005a14:	4631      	mov	r1, r6
 8005a16:	4620      	mov	r0, r4
 8005a18:	f001 fb2c 	bl	8007074 <_Bfree>
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f001 fb28 	bl	8007074 <_Bfree>
 8005a24:	e60f      	b.n	8005646 <_strtod_l+0x66e>
 8005a26:	f1b8 0f00 	cmp.w	r8, #0
 8005a2a:	d112      	bne.n	8005a52 <_strtod_l+0xa7a>
 8005a2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a30:	b9b3      	cbnz	r3, 8005a60 <_strtod_l+0xa88>
 8005a32:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8005a36:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8005a42:	d401      	bmi.n	8005a48 <_strtod_l+0xa70>
 8005a44:	ee20 8b08 	vmul.f64	d8, d0, d8
 8005a48:	eeb1 7b48 	vneg.f64	d7, d8
 8005a4c:	ec53 2b17 	vmov	r2, r3, d7
 8005a50:	e7a8      	b.n	80059a4 <_strtod_l+0x9cc>
 8005a52:	f1b8 0f01 	cmp.w	r8, #1
 8005a56:	d103      	bne.n	8005a60 <_strtod_l+0xa88>
 8005a58:	f1b9 0f00 	cmp.w	r9, #0
 8005a5c:	f43f ad7d 	beq.w	800555a <_strtod_l+0x582>
 8005a60:	4b46      	ldr	r3, [pc, #280]	; (8005b7c <_strtod_l+0xba4>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	e79c      	b.n	80059a0 <_strtod_l+0x9c8>
 8005a66:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8005a6a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8005a6e:	f1ba 0f00 	cmp.w	sl, #0
 8005a72:	d0e9      	beq.n	8005a48 <_strtod_l+0xa70>
 8005a74:	ec53 2b18 	vmov	r2, r3, d8
 8005a78:	e794      	b.n	80059a4 <_strtod_l+0x9cc>
 8005a7a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005a7e:	9b04      	ldr	r3, [sp, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1bf      	bne.n	8005a04 <_strtod_l+0xa2c>
 8005a84:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a8a:	0d1b      	lsrs	r3, r3, #20
 8005a8c:	051b      	lsls	r3, r3, #20
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d1b8      	bne.n	8005a04 <_strtod_l+0xa2c>
 8005a92:	ec51 0b18 	vmov	r0, r1, d8
 8005a96:	f7fa fe0f 	bl	80006b8 <__aeabi_d2lz>
 8005a9a:	f7fa fdc7 	bl	800062c <__aeabi_l2d>
 8005a9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005aa2:	ec41 0b17 	vmov	d7, r0, r1
 8005aa6:	ea43 0308 	orr.w	r3, r3, r8
 8005aaa:	ea53 030a 	orrs.w	r3, r3, sl
 8005aae:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005ab2:	d03e      	beq.n	8005b32 <_strtod_l+0xb5a>
 8005ab4:	eeb4 8bca 	vcmpe.f64	d8, d10
 8005ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005abc:	f53f ace2 	bmi.w	8005484 <_strtod_l+0x4ac>
 8005ac0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8005ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac8:	dd9c      	ble.n	8005a04 <_strtod_l+0xa2c>
 8005aca:	e4db      	b.n	8005484 <_strtod_l+0x4ac>
 8005acc:	9904      	ldr	r1, [sp, #16]
 8005ace:	b301      	cbz	r1, 8005b12 <_strtod_l+0xb3a>
 8005ad0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ad2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8005ad6:	d81c      	bhi.n	8005b12 <_strtod_l+0xb3a>
 8005ad8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8005b60 <_strtod_l+0xb88>
 8005adc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae4:	d811      	bhi.n	8005b0a <_strtod_l+0xb32>
 8005ae6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8005aea:	ee18 3a10 	vmov	r3, s16
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	bf38      	it	cc
 8005af2:	2301      	movcc	r3, #1
 8005af4:	ee08 3a10 	vmov	s16, r3
 8005af8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8005afc:	f1ba 0f00 	cmp.w	sl, #0
 8005b00:	d114      	bne.n	8005b2c <_strtod_l+0xb54>
 8005b02:	eeb1 7b48 	vneg.f64	d7, d8
 8005b06:	ec53 2b17 	vmov	r2, r3, d7
 8005b0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005b0c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8005b10:	1a0b      	subs	r3, r1, r0
 8005b12:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005b16:	ec43 2b1c 	vmov	d12, r2, r3
 8005b1a:	f001 fdd7 	bl	80076cc <__ulp>
 8005b1e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005b22:	eeac 7b00 	vfma.f64	d7, d12, d0
 8005b26:	ec59 8b17 	vmov	r8, r9, d7
 8005b2a:	e7a8      	b.n	8005a7e <_strtod_l+0xaa6>
 8005b2c:	ec53 2b18 	vmov	r2, r3, d8
 8005b30:	e7eb      	b.n	8005b0a <_strtod_l+0xb32>
 8005b32:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8005b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3a:	f57f af63 	bpl.w	8005a04 <_strtod_l+0xa2c>
 8005b3e:	e4a1      	b.n	8005484 <_strtod_l+0x4ac>
 8005b40:	2300      	movs	r3, #0
 8005b42:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	f7ff ba8d 	b.w	8005068 <_strtod_l+0x90>
 8005b4e:	2a65      	cmp	r2, #101	; 0x65
 8005b50:	f43f ab89 	beq.w	8005266 <_strtod_l+0x28e>
 8005b54:	2a45      	cmp	r2, #69	; 0x45
 8005b56:	f43f ab86 	beq.w	8005266 <_strtod_l+0x28e>
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	f7ff bbbe 	b.w	80052dc <_strtod_l+0x304>
 8005b60:	ffc00000 	.word	0xffc00000
 8005b64:	41dfffff 	.word	0x41dfffff
 8005b68:	000fffff 	.word	0x000fffff
 8005b6c:	7ff00000 	.word	0x7ff00000
 8005b70:	7fefffff 	.word	0x7fefffff
 8005b74:	3ff00000 	.word	0x3ff00000
 8005b78:	7c9fffff 	.word	0x7c9fffff
 8005b7c:	bff00000 	.word	0xbff00000
 8005b80:	7fe00000 	.word	0x7fe00000

08005b84 <_strtod_r>:
 8005b84:	4b01      	ldr	r3, [pc, #4]	; (8005b8c <_strtod_r+0x8>)
 8005b86:	f7ff ba27 	b.w	8004fd8 <_strtod_l>
 8005b8a:	bf00      	nop
 8005b8c:	200000e4 	.word	0x200000e4

08005b90 <_strtol_l.isra.0>:
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b96:	d001      	beq.n	8005b9c <_strtol_l.isra.0+0xc>
 8005b98:	2b24      	cmp	r3, #36	; 0x24
 8005b9a:	d906      	bls.n	8005baa <_strtol_l.isra.0+0x1a>
 8005b9c:	f7fe fb4a 	bl	8004234 <__errno>
 8005ba0:	2316      	movs	r3, #22
 8005ba2:	6003      	str	r3, [r0, #0]
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005baa:	4f3a      	ldr	r7, [pc, #232]	; (8005c94 <_strtol_l.isra.0+0x104>)
 8005bac:	468e      	mov	lr, r1
 8005bae:	4676      	mov	r6, lr
 8005bb0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005bb4:	5de5      	ldrb	r5, [r4, r7]
 8005bb6:	f015 0508 	ands.w	r5, r5, #8
 8005bba:	d1f8      	bne.n	8005bae <_strtol_l.isra.0+0x1e>
 8005bbc:	2c2d      	cmp	r4, #45	; 0x2d
 8005bbe:	d134      	bne.n	8005c2a <_strtol_l.isra.0+0x9a>
 8005bc0:	f89e 4000 	ldrb.w	r4, [lr]
 8005bc4:	f04f 0801 	mov.w	r8, #1
 8005bc8:	f106 0e02 	add.w	lr, r6, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d05c      	beq.n	8005c8a <_strtol_l.isra.0+0xfa>
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	d10c      	bne.n	8005bee <_strtol_l.isra.0+0x5e>
 8005bd4:	2c30      	cmp	r4, #48	; 0x30
 8005bd6:	d10a      	bne.n	8005bee <_strtol_l.isra.0+0x5e>
 8005bd8:	f89e 4000 	ldrb.w	r4, [lr]
 8005bdc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005be0:	2c58      	cmp	r4, #88	; 0x58
 8005be2:	d14d      	bne.n	8005c80 <_strtol_l.isra.0+0xf0>
 8005be4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005be8:	2310      	movs	r3, #16
 8005bea:	f10e 0e02 	add.w	lr, lr, #2
 8005bee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005bf2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005bf6:	2600      	movs	r6, #0
 8005bf8:	fbbc f9f3 	udiv	r9, ip, r3
 8005bfc:	4635      	mov	r5, r6
 8005bfe:	fb03 ca19 	mls	sl, r3, r9, ip
 8005c02:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005c06:	2f09      	cmp	r7, #9
 8005c08:	d818      	bhi.n	8005c3c <_strtol_l.isra.0+0xac>
 8005c0a:	463c      	mov	r4, r7
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	dd24      	ble.n	8005c5a <_strtol_l.isra.0+0xca>
 8005c10:	2e00      	cmp	r6, #0
 8005c12:	db1f      	blt.n	8005c54 <_strtol_l.isra.0+0xc4>
 8005c14:	45a9      	cmp	r9, r5
 8005c16:	d31d      	bcc.n	8005c54 <_strtol_l.isra.0+0xc4>
 8005c18:	d101      	bne.n	8005c1e <_strtol_l.isra.0+0x8e>
 8005c1a:	45a2      	cmp	sl, r4
 8005c1c:	db1a      	blt.n	8005c54 <_strtol_l.isra.0+0xc4>
 8005c1e:	fb05 4503 	mla	r5, r5, r3, r4
 8005c22:	2601      	movs	r6, #1
 8005c24:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005c28:	e7eb      	b.n	8005c02 <_strtol_l.isra.0+0x72>
 8005c2a:	2c2b      	cmp	r4, #43	; 0x2b
 8005c2c:	bf08      	it	eq
 8005c2e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005c32:	46a8      	mov	r8, r5
 8005c34:	bf08      	it	eq
 8005c36:	f106 0e02 	addeq.w	lr, r6, #2
 8005c3a:	e7c7      	b.n	8005bcc <_strtol_l.isra.0+0x3c>
 8005c3c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005c40:	2f19      	cmp	r7, #25
 8005c42:	d801      	bhi.n	8005c48 <_strtol_l.isra.0+0xb8>
 8005c44:	3c37      	subs	r4, #55	; 0x37
 8005c46:	e7e1      	b.n	8005c0c <_strtol_l.isra.0+0x7c>
 8005c48:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005c4c:	2f19      	cmp	r7, #25
 8005c4e:	d804      	bhi.n	8005c5a <_strtol_l.isra.0+0xca>
 8005c50:	3c57      	subs	r4, #87	; 0x57
 8005c52:	e7db      	b.n	8005c0c <_strtol_l.isra.0+0x7c>
 8005c54:	f04f 36ff 	mov.w	r6, #4294967295
 8005c58:	e7e4      	b.n	8005c24 <_strtol_l.isra.0+0x94>
 8005c5a:	2e00      	cmp	r6, #0
 8005c5c:	da05      	bge.n	8005c6a <_strtol_l.isra.0+0xda>
 8005c5e:	2322      	movs	r3, #34	; 0x22
 8005c60:	6003      	str	r3, [r0, #0]
 8005c62:	4665      	mov	r5, ip
 8005c64:	b942      	cbnz	r2, 8005c78 <_strtol_l.isra.0+0xe8>
 8005c66:	4628      	mov	r0, r5
 8005c68:	e79d      	b.n	8005ba6 <_strtol_l.isra.0+0x16>
 8005c6a:	f1b8 0f00 	cmp.w	r8, #0
 8005c6e:	d000      	beq.n	8005c72 <_strtol_l.isra.0+0xe2>
 8005c70:	426d      	negs	r5, r5
 8005c72:	2a00      	cmp	r2, #0
 8005c74:	d0f7      	beq.n	8005c66 <_strtol_l.isra.0+0xd6>
 8005c76:	b10e      	cbz	r6, 8005c7c <_strtol_l.isra.0+0xec>
 8005c78:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005c7c:	6011      	str	r1, [r2, #0]
 8005c7e:	e7f2      	b.n	8005c66 <_strtol_l.isra.0+0xd6>
 8005c80:	2430      	movs	r4, #48	; 0x30
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1b3      	bne.n	8005bee <_strtol_l.isra.0+0x5e>
 8005c86:	2308      	movs	r3, #8
 8005c88:	e7b1      	b.n	8005bee <_strtol_l.isra.0+0x5e>
 8005c8a:	2c30      	cmp	r4, #48	; 0x30
 8005c8c:	d0a4      	beq.n	8005bd8 <_strtol_l.isra.0+0x48>
 8005c8e:	230a      	movs	r3, #10
 8005c90:	e7ad      	b.n	8005bee <_strtol_l.isra.0+0x5e>
 8005c92:	bf00      	nop
 8005c94:	08008ab1 	.word	0x08008ab1

08005c98 <_strtol_r>:
 8005c98:	f7ff bf7a 	b.w	8005b90 <_strtol_l.isra.0>

08005c9c <quorem>:
 8005c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	6903      	ldr	r3, [r0, #16]
 8005ca2:	690c      	ldr	r4, [r1, #16]
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	f2c0 8081 	blt.w	8005dae <quorem+0x112>
 8005cac:	3c01      	subs	r4, #1
 8005cae:	f101 0814 	add.w	r8, r1, #20
 8005cb2:	f100 0514 	add.w	r5, r0, #20
 8005cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ccc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cd4:	d331      	bcc.n	8005d3a <quorem+0x9e>
 8005cd6:	f04f 0e00 	mov.w	lr, #0
 8005cda:	4640      	mov	r0, r8
 8005cdc:	46ac      	mov	ip, r5
 8005cde:	46f2      	mov	sl, lr
 8005ce0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ce4:	b293      	uxth	r3, r2
 8005ce6:	fb06 e303 	mla	r3, r6, r3, lr
 8005cea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	ebaa 0303 	sub.w	r3, sl, r3
 8005cf4:	0c12      	lsrs	r2, r2, #16
 8005cf6:	f8dc a000 	ldr.w	sl, [ip]
 8005cfa:	fb06 e202 	mla	r2, r6, r2, lr
 8005cfe:	fa13 f38a 	uxtah	r3, r3, sl
 8005d02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d06:	fa1f fa82 	uxth.w	sl, r2
 8005d0a:	f8dc 2000 	ldr.w	r2, [ip]
 8005d0e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005d12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d1c:	4581      	cmp	r9, r0
 8005d1e:	f84c 3b04 	str.w	r3, [ip], #4
 8005d22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d26:	d2db      	bcs.n	8005ce0 <quorem+0x44>
 8005d28:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d2c:	b92b      	cbnz	r3, 8005d3a <quorem+0x9e>
 8005d2e:	9b01      	ldr	r3, [sp, #4]
 8005d30:	3b04      	subs	r3, #4
 8005d32:	429d      	cmp	r5, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	d32e      	bcc.n	8005d96 <quorem+0xfa>
 8005d38:	613c      	str	r4, [r7, #16]
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	f001 fc22 	bl	8007584 <__mcmp>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	db24      	blt.n	8005d8e <quorem+0xf2>
 8005d44:	3601      	adds	r6, #1
 8005d46:	4628      	mov	r0, r5
 8005d48:	f04f 0c00 	mov.w	ip, #0
 8005d4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d50:	f8d0 e000 	ldr.w	lr, [r0]
 8005d54:	b293      	uxth	r3, r2
 8005d56:	ebac 0303 	sub.w	r3, ip, r3
 8005d5a:	0c12      	lsrs	r2, r2, #16
 8005d5c:	fa13 f38e 	uxtah	r3, r3, lr
 8005d60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d6e:	45c1      	cmp	r9, r8
 8005d70:	f840 3b04 	str.w	r3, [r0], #4
 8005d74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d78:	d2e8      	bcs.n	8005d4c <quorem+0xb0>
 8005d7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d82:	b922      	cbnz	r2, 8005d8e <quorem+0xf2>
 8005d84:	3b04      	subs	r3, #4
 8005d86:	429d      	cmp	r5, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	d30a      	bcc.n	8005da2 <quorem+0x106>
 8005d8c:	613c      	str	r4, [r7, #16]
 8005d8e:	4630      	mov	r0, r6
 8005d90:	b003      	add	sp, #12
 8005d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	d1cc      	bne.n	8005d38 <quorem+0x9c>
 8005d9e:	3c01      	subs	r4, #1
 8005da0:	e7c7      	b.n	8005d32 <quorem+0x96>
 8005da2:	6812      	ldr	r2, [r2, #0]
 8005da4:	3b04      	subs	r3, #4
 8005da6:	2a00      	cmp	r2, #0
 8005da8:	d1f0      	bne.n	8005d8c <quorem+0xf0>
 8005daa:	3c01      	subs	r4, #1
 8005dac:	e7eb      	b.n	8005d86 <quorem+0xea>
 8005dae:	2000      	movs	r0, #0
 8005db0:	e7ee      	b.n	8005d90 <quorem+0xf4>
 8005db2:	0000      	movs	r0, r0
 8005db4:	0000      	movs	r0, r0
	...

08005db8 <_dtoa_r>:
 8005db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbc:	ec59 8b10 	vmov	r8, r9, d0
 8005dc0:	b095      	sub	sp, #84	; 0x54
 8005dc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dc4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8005dc6:	9107      	str	r1, [sp, #28]
 8005dc8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005dcc:	4606      	mov	r6, r0
 8005dce:	9209      	str	r2, [sp, #36]	; 0x24
 8005dd0:	9310      	str	r3, [sp, #64]	; 0x40
 8005dd2:	b975      	cbnz	r5, 8005df2 <_dtoa_r+0x3a>
 8005dd4:	2010      	movs	r0, #16
 8005dd6:	f001 f8e5 	bl	8006fa4 <malloc>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	6270      	str	r0, [r6, #36]	; 0x24
 8005dde:	b920      	cbnz	r0, 8005dea <_dtoa_r+0x32>
 8005de0:	4bab      	ldr	r3, [pc, #684]	; (8006090 <_dtoa_r+0x2d8>)
 8005de2:	21ea      	movs	r1, #234	; 0xea
 8005de4:	48ab      	ldr	r0, [pc, #684]	; (8006094 <_dtoa_r+0x2dc>)
 8005de6:	f002 f80f 	bl	8007e08 <__assert_func>
 8005dea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005dee:	6005      	str	r5, [r0, #0]
 8005df0:	60c5      	str	r5, [r0, #12]
 8005df2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005df4:	6819      	ldr	r1, [r3, #0]
 8005df6:	b151      	cbz	r1, 8005e0e <_dtoa_r+0x56>
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	604a      	str	r2, [r1, #4]
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4093      	lsls	r3, r2
 8005e00:	608b      	str	r3, [r1, #8]
 8005e02:	4630      	mov	r0, r6
 8005e04:	f001 f936 	bl	8007074 <_Bfree>
 8005e08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	f1b9 0300 	subs.w	r3, r9, #0
 8005e12:	bfbb      	ittet	lt
 8005e14:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e18:	9303      	strlt	r3, [sp, #12]
 8005e1a:	2300      	movge	r3, #0
 8005e1c:	2201      	movlt	r2, #1
 8005e1e:	bfac      	ite	ge
 8005e20:	6023      	strge	r3, [r4, #0]
 8005e22:	6022      	strlt	r2, [r4, #0]
 8005e24:	4b9c      	ldr	r3, [pc, #624]	; (8006098 <_dtoa_r+0x2e0>)
 8005e26:	9c03      	ldr	r4, [sp, #12]
 8005e28:	43a3      	bics	r3, r4
 8005e2a:	d11a      	bne.n	8005e62 <_dtoa_r+0xaa>
 8005e2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005e38:	ea53 0308 	orrs.w	r3, r3, r8
 8005e3c:	f000 8512 	beq.w	8006864 <_dtoa_r+0xaac>
 8005e40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e42:	b953      	cbnz	r3, 8005e5a <_dtoa_r+0xa2>
 8005e44:	4b95      	ldr	r3, [pc, #596]	; (800609c <_dtoa_r+0x2e4>)
 8005e46:	e01f      	b.n	8005e88 <_dtoa_r+0xd0>
 8005e48:	4b95      	ldr	r3, [pc, #596]	; (80060a0 <_dtoa_r+0x2e8>)
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	9800      	ldr	r0, [sp, #0]
 8005e54:	b015      	add	sp, #84	; 0x54
 8005e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5a:	4b90      	ldr	r3, [pc, #576]	; (800609c <_dtoa_r+0x2e4>)
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	3303      	adds	r3, #3
 8005e60:	e7f5      	b.n	8005e4e <_dtoa_r+0x96>
 8005e62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e6e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005e72:	d10b      	bne.n	8005e8c <_dtoa_r+0xd4>
 8005e74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e76:	2301      	movs	r3, #1
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 84ee 	beq.w	800685e <_dtoa_r+0xaa6>
 8005e82:	4888      	ldr	r0, [pc, #544]	; (80060a4 <_dtoa_r+0x2ec>)
 8005e84:	6018      	str	r0, [r3, #0]
 8005e86:	1e43      	subs	r3, r0, #1
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	e7e2      	b.n	8005e52 <_dtoa_r+0x9a>
 8005e8c:	a913      	add	r1, sp, #76	; 0x4c
 8005e8e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005e92:	aa12      	add	r2, sp, #72	; 0x48
 8005e94:	4630      	mov	r0, r6
 8005e96:	f001 fc95 	bl	80077c4 <__d2b>
 8005e9a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005ea2:	2900      	cmp	r1, #0
 8005ea4:	d047      	beq.n	8005f36 <_dtoa_r+0x17e>
 8005ea6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005ea8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005eac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005eb0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8005eb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005eb8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005ebc:	2400      	movs	r4, #0
 8005ebe:	ec43 2b16 	vmov	d6, r2, r3
 8005ec2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005ec6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8006078 <_dtoa_r+0x2c0>
 8005eca:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ece:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8006080 <_dtoa_r+0x2c8>
 8005ed2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005ed6:	eeb0 7b46 	vmov.f64	d7, d6
 8005eda:	ee06 1a90 	vmov	s13, r1
 8005ede:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8005ee2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8006088 <_dtoa_r+0x2d0>
 8005ee6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8005eea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005eee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef6:	ee16 ba90 	vmov	fp, s13
 8005efa:	9411      	str	r4, [sp, #68]	; 0x44
 8005efc:	d508      	bpl.n	8005f10 <_dtoa_r+0x158>
 8005efe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005f02:	eeb4 6b47 	vcmp.f64	d6, d7
 8005f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0a:	bf18      	it	ne
 8005f0c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005f10:	f1bb 0f16 	cmp.w	fp, #22
 8005f14:	d832      	bhi.n	8005f7c <_dtoa_r+0x1c4>
 8005f16:	4b64      	ldr	r3, [pc, #400]	; (80060a8 <_dtoa_r+0x2f0>)
 8005f18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f1c:	ed93 7b00 	vldr	d7, [r3]
 8005f20:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8005f24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f2c:	d501      	bpl.n	8005f32 <_dtoa_r+0x17a>
 8005f2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f32:	2300      	movs	r3, #0
 8005f34:	e023      	b.n	8005f7e <_dtoa_r+0x1c6>
 8005f36:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005f38:	4401      	add	r1, r0
 8005f3a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	bfc3      	ittte	gt
 8005f42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f46:	fa04 f303 	lslgt.w	r3, r4, r3
 8005f4a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8005f4e:	f1c3 0320 	rsble	r3, r3, #32
 8005f52:	bfc6      	itte	gt
 8005f54:	fa28 f804 	lsrgt.w	r8, r8, r4
 8005f58:	ea43 0308 	orrgt.w	r3, r3, r8
 8005f5c:	fa08 f303 	lslle.w	r3, r8, r3
 8005f60:	ee07 3a90 	vmov	s15, r3
 8005f64:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f68:	3901      	subs	r1, #1
 8005f6a:	ed8d 7b00 	vstr	d7, [sp]
 8005f6e:	9c01      	ldr	r4, [sp, #4]
 8005f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f74:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8005f78:	2401      	movs	r4, #1
 8005f7a:	e7a0      	b.n	8005ebe <_dtoa_r+0x106>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f80:	1a43      	subs	r3, r0, r1
 8005f82:	1e5a      	subs	r2, r3, #1
 8005f84:	bf45      	ittet	mi
 8005f86:	f1c3 0301 	rsbmi	r3, r3, #1
 8005f8a:	9305      	strmi	r3, [sp, #20]
 8005f8c:	2300      	movpl	r3, #0
 8005f8e:	2300      	movmi	r3, #0
 8005f90:	9206      	str	r2, [sp, #24]
 8005f92:	bf54      	ite	pl
 8005f94:	9305      	strpl	r3, [sp, #20]
 8005f96:	9306      	strmi	r3, [sp, #24]
 8005f98:	f1bb 0f00 	cmp.w	fp, #0
 8005f9c:	db18      	blt.n	8005fd0 <_dtoa_r+0x218>
 8005f9e:	9b06      	ldr	r3, [sp, #24]
 8005fa0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005fa4:	445b      	add	r3, fp
 8005fa6:	9306      	str	r3, [sp, #24]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9a07      	ldr	r2, [sp, #28]
 8005fac:	2a09      	cmp	r2, #9
 8005fae:	d849      	bhi.n	8006044 <_dtoa_r+0x28c>
 8005fb0:	2a05      	cmp	r2, #5
 8005fb2:	bfc4      	itt	gt
 8005fb4:	3a04      	subgt	r2, #4
 8005fb6:	9207      	strgt	r2, [sp, #28]
 8005fb8:	9a07      	ldr	r2, [sp, #28]
 8005fba:	f1a2 0202 	sub.w	r2, r2, #2
 8005fbe:	bfcc      	ite	gt
 8005fc0:	2400      	movgt	r4, #0
 8005fc2:	2401      	movle	r4, #1
 8005fc4:	2a03      	cmp	r2, #3
 8005fc6:	d848      	bhi.n	800605a <_dtoa_r+0x2a2>
 8005fc8:	e8df f002 	tbb	[pc, r2]
 8005fcc:	3a2c2e0b 	.word	0x3a2c2e0b
 8005fd0:	9b05      	ldr	r3, [sp, #20]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	eba3 030b 	sub.w	r3, r3, fp
 8005fd8:	9305      	str	r3, [sp, #20]
 8005fda:	920e      	str	r2, [sp, #56]	; 0x38
 8005fdc:	f1cb 0300 	rsb	r3, fp, #0
 8005fe0:	e7e3      	b.n	8005faa <_dtoa_r+0x1f2>
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	9208      	str	r2, [sp, #32]
 8005fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	dc39      	bgt.n	8006060 <_dtoa_r+0x2a8>
 8005fec:	f04f 0a01 	mov.w	sl, #1
 8005ff0:	46d1      	mov	r9, sl
 8005ff2:	4652      	mov	r2, sl
 8005ff4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005ff8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	6079      	str	r1, [r7, #4]
 8005ffe:	2004      	movs	r0, #4
 8006000:	f100 0c14 	add.w	ip, r0, #20
 8006004:	4594      	cmp	ip, r2
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	d92f      	bls.n	800606a <_dtoa_r+0x2b2>
 800600a:	4630      	mov	r0, r6
 800600c:	930c      	str	r3, [sp, #48]	; 0x30
 800600e:	f000 fff1 	bl	8006ff4 <_Balloc>
 8006012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006014:	9000      	str	r0, [sp, #0]
 8006016:	4602      	mov	r2, r0
 8006018:	2800      	cmp	r0, #0
 800601a:	d149      	bne.n	80060b0 <_dtoa_r+0x2f8>
 800601c:	4b23      	ldr	r3, [pc, #140]	; (80060ac <_dtoa_r+0x2f4>)
 800601e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006022:	e6df      	b.n	8005de4 <_dtoa_r+0x2c>
 8006024:	2201      	movs	r2, #1
 8006026:	e7dd      	b.n	8005fe4 <_dtoa_r+0x22c>
 8006028:	2200      	movs	r2, #0
 800602a:	9208      	str	r2, [sp, #32]
 800602c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800602e:	eb0b 0a02 	add.w	sl, fp, r2
 8006032:	f10a 0901 	add.w	r9, sl, #1
 8006036:	464a      	mov	r2, r9
 8006038:	2a01      	cmp	r2, #1
 800603a:	bfb8      	it	lt
 800603c:	2201      	movlt	r2, #1
 800603e:	e7db      	b.n	8005ff8 <_dtoa_r+0x240>
 8006040:	2201      	movs	r2, #1
 8006042:	e7f2      	b.n	800602a <_dtoa_r+0x272>
 8006044:	2401      	movs	r4, #1
 8006046:	2200      	movs	r2, #0
 8006048:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800604c:	f04f 3aff 	mov.w	sl, #4294967295
 8006050:	2100      	movs	r1, #0
 8006052:	46d1      	mov	r9, sl
 8006054:	2212      	movs	r2, #18
 8006056:	9109      	str	r1, [sp, #36]	; 0x24
 8006058:	e7ce      	b.n	8005ff8 <_dtoa_r+0x240>
 800605a:	2201      	movs	r2, #1
 800605c:	9208      	str	r2, [sp, #32]
 800605e:	e7f5      	b.n	800604c <_dtoa_r+0x294>
 8006060:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006064:	46d1      	mov	r9, sl
 8006066:	4652      	mov	r2, sl
 8006068:	e7c6      	b.n	8005ff8 <_dtoa_r+0x240>
 800606a:	3101      	adds	r1, #1
 800606c:	6079      	str	r1, [r7, #4]
 800606e:	0040      	lsls	r0, r0, #1
 8006070:	e7c6      	b.n	8006000 <_dtoa_r+0x248>
 8006072:	bf00      	nop
 8006074:	f3af 8000 	nop.w
 8006078:	636f4361 	.word	0x636f4361
 800607c:	3fd287a7 	.word	0x3fd287a7
 8006080:	8b60c8b3 	.word	0x8b60c8b3
 8006084:	3fc68a28 	.word	0x3fc68a28
 8006088:	509f79fb 	.word	0x509f79fb
 800608c:	3fd34413 	.word	0x3fd34413
 8006090:	08008bbe 	.word	0x08008bbe
 8006094:	08008bd5 	.word	0x08008bd5
 8006098:	7ff00000 	.word	0x7ff00000
 800609c:	08008bba 	.word	0x08008bba
 80060a0:	08008bb1 	.word	0x08008bb1
 80060a4:	08008a35 	.word	0x08008a35
 80060a8:	08008d50 	.word	0x08008d50
 80060ac:	08008c34 	.word	0x08008c34
 80060b0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80060b2:	9900      	ldr	r1, [sp, #0]
 80060b4:	6011      	str	r1, [r2, #0]
 80060b6:	f1b9 0f0e 	cmp.w	r9, #14
 80060ba:	d872      	bhi.n	80061a2 <_dtoa_r+0x3ea>
 80060bc:	2c00      	cmp	r4, #0
 80060be:	d070      	beq.n	80061a2 <_dtoa_r+0x3ea>
 80060c0:	f1bb 0f00 	cmp.w	fp, #0
 80060c4:	f340 80a6 	ble.w	8006214 <_dtoa_r+0x45c>
 80060c8:	49ca      	ldr	r1, [pc, #808]	; (80063f4 <_dtoa_r+0x63c>)
 80060ca:	f00b 020f 	and.w	r2, fp, #15
 80060ce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80060d2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80060d6:	ed92 7b00 	vldr	d7, [r2]
 80060da:	ea4f 112b 	mov.w	r1, fp, asr #4
 80060de:	f000 808d 	beq.w	80061fc <_dtoa_r+0x444>
 80060e2:	4ac5      	ldr	r2, [pc, #788]	; (80063f8 <_dtoa_r+0x640>)
 80060e4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80060e8:	ed92 6b08 	vldr	d6, [r2, #32]
 80060ec:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80060f0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80060f4:	f001 010f 	and.w	r1, r1, #15
 80060f8:	2203      	movs	r2, #3
 80060fa:	48bf      	ldr	r0, [pc, #764]	; (80063f8 <_dtoa_r+0x640>)
 80060fc:	2900      	cmp	r1, #0
 80060fe:	d17f      	bne.n	8006200 <_dtoa_r+0x448>
 8006100:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006104:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006108:	ed8d 7b02 	vstr	d7, [sp, #8]
 800610c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800610e:	2900      	cmp	r1, #0
 8006110:	f000 80b2 	beq.w	8006278 <_dtoa_r+0x4c0>
 8006114:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006118:	ed9d 7b02 	vldr	d7, [sp, #8]
 800611c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006124:	f140 80a8 	bpl.w	8006278 <_dtoa_r+0x4c0>
 8006128:	f1b9 0f00 	cmp.w	r9, #0
 800612c:	f000 80a4 	beq.w	8006278 <_dtoa_r+0x4c0>
 8006130:	f1ba 0f00 	cmp.w	sl, #0
 8006134:	dd31      	ble.n	800619a <_dtoa_r+0x3e2>
 8006136:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800613a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800613e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006142:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006146:	3201      	adds	r2, #1
 8006148:	4650      	mov	r0, sl
 800614a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800614e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006152:	ee07 2a90 	vmov	s15, r2
 8006156:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800615a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800615e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8006162:	9c03      	ldr	r4, [sp, #12]
 8006164:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006168:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800616c:	2800      	cmp	r0, #0
 800616e:	f040 8086 	bne.w	800627e <_dtoa_r+0x4c6>
 8006172:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006176:	ee36 6b47 	vsub.f64	d6, d6, d7
 800617a:	ec42 1b17 	vmov	d7, r1, r2
 800617e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006186:	f300 8272 	bgt.w	800666e <_dtoa_r+0x8b6>
 800618a:	eeb1 7b47 	vneg.f64	d7, d7
 800618e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006196:	f100 8267 	bmi.w	8006668 <_dtoa_r+0x8b0>
 800619a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800619e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80061a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80061a4:	2a00      	cmp	r2, #0
 80061a6:	f2c0 8129 	blt.w	80063fc <_dtoa_r+0x644>
 80061aa:	f1bb 0f0e 	cmp.w	fp, #14
 80061ae:	f300 8125 	bgt.w	80063fc <_dtoa_r+0x644>
 80061b2:	4b90      	ldr	r3, [pc, #576]	; (80063f4 <_dtoa_r+0x63c>)
 80061b4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061b8:	ed93 6b00 	vldr	d6, [r3]
 80061bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f280 80c3 	bge.w	800634a <_dtoa_r+0x592>
 80061c4:	f1b9 0f00 	cmp.w	r9, #0
 80061c8:	f300 80bf 	bgt.w	800634a <_dtoa_r+0x592>
 80061cc:	f040 824c 	bne.w	8006668 <_dtoa_r+0x8b0>
 80061d0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80061d4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80061d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80061e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e4:	464c      	mov	r4, r9
 80061e6:	464f      	mov	r7, r9
 80061e8:	f280 8222 	bge.w	8006630 <_dtoa_r+0x878>
 80061ec:	f8dd 8000 	ldr.w	r8, [sp]
 80061f0:	2331      	movs	r3, #49	; 0x31
 80061f2:	f808 3b01 	strb.w	r3, [r8], #1
 80061f6:	f10b 0b01 	add.w	fp, fp, #1
 80061fa:	e21e      	b.n	800663a <_dtoa_r+0x882>
 80061fc:	2202      	movs	r2, #2
 80061fe:	e77c      	b.n	80060fa <_dtoa_r+0x342>
 8006200:	07cc      	lsls	r4, r1, #31
 8006202:	d504      	bpl.n	800620e <_dtoa_r+0x456>
 8006204:	ed90 6b00 	vldr	d6, [r0]
 8006208:	3201      	adds	r2, #1
 800620a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800620e:	1049      	asrs	r1, r1, #1
 8006210:	3008      	adds	r0, #8
 8006212:	e773      	b.n	80060fc <_dtoa_r+0x344>
 8006214:	d02e      	beq.n	8006274 <_dtoa_r+0x4bc>
 8006216:	f1cb 0100 	rsb	r1, fp, #0
 800621a:	4a76      	ldr	r2, [pc, #472]	; (80063f4 <_dtoa_r+0x63c>)
 800621c:	f001 000f 	and.w	r0, r1, #15
 8006220:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006224:	ed92 7b00 	vldr	d7, [r2]
 8006228:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800622c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006230:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006234:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8006238:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800623c:	486e      	ldr	r0, [pc, #440]	; (80063f8 <_dtoa_r+0x640>)
 800623e:	1109      	asrs	r1, r1, #4
 8006240:	2400      	movs	r4, #0
 8006242:	2202      	movs	r2, #2
 8006244:	b939      	cbnz	r1, 8006256 <_dtoa_r+0x49e>
 8006246:	2c00      	cmp	r4, #0
 8006248:	f43f af60 	beq.w	800610c <_dtoa_r+0x354>
 800624c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006254:	e75a      	b.n	800610c <_dtoa_r+0x354>
 8006256:	07cf      	lsls	r7, r1, #31
 8006258:	d509      	bpl.n	800626e <_dtoa_r+0x4b6>
 800625a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800625e:	ed90 7b00 	vldr	d7, [r0]
 8006262:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006266:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800626a:	3201      	adds	r2, #1
 800626c:	2401      	movs	r4, #1
 800626e:	1049      	asrs	r1, r1, #1
 8006270:	3008      	adds	r0, #8
 8006272:	e7e7      	b.n	8006244 <_dtoa_r+0x48c>
 8006274:	2202      	movs	r2, #2
 8006276:	e749      	b.n	800610c <_dtoa_r+0x354>
 8006278:	465f      	mov	r7, fp
 800627a:	4648      	mov	r0, r9
 800627c:	e765      	b.n	800614a <_dtoa_r+0x392>
 800627e:	ec42 1b17 	vmov	d7, r1, r2
 8006282:	4a5c      	ldr	r2, [pc, #368]	; (80063f4 <_dtoa_r+0x63c>)
 8006284:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006288:	ed12 4b02 	vldr	d4, [r2, #-8]
 800628c:	9a00      	ldr	r2, [sp, #0]
 800628e:	1814      	adds	r4, r2, r0
 8006290:	9a08      	ldr	r2, [sp, #32]
 8006292:	b352      	cbz	r2, 80062ea <_dtoa_r+0x532>
 8006294:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006298:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800629c:	f8dd 8000 	ldr.w	r8, [sp]
 80062a0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80062a4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80062a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80062ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80062b0:	ee14 2a90 	vmov	r2, s9
 80062b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80062b8:	3230      	adds	r2, #48	; 0x30
 80062ba:	ee36 6b45 	vsub.f64	d6, d6, d5
 80062be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80062c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c6:	f808 2b01 	strb.w	r2, [r8], #1
 80062ca:	d439      	bmi.n	8006340 <_dtoa_r+0x588>
 80062cc:	ee32 5b46 	vsub.f64	d5, d2, d6
 80062d0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80062d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d8:	d472      	bmi.n	80063c0 <_dtoa_r+0x608>
 80062da:	45a0      	cmp	r8, r4
 80062dc:	f43f af5d 	beq.w	800619a <_dtoa_r+0x3e2>
 80062e0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80062e4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80062e8:	e7e0      	b.n	80062ac <_dtoa_r+0x4f4>
 80062ea:	f8dd 8000 	ldr.w	r8, [sp]
 80062ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 80062f2:	4621      	mov	r1, r4
 80062f4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80062f8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80062fc:	ee14 2a90 	vmov	r2, s9
 8006300:	3230      	adds	r2, #48	; 0x30
 8006302:	f808 2b01 	strb.w	r2, [r8], #1
 8006306:	45a0      	cmp	r8, r4
 8006308:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800630c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006310:	d118      	bne.n	8006344 <_dtoa_r+0x58c>
 8006312:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006316:	ee37 4b05 	vadd.f64	d4, d7, d5
 800631a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800631e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006322:	dc4d      	bgt.n	80063c0 <_dtoa_r+0x608>
 8006324:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006328:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800632c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006330:	f57f af33 	bpl.w	800619a <_dtoa_r+0x3e2>
 8006334:	4688      	mov	r8, r1
 8006336:	3901      	subs	r1, #1
 8006338:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800633c:	2b30      	cmp	r3, #48	; 0x30
 800633e:	d0f9      	beq.n	8006334 <_dtoa_r+0x57c>
 8006340:	46bb      	mov	fp, r7
 8006342:	e02a      	b.n	800639a <_dtoa_r+0x5e2>
 8006344:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006348:	e7d6      	b.n	80062f8 <_dtoa_r+0x540>
 800634a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800634e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006352:	f8dd 8000 	ldr.w	r8, [sp]
 8006356:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800635a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800635e:	ee15 3a10 	vmov	r3, s10
 8006362:	3330      	adds	r3, #48	; 0x30
 8006364:	f808 3b01 	strb.w	r3, [r8], #1
 8006368:	9b00      	ldr	r3, [sp, #0]
 800636a:	eba8 0303 	sub.w	r3, r8, r3
 800636e:	4599      	cmp	r9, r3
 8006370:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006374:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006378:	d133      	bne.n	80063e2 <_dtoa_r+0x62a>
 800637a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800637e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006386:	dc1a      	bgt.n	80063be <_dtoa_r+0x606>
 8006388:	eeb4 7b46 	vcmp.f64	d7, d6
 800638c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006390:	d103      	bne.n	800639a <_dtoa_r+0x5e2>
 8006392:	ee15 3a10 	vmov	r3, s10
 8006396:	07d9      	lsls	r1, r3, #31
 8006398:	d411      	bmi.n	80063be <_dtoa_r+0x606>
 800639a:	4629      	mov	r1, r5
 800639c:	4630      	mov	r0, r6
 800639e:	f000 fe69 	bl	8007074 <_Bfree>
 80063a2:	2300      	movs	r3, #0
 80063a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063a6:	f888 3000 	strb.w	r3, [r8]
 80063aa:	f10b 0301 	add.w	r3, fp, #1
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f43f ad4d 	beq.w	8005e52 <_dtoa_r+0x9a>
 80063b8:	f8c3 8000 	str.w	r8, [r3]
 80063bc:	e549      	b.n	8005e52 <_dtoa_r+0x9a>
 80063be:	465f      	mov	r7, fp
 80063c0:	4643      	mov	r3, r8
 80063c2:	4698      	mov	r8, r3
 80063c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063c8:	2a39      	cmp	r2, #57	; 0x39
 80063ca:	d106      	bne.n	80063da <_dtoa_r+0x622>
 80063cc:	9a00      	ldr	r2, [sp, #0]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d1f7      	bne.n	80063c2 <_dtoa_r+0x60a>
 80063d2:	9900      	ldr	r1, [sp, #0]
 80063d4:	2230      	movs	r2, #48	; 0x30
 80063d6:	3701      	adds	r7, #1
 80063d8:	700a      	strb	r2, [r1, #0]
 80063da:	781a      	ldrb	r2, [r3, #0]
 80063dc:	3201      	adds	r2, #1
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	e7ae      	b.n	8006340 <_dtoa_r+0x588>
 80063e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80063e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80063ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ee:	d1b2      	bne.n	8006356 <_dtoa_r+0x59e>
 80063f0:	e7d3      	b.n	800639a <_dtoa_r+0x5e2>
 80063f2:	bf00      	nop
 80063f4:	08008d50 	.word	0x08008d50
 80063f8:	08008d28 	.word	0x08008d28
 80063fc:	9908      	ldr	r1, [sp, #32]
 80063fe:	2900      	cmp	r1, #0
 8006400:	f000 80d1 	beq.w	80065a6 <_dtoa_r+0x7ee>
 8006404:	9907      	ldr	r1, [sp, #28]
 8006406:	2901      	cmp	r1, #1
 8006408:	f300 80b4 	bgt.w	8006574 <_dtoa_r+0x7bc>
 800640c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800640e:	2900      	cmp	r1, #0
 8006410:	f000 80ac 	beq.w	800656c <_dtoa_r+0x7b4>
 8006414:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006418:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800641c:	461c      	mov	r4, r3
 800641e:	930a      	str	r3, [sp, #40]	; 0x28
 8006420:	9b05      	ldr	r3, [sp, #20]
 8006422:	4413      	add	r3, r2
 8006424:	9305      	str	r3, [sp, #20]
 8006426:	9b06      	ldr	r3, [sp, #24]
 8006428:	2101      	movs	r1, #1
 800642a:	4413      	add	r3, r2
 800642c:	4630      	mov	r0, r6
 800642e:	9306      	str	r3, [sp, #24]
 8006430:	f000 ff26 	bl	8007280 <__i2b>
 8006434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006436:	4607      	mov	r7, r0
 8006438:	f1b8 0f00 	cmp.w	r8, #0
 800643c:	dd0d      	ble.n	800645a <_dtoa_r+0x6a2>
 800643e:	9a06      	ldr	r2, [sp, #24]
 8006440:	2a00      	cmp	r2, #0
 8006442:	dd0a      	ble.n	800645a <_dtoa_r+0x6a2>
 8006444:	4542      	cmp	r2, r8
 8006446:	9905      	ldr	r1, [sp, #20]
 8006448:	bfa8      	it	ge
 800644a:	4642      	movge	r2, r8
 800644c:	1a89      	subs	r1, r1, r2
 800644e:	9105      	str	r1, [sp, #20]
 8006450:	9906      	ldr	r1, [sp, #24]
 8006452:	eba8 0802 	sub.w	r8, r8, r2
 8006456:	1a8a      	subs	r2, r1, r2
 8006458:	9206      	str	r2, [sp, #24]
 800645a:	b303      	cbz	r3, 800649e <_dtoa_r+0x6e6>
 800645c:	9a08      	ldr	r2, [sp, #32]
 800645e:	2a00      	cmp	r2, #0
 8006460:	f000 80a6 	beq.w	80065b0 <_dtoa_r+0x7f8>
 8006464:	2c00      	cmp	r4, #0
 8006466:	dd13      	ble.n	8006490 <_dtoa_r+0x6d8>
 8006468:	4639      	mov	r1, r7
 800646a:	4622      	mov	r2, r4
 800646c:	4630      	mov	r0, r6
 800646e:	930c      	str	r3, [sp, #48]	; 0x30
 8006470:	f000 ffc2 	bl	80073f8 <__pow5mult>
 8006474:	462a      	mov	r2, r5
 8006476:	4601      	mov	r1, r0
 8006478:	4607      	mov	r7, r0
 800647a:	4630      	mov	r0, r6
 800647c:	f000 ff16 	bl	80072ac <__multiply>
 8006480:	4629      	mov	r1, r5
 8006482:	900a      	str	r0, [sp, #40]	; 0x28
 8006484:	4630      	mov	r0, r6
 8006486:	f000 fdf5 	bl	8007074 <_Bfree>
 800648a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800648c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800648e:	4615      	mov	r5, r2
 8006490:	1b1a      	subs	r2, r3, r4
 8006492:	d004      	beq.n	800649e <_dtoa_r+0x6e6>
 8006494:	4629      	mov	r1, r5
 8006496:	4630      	mov	r0, r6
 8006498:	f000 ffae 	bl	80073f8 <__pow5mult>
 800649c:	4605      	mov	r5, r0
 800649e:	2101      	movs	r1, #1
 80064a0:	4630      	mov	r0, r6
 80064a2:	f000 feed 	bl	8007280 <__i2b>
 80064a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	4604      	mov	r4, r0
 80064ac:	f340 8082 	ble.w	80065b4 <_dtoa_r+0x7fc>
 80064b0:	461a      	mov	r2, r3
 80064b2:	4601      	mov	r1, r0
 80064b4:	4630      	mov	r0, r6
 80064b6:	f000 ff9f 	bl	80073f8 <__pow5mult>
 80064ba:	9b07      	ldr	r3, [sp, #28]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	4604      	mov	r4, r0
 80064c0:	dd7b      	ble.n	80065ba <_dtoa_r+0x802>
 80064c2:	2300      	movs	r3, #0
 80064c4:	930a      	str	r3, [sp, #40]	; 0x28
 80064c6:	6922      	ldr	r2, [r4, #16]
 80064c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80064cc:	6910      	ldr	r0, [r2, #16]
 80064ce:	f000 fe87 	bl	80071e0 <__hi0bits>
 80064d2:	f1c0 0020 	rsb	r0, r0, #32
 80064d6:	9b06      	ldr	r3, [sp, #24]
 80064d8:	4418      	add	r0, r3
 80064da:	f010 001f 	ands.w	r0, r0, #31
 80064de:	f000 808d 	beq.w	80065fc <_dtoa_r+0x844>
 80064e2:	f1c0 0220 	rsb	r2, r0, #32
 80064e6:	2a04      	cmp	r2, #4
 80064e8:	f340 8086 	ble.w	80065f8 <_dtoa_r+0x840>
 80064ec:	f1c0 001c 	rsb	r0, r0, #28
 80064f0:	9b05      	ldr	r3, [sp, #20]
 80064f2:	4403      	add	r3, r0
 80064f4:	9305      	str	r3, [sp, #20]
 80064f6:	9b06      	ldr	r3, [sp, #24]
 80064f8:	4403      	add	r3, r0
 80064fa:	4480      	add	r8, r0
 80064fc:	9306      	str	r3, [sp, #24]
 80064fe:	9b05      	ldr	r3, [sp, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	dd05      	ble.n	8006510 <_dtoa_r+0x758>
 8006504:	4629      	mov	r1, r5
 8006506:	461a      	mov	r2, r3
 8006508:	4630      	mov	r0, r6
 800650a:	f000 ffcf 	bl	80074ac <__lshift>
 800650e:	4605      	mov	r5, r0
 8006510:	9b06      	ldr	r3, [sp, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	dd05      	ble.n	8006522 <_dtoa_r+0x76a>
 8006516:	4621      	mov	r1, r4
 8006518:	461a      	mov	r2, r3
 800651a:	4630      	mov	r0, r6
 800651c:	f000 ffc6 	bl	80074ac <__lshift>
 8006520:	4604      	mov	r4, r0
 8006522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d06b      	beq.n	8006600 <_dtoa_r+0x848>
 8006528:	4621      	mov	r1, r4
 800652a:	4628      	mov	r0, r5
 800652c:	f001 f82a 	bl	8007584 <__mcmp>
 8006530:	2800      	cmp	r0, #0
 8006532:	da65      	bge.n	8006600 <_dtoa_r+0x848>
 8006534:	2300      	movs	r3, #0
 8006536:	4629      	mov	r1, r5
 8006538:	220a      	movs	r2, #10
 800653a:	4630      	mov	r0, r6
 800653c:	f000 fdbc 	bl	80070b8 <__multadd>
 8006540:	9b08      	ldr	r3, [sp, #32]
 8006542:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006546:	4605      	mov	r5, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8192 	beq.w	8006872 <_dtoa_r+0xaba>
 800654e:	4639      	mov	r1, r7
 8006550:	2300      	movs	r3, #0
 8006552:	220a      	movs	r2, #10
 8006554:	4630      	mov	r0, r6
 8006556:	f000 fdaf 	bl	80070b8 <__multadd>
 800655a:	f1ba 0f00 	cmp.w	sl, #0
 800655e:	4607      	mov	r7, r0
 8006560:	f300 808e 	bgt.w	8006680 <_dtoa_r+0x8c8>
 8006564:	9b07      	ldr	r3, [sp, #28]
 8006566:	2b02      	cmp	r3, #2
 8006568:	dc51      	bgt.n	800660e <_dtoa_r+0x856>
 800656a:	e089      	b.n	8006680 <_dtoa_r+0x8c8>
 800656c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800656e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006572:	e751      	b.n	8006418 <_dtoa_r+0x660>
 8006574:	f109 34ff 	add.w	r4, r9, #4294967295
 8006578:	42a3      	cmp	r3, r4
 800657a:	bfbf      	itttt	lt
 800657c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800657e:	1ae3      	sublt	r3, r4, r3
 8006580:	18d2      	addlt	r2, r2, r3
 8006582:	4613      	movlt	r3, r2
 8006584:	bfb7      	itett	lt
 8006586:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006588:	1b1c      	subge	r4, r3, r4
 800658a:	4623      	movlt	r3, r4
 800658c:	2400      	movlt	r4, #0
 800658e:	f1b9 0f00 	cmp.w	r9, #0
 8006592:	bfb5      	itete	lt
 8006594:	9a05      	ldrlt	r2, [sp, #20]
 8006596:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800659a:	eba2 0809 	sublt.w	r8, r2, r9
 800659e:	464a      	movge	r2, r9
 80065a0:	bfb8      	it	lt
 80065a2:	2200      	movlt	r2, #0
 80065a4:	e73b      	b.n	800641e <_dtoa_r+0x666>
 80065a6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80065aa:	9f08      	ldr	r7, [sp, #32]
 80065ac:	461c      	mov	r4, r3
 80065ae:	e743      	b.n	8006438 <_dtoa_r+0x680>
 80065b0:	461a      	mov	r2, r3
 80065b2:	e76f      	b.n	8006494 <_dtoa_r+0x6dc>
 80065b4:	9b07      	ldr	r3, [sp, #28]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	dc18      	bgt.n	80065ec <_dtoa_r+0x834>
 80065ba:	9b02      	ldr	r3, [sp, #8]
 80065bc:	b9b3      	cbnz	r3, 80065ec <_dtoa_r+0x834>
 80065be:	9b03      	ldr	r3, [sp, #12]
 80065c0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80065c4:	b9a2      	cbnz	r2, 80065f0 <_dtoa_r+0x838>
 80065c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80065ca:	0d12      	lsrs	r2, r2, #20
 80065cc:	0512      	lsls	r2, r2, #20
 80065ce:	b18a      	cbz	r2, 80065f4 <_dtoa_r+0x83c>
 80065d0:	9b05      	ldr	r3, [sp, #20]
 80065d2:	3301      	adds	r3, #1
 80065d4:	9305      	str	r3, [sp, #20]
 80065d6:	9b06      	ldr	r3, [sp, #24]
 80065d8:	3301      	adds	r3, #1
 80065da:	9306      	str	r3, [sp, #24]
 80065dc:	2301      	movs	r3, #1
 80065de:	930a      	str	r3, [sp, #40]	; 0x28
 80065e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f47f af6f 	bne.w	80064c6 <_dtoa_r+0x70e>
 80065e8:	2001      	movs	r0, #1
 80065ea:	e774      	b.n	80064d6 <_dtoa_r+0x71e>
 80065ec:	2300      	movs	r3, #0
 80065ee:	e7f6      	b.n	80065de <_dtoa_r+0x826>
 80065f0:	9b02      	ldr	r3, [sp, #8]
 80065f2:	e7f4      	b.n	80065de <_dtoa_r+0x826>
 80065f4:	920a      	str	r2, [sp, #40]	; 0x28
 80065f6:	e7f3      	b.n	80065e0 <_dtoa_r+0x828>
 80065f8:	d081      	beq.n	80064fe <_dtoa_r+0x746>
 80065fa:	4610      	mov	r0, r2
 80065fc:	301c      	adds	r0, #28
 80065fe:	e777      	b.n	80064f0 <_dtoa_r+0x738>
 8006600:	f1b9 0f00 	cmp.w	r9, #0
 8006604:	dc37      	bgt.n	8006676 <_dtoa_r+0x8be>
 8006606:	9b07      	ldr	r3, [sp, #28]
 8006608:	2b02      	cmp	r3, #2
 800660a:	dd34      	ble.n	8006676 <_dtoa_r+0x8be>
 800660c:	46ca      	mov	sl, r9
 800660e:	f1ba 0f00 	cmp.w	sl, #0
 8006612:	d10d      	bne.n	8006630 <_dtoa_r+0x878>
 8006614:	4621      	mov	r1, r4
 8006616:	4653      	mov	r3, sl
 8006618:	2205      	movs	r2, #5
 800661a:	4630      	mov	r0, r6
 800661c:	f000 fd4c 	bl	80070b8 <__multadd>
 8006620:	4601      	mov	r1, r0
 8006622:	4604      	mov	r4, r0
 8006624:	4628      	mov	r0, r5
 8006626:	f000 ffad 	bl	8007584 <__mcmp>
 800662a:	2800      	cmp	r0, #0
 800662c:	f73f adde 	bgt.w	80061ec <_dtoa_r+0x434>
 8006630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006632:	f8dd 8000 	ldr.w	r8, [sp]
 8006636:	ea6f 0b03 	mvn.w	fp, r3
 800663a:	f04f 0900 	mov.w	r9, #0
 800663e:	4621      	mov	r1, r4
 8006640:	4630      	mov	r0, r6
 8006642:	f000 fd17 	bl	8007074 <_Bfree>
 8006646:	2f00      	cmp	r7, #0
 8006648:	f43f aea7 	beq.w	800639a <_dtoa_r+0x5e2>
 800664c:	f1b9 0f00 	cmp.w	r9, #0
 8006650:	d005      	beq.n	800665e <_dtoa_r+0x8a6>
 8006652:	45b9      	cmp	r9, r7
 8006654:	d003      	beq.n	800665e <_dtoa_r+0x8a6>
 8006656:	4649      	mov	r1, r9
 8006658:	4630      	mov	r0, r6
 800665a:	f000 fd0b 	bl	8007074 <_Bfree>
 800665e:	4639      	mov	r1, r7
 8006660:	4630      	mov	r0, r6
 8006662:	f000 fd07 	bl	8007074 <_Bfree>
 8006666:	e698      	b.n	800639a <_dtoa_r+0x5e2>
 8006668:	2400      	movs	r4, #0
 800666a:	4627      	mov	r7, r4
 800666c:	e7e0      	b.n	8006630 <_dtoa_r+0x878>
 800666e:	46bb      	mov	fp, r7
 8006670:	4604      	mov	r4, r0
 8006672:	4607      	mov	r7, r0
 8006674:	e5ba      	b.n	80061ec <_dtoa_r+0x434>
 8006676:	9b08      	ldr	r3, [sp, #32]
 8006678:	46ca      	mov	sl, r9
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 8100 	beq.w	8006880 <_dtoa_r+0xac8>
 8006680:	f1b8 0f00 	cmp.w	r8, #0
 8006684:	dd05      	ble.n	8006692 <_dtoa_r+0x8da>
 8006686:	4639      	mov	r1, r7
 8006688:	4642      	mov	r2, r8
 800668a:	4630      	mov	r0, r6
 800668c:	f000 ff0e 	bl	80074ac <__lshift>
 8006690:	4607      	mov	r7, r0
 8006692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006694:	2b00      	cmp	r3, #0
 8006696:	d05d      	beq.n	8006754 <_dtoa_r+0x99c>
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4630      	mov	r0, r6
 800669c:	f000 fcaa 	bl	8006ff4 <_Balloc>
 80066a0:	4680      	mov	r8, r0
 80066a2:	b928      	cbnz	r0, 80066b0 <_dtoa_r+0x8f8>
 80066a4:	4b82      	ldr	r3, [pc, #520]	; (80068b0 <_dtoa_r+0xaf8>)
 80066a6:	4602      	mov	r2, r0
 80066a8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066ac:	f7ff bb9a 	b.w	8005de4 <_dtoa_r+0x2c>
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	3202      	adds	r2, #2
 80066b4:	0092      	lsls	r2, r2, #2
 80066b6:	f107 010c 	add.w	r1, r7, #12
 80066ba:	300c      	adds	r0, #12
 80066bc:	f000 fc8c 	bl	8006fd8 <memcpy>
 80066c0:	2201      	movs	r2, #1
 80066c2:	4641      	mov	r1, r8
 80066c4:	4630      	mov	r0, r6
 80066c6:	f000 fef1 	bl	80074ac <__lshift>
 80066ca:	9b00      	ldr	r3, [sp, #0]
 80066cc:	3301      	adds	r3, #1
 80066ce:	9305      	str	r3, [sp, #20]
 80066d0:	9b00      	ldr	r3, [sp, #0]
 80066d2:	4453      	add	r3, sl
 80066d4:	9309      	str	r3, [sp, #36]	; 0x24
 80066d6:	9b02      	ldr	r3, [sp, #8]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	46b9      	mov	r9, r7
 80066de:	9308      	str	r3, [sp, #32]
 80066e0:	4607      	mov	r7, r0
 80066e2:	9b05      	ldr	r3, [sp, #20]
 80066e4:	4621      	mov	r1, r4
 80066e6:	3b01      	subs	r3, #1
 80066e8:	4628      	mov	r0, r5
 80066ea:	9302      	str	r3, [sp, #8]
 80066ec:	f7ff fad6 	bl	8005c9c <quorem>
 80066f0:	4603      	mov	r3, r0
 80066f2:	3330      	adds	r3, #48	; 0x30
 80066f4:	9006      	str	r0, [sp, #24]
 80066f6:	4649      	mov	r1, r9
 80066f8:	4628      	mov	r0, r5
 80066fa:	930a      	str	r3, [sp, #40]	; 0x28
 80066fc:	f000 ff42 	bl	8007584 <__mcmp>
 8006700:	463a      	mov	r2, r7
 8006702:	4682      	mov	sl, r0
 8006704:	4621      	mov	r1, r4
 8006706:	4630      	mov	r0, r6
 8006708:	f000 ff58 	bl	80075bc <__mdiff>
 800670c:	68c2      	ldr	r2, [r0, #12]
 800670e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006710:	4680      	mov	r8, r0
 8006712:	bb0a      	cbnz	r2, 8006758 <_dtoa_r+0x9a0>
 8006714:	4601      	mov	r1, r0
 8006716:	4628      	mov	r0, r5
 8006718:	f000 ff34 	bl	8007584 <__mcmp>
 800671c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800671e:	4602      	mov	r2, r0
 8006720:	4641      	mov	r1, r8
 8006722:	4630      	mov	r0, r6
 8006724:	920e      	str	r2, [sp, #56]	; 0x38
 8006726:	930a      	str	r3, [sp, #40]	; 0x28
 8006728:	f000 fca4 	bl	8007074 <_Bfree>
 800672c:	9b07      	ldr	r3, [sp, #28]
 800672e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006730:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006734:	ea43 0102 	orr.w	r1, r3, r2
 8006738:	9b08      	ldr	r3, [sp, #32]
 800673a:	430b      	orrs	r3, r1
 800673c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673e:	d10d      	bne.n	800675c <_dtoa_r+0x9a4>
 8006740:	2b39      	cmp	r3, #57	; 0x39
 8006742:	d029      	beq.n	8006798 <_dtoa_r+0x9e0>
 8006744:	f1ba 0f00 	cmp.w	sl, #0
 8006748:	dd01      	ble.n	800674e <_dtoa_r+0x996>
 800674a:	9b06      	ldr	r3, [sp, #24]
 800674c:	3331      	adds	r3, #49	; 0x31
 800674e:	9a02      	ldr	r2, [sp, #8]
 8006750:	7013      	strb	r3, [r2, #0]
 8006752:	e774      	b.n	800663e <_dtoa_r+0x886>
 8006754:	4638      	mov	r0, r7
 8006756:	e7b8      	b.n	80066ca <_dtoa_r+0x912>
 8006758:	2201      	movs	r2, #1
 800675a:	e7e1      	b.n	8006720 <_dtoa_r+0x968>
 800675c:	f1ba 0f00 	cmp.w	sl, #0
 8006760:	db06      	blt.n	8006770 <_dtoa_r+0x9b8>
 8006762:	9907      	ldr	r1, [sp, #28]
 8006764:	ea41 0a0a 	orr.w	sl, r1, sl
 8006768:	9908      	ldr	r1, [sp, #32]
 800676a:	ea5a 0101 	orrs.w	r1, sl, r1
 800676e:	d120      	bne.n	80067b2 <_dtoa_r+0x9fa>
 8006770:	2a00      	cmp	r2, #0
 8006772:	ddec      	ble.n	800674e <_dtoa_r+0x996>
 8006774:	4629      	mov	r1, r5
 8006776:	2201      	movs	r2, #1
 8006778:	4630      	mov	r0, r6
 800677a:	9305      	str	r3, [sp, #20]
 800677c:	f000 fe96 	bl	80074ac <__lshift>
 8006780:	4621      	mov	r1, r4
 8006782:	4605      	mov	r5, r0
 8006784:	f000 fefe 	bl	8007584 <__mcmp>
 8006788:	2800      	cmp	r0, #0
 800678a:	9b05      	ldr	r3, [sp, #20]
 800678c:	dc02      	bgt.n	8006794 <_dtoa_r+0x9dc>
 800678e:	d1de      	bne.n	800674e <_dtoa_r+0x996>
 8006790:	07da      	lsls	r2, r3, #31
 8006792:	d5dc      	bpl.n	800674e <_dtoa_r+0x996>
 8006794:	2b39      	cmp	r3, #57	; 0x39
 8006796:	d1d8      	bne.n	800674a <_dtoa_r+0x992>
 8006798:	9a02      	ldr	r2, [sp, #8]
 800679a:	2339      	movs	r3, #57	; 0x39
 800679c:	7013      	strb	r3, [r2, #0]
 800679e:	4643      	mov	r3, r8
 80067a0:	4698      	mov	r8, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80067a8:	2a39      	cmp	r2, #57	; 0x39
 80067aa:	d051      	beq.n	8006850 <_dtoa_r+0xa98>
 80067ac:	3201      	adds	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]
 80067b0:	e745      	b.n	800663e <_dtoa_r+0x886>
 80067b2:	2a00      	cmp	r2, #0
 80067b4:	dd03      	ble.n	80067be <_dtoa_r+0xa06>
 80067b6:	2b39      	cmp	r3, #57	; 0x39
 80067b8:	d0ee      	beq.n	8006798 <_dtoa_r+0x9e0>
 80067ba:	3301      	adds	r3, #1
 80067bc:	e7c7      	b.n	800674e <_dtoa_r+0x996>
 80067be:	9a05      	ldr	r2, [sp, #20]
 80067c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067c2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067c6:	428a      	cmp	r2, r1
 80067c8:	d02b      	beq.n	8006822 <_dtoa_r+0xa6a>
 80067ca:	4629      	mov	r1, r5
 80067cc:	2300      	movs	r3, #0
 80067ce:	220a      	movs	r2, #10
 80067d0:	4630      	mov	r0, r6
 80067d2:	f000 fc71 	bl	80070b8 <__multadd>
 80067d6:	45b9      	cmp	r9, r7
 80067d8:	4605      	mov	r5, r0
 80067da:	f04f 0300 	mov.w	r3, #0
 80067de:	f04f 020a 	mov.w	r2, #10
 80067e2:	4649      	mov	r1, r9
 80067e4:	4630      	mov	r0, r6
 80067e6:	d107      	bne.n	80067f8 <_dtoa_r+0xa40>
 80067e8:	f000 fc66 	bl	80070b8 <__multadd>
 80067ec:	4681      	mov	r9, r0
 80067ee:	4607      	mov	r7, r0
 80067f0:	9b05      	ldr	r3, [sp, #20]
 80067f2:	3301      	adds	r3, #1
 80067f4:	9305      	str	r3, [sp, #20]
 80067f6:	e774      	b.n	80066e2 <_dtoa_r+0x92a>
 80067f8:	f000 fc5e 	bl	80070b8 <__multadd>
 80067fc:	4639      	mov	r1, r7
 80067fe:	4681      	mov	r9, r0
 8006800:	2300      	movs	r3, #0
 8006802:	220a      	movs	r2, #10
 8006804:	4630      	mov	r0, r6
 8006806:	f000 fc57 	bl	80070b8 <__multadd>
 800680a:	4607      	mov	r7, r0
 800680c:	e7f0      	b.n	80067f0 <_dtoa_r+0xa38>
 800680e:	f1ba 0f00 	cmp.w	sl, #0
 8006812:	9a00      	ldr	r2, [sp, #0]
 8006814:	bfcc      	ite	gt
 8006816:	46d0      	movgt	r8, sl
 8006818:	f04f 0801 	movle.w	r8, #1
 800681c:	4490      	add	r8, r2
 800681e:	f04f 0900 	mov.w	r9, #0
 8006822:	4629      	mov	r1, r5
 8006824:	2201      	movs	r2, #1
 8006826:	4630      	mov	r0, r6
 8006828:	9302      	str	r3, [sp, #8]
 800682a:	f000 fe3f 	bl	80074ac <__lshift>
 800682e:	4621      	mov	r1, r4
 8006830:	4605      	mov	r5, r0
 8006832:	f000 fea7 	bl	8007584 <__mcmp>
 8006836:	2800      	cmp	r0, #0
 8006838:	dcb1      	bgt.n	800679e <_dtoa_r+0x9e6>
 800683a:	d102      	bne.n	8006842 <_dtoa_r+0xa8a>
 800683c:	9b02      	ldr	r3, [sp, #8]
 800683e:	07db      	lsls	r3, r3, #31
 8006840:	d4ad      	bmi.n	800679e <_dtoa_r+0x9e6>
 8006842:	4643      	mov	r3, r8
 8006844:	4698      	mov	r8, r3
 8006846:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800684a:	2a30      	cmp	r2, #48	; 0x30
 800684c:	d0fa      	beq.n	8006844 <_dtoa_r+0xa8c>
 800684e:	e6f6      	b.n	800663e <_dtoa_r+0x886>
 8006850:	9a00      	ldr	r2, [sp, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d1a4      	bne.n	80067a0 <_dtoa_r+0x9e8>
 8006856:	f10b 0b01 	add.w	fp, fp, #1
 800685a:	2331      	movs	r3, #49	; 0x31
 800685c:	e778      	b.n	8006750 <_dtoa_r+0x998>
 800685e:	4b15      	ldr	r3, [pc, #84]	; (80068b4 <_dtoa_r+0xafc>)
 8006860:	f7ff bb12 	b.w	8005e88 <_dtoa_r+0xd0>
 8006864:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006866:	2b00      	cmp	r3, #0
 8006868:	f47f aaee 	bne.w	8005e48 <_dtoa_r+0x90>
 800686c:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <_dtoa_r+0xb00>)
 800686e:	f7ff bb0b 	b.w	8005e88 <_dtoa_r+0xd0>
 8006872:	f1ba 0f00 	cmp.w	sl, #0
 8006876:	dc03      	bgt.n	8006880 <_dtoa_r+0xac8>
 8006878:	9b07      	ldr	r3, [sp, #28]
 800687a:	2b02      	cmp	r3, #2
 800687c:	f73f aec7 	bgt.w	800660e <_dtoa_r+0x856>
 8006880:	f8dd 8000 	ldr.w	r8, [sp]
 8006884:	4621      	mov	r1, r4
 8006886:	4628      	mov	r0, r5
 8006888:	f7ff fa08 	bl	8005c9c <quorem>
 800688c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006890:	f808 3b01 	strb.w	r3, [r8], #1
 8006894:	9a00      	ldr	r2, [sp, #0]
 8006896:	eba8 0202 	sub.w	r2, r8, r2
 800689a:	4592      	cmp	sl, r2
 800689c:	ddb7      	ble.n	800680e <_dtoa_r+0xa56>
 800689e:	4629      	mov	r1, r5
 80068a0:	2300      	movs	r3, #0
 80068a2:	220a      	movs	r2, #10
 80068a4:	4630      	mov	r0, r6
 80068a6:	f000 fc07 	bl	80070b8 <__multadd>
 80068aa:	4605      	mov	r5, r0
 80068ac:	e7ea      	b.n	8006884 <_dtoa_r+0xacc>
 80068ae:	bf00      	nop
 80068b0:	08008c34 	.word	0x08008c34
 80068b4:	08008a34 	.word	0x08008a34
 80068b8:	08008bb1 	.word	0x08008bb1

080068bc <rshift>:
 80068bc:	6903      	ldr	r3, [r0, #16]
 80068be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80068c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80068ca:	f100 0414 	add.w	r4, r0, #20
 80068ce:	dd45      	ble.n	800695c <rshift+0xa0>
 80068d0:	f011 011f 	ands.w	r1, r1, #31
 80068d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80068d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80068dc:	d10c      	bne.n	80068f8 <rshift+0x3c>
 80068de:	f100 0710 	add.w	r7, r0, #16
 80068e2:	4629      	mov	r1, r5
 80068e4:	42b1      	cmp	r1, r6
 80068e6:	d334      	bcc.n	8006952 <rshift+0x96>
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	1eea      	subs	r2, r5, #3
 80068ee:	4296      	cmp	r6, r2
 80068f0:	bf38      	it	cc
 80068f2:	2300      	movcc	r3, #0
 80068f4:	4423      	add	r3, r4
 80068f6:	e015      	b.n	8006924 <rshift+0x68>
 80068f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80068fc:	f1c1 0820 	rsb	r8, r1, #32
 8006900:	40cf      	lsrs	r7, r1
 8006902:	f105 0e04 	add.w	lr, r5, #4
 8006906:	46a1      	mov	r9, r4
 8006908:	4576      	cmp	r6, lr
 800690a:	46f4      	mov	ip, lr
 800690c:	d815      	bhi.n	800693a <rshift+0x7e>
 800690e:	1a9b      	subs	r3, r3, r2
 8006910:	009a      	lsls	r2, r3, #2
 8006912:	3a04      	subs	r2, #4
 8006914:	3501      	adds	r5, #1
 8006916:	42ae      	cmp	r6, r5
 8006918:	bf38      	it	cc
 800691a:	2200      	movcc	r2, #0
 800691c:	18a3      	adds	r3, r4, r2
 800691e:	50a7      	str	r7, [r4, r2]
 8006920:	b107      	cbz	r7, 8006924 <rshift+0x68>
 8006922:	3304      	adds	r3, #4
 8006924:	1b1a      	subs	r2, r3, r4
 8006926:	42a3      	cmp	r3, r4
 8006928:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800692c:	bf08      	it	eq
 800692e:	2300      	moveq	r3, #0
 8006930:	6102      	str	r2, [r0, #16]
 8006932:	bf08      	it	eq
 8006934:	6143      	streq	r3, [r0, #20]
 8006936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800693a:	f8dc c000 	ldr.w	ip, [ip]
 800693e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006942:	ea4c 0707 	orr.w	r7, ip, r7
 8006946:	f849 7b04 	str.w	r7, [r9], #4
 800694a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800694e:	40cf      	lsrs	r7, r1
 8006950:	e7da      	b.n	8006908 <rshift+0x4c>
 8006952:	f851 cb04 	ldr.w	ip, [r1], #4
 8006956:	f847 cf04 	str.w	ip, [r7, #4]!
 800695a:	e7c3      	b.n	80068e4 <rshift+0x28>
 800695c:	4623      	mov	r3, r4
 800695e:	e7e1      	b.n	8006924 <rshift+0x68>

08006960 <__hexdig_fun>:
 8006960:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006964:	2b09      	cmp	r3, #9
 8006966:	d802      	bhi.n	800696e <__hexdig_fun+0xe>
 8006968:	3820      	subs	r0, #32
 800696a:	b2c0      	uxtb	r0, r0
 800696c:	4770      	bx	lr
 800696e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006972:	2b05      	cmp	r3, #5
 8006974:	d801      	bhi.n	800697a <__hexdig_fun+0x1a>
 8006976:	3847      	subs	r0, #71	; 0x47
 8006978:	e7f7      	b.n	800696a <__hexdig_fun+0xa>
 800697a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800697e:	2b05      	cmp	r3, #5
 8006980:	d801      	bhi.n	8006986 <__hexdig_fun+0x26>
 8006982:	3827      	subs	r0, #39	; 0x27
 8006984:	e7f1      	b.n	800696a <__hexdig_fun+0xa>
 8006986:	2000      	movs	r0, #0
 8006988:	4770      	bx	lr
	...

0800698c <__gethex>:
 800698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	ed2d 8b02 	vpush	{d8}
 8006994:	b089      	sub	sp, #36	; 0x24
 8006996:	ee08 0a10 	vmov	s16, r0
 800699a:	9304      	str	r3, [sp, #16]
 800699c:	4bbc      	ldr	r3, [pc, #752]	; (8006c90 <__gethex+0x304>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	4618      	mov	r0, r3
 80069a4:	468b      	mov	fp, r1
 80069a6:	4690      	mov	r8, r2
 80069a8:	f7f9 fc54 	bl	8000254 <strlen>
 80069ac:	9b01      	ldr	r3, [sp, #4]
 80069ae:	f8db 2000 	ldr.w	r2, [fp]
 80069b2:	4403      	add	r3, r0
 80069b4:	4682      	mov	sl, r0
 80069b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80069ba:	9305      	str	r3, [sp, #20]
 80069bc:	1c93      	adds	r3, r2, #2
 80069be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80069c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80069c6:	32fe      	adds	r2, #254	; 0xfe
 80069c8:	18d1      	adds	r1, r2, r3
 80069ca:	461f      	mov	r7, r3
 80069cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80069d0:	9100      	str	r1, [sp, #0]
 80069d2:	2830      	cmp	r0, #48	; 0x30
 80069d4:	d0f8      	beq.n	80069c8 <__gethex+0x3c>
 80069d6:	f7ff ffc3 	bl	8006960 <__hexdig_fun>
 80069da:	4604      	mov	r4, r0
 80069dc:	2800      	cmp	r0, #0
 80069de:	d13a      	bne.n	8006a56 <__gethex+0xca>
 80069e0:	9901      	ldr	r1, [sp, #4]
 80069e2:	4652      	mov	r2, sl
 80069e4:	4638      	mov	r0, r7
 80069e6:	f001 f9ef 	bl	8007dc8 <strncmp>
 80069ea:	4605      	mov	r5, r0
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d168      	bne.n	8006ac2 <__gethex+0x136>
 80069f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80069f4:	eb07 060a 	add.w	r6, r7, sl
 80069f8:	f7ff ffb2 	bl	8006960 <__hexdig_fun>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d062      	beq.n	8006ac6 <__gethex+0x13a>
 8006a00:	4633      	mov	r3, r6
 8006a02:	7818      	ldrb	r0, [r3, #0]
 8006a04:	2830      	cmp	r0, #48	; 0x30
 8006a06:	461f      	mov	r7, r3
 8006a08:	f103 0301 	add.w	r3, r3, #1
 8006a0c:	d0f9      	beq.n	8006a02 <__gethex+0x76>
 8006a0e:	f7ff ffa7 	bl	8006960 <__hexdig_fun>
 8006a12:	2301      	movs	r3, #1
 8006a14:	fab0 f480 	clz	r4, r0
 8006a18:	0964      	lsrs	r4, r4, #5
 8006a1a:	4635      	mov	r5, r6
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	463a      	mov	r2, r7
 8006a20:	4616      	mov	r6, r2
 8006a22:	3201      	adds	r2, #1
 8006a24:	7830      	ldrb	r0, [r6, #0]
 8006a26:	f7ff ff9b 	bl	8006960 <__hexdig_fun>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d1f8      	bne.n	8006a20 <__gethex+0x94>
 8006a2e:	9901      	ldr	r1, [sp, #4]
 8006a30:	4652      	mov	r2, sl
 8006a32:	4630      	mov	r0, r6
 8006a34:	f001 f9c8 	bl	8007dc8 <strncmp>
 8006a38:	b980      	cbnz	r0, 8006a5c <__gethex+0xd0>
 8006a3a:	b94d      	cbnz	r5, 8006a50 <__gethex+0xc4>
 8006a3c:	eb06 050a 	add.w	r5, r6, sl
 8006a40:	462a      	mov	r2, r5
 8006a42:	4616      	mov	r6, r2
 8006a44:	3201      	adds	r2, #1
 8006a46:	7830      	ldrb	r0, [r6, #0]
 8006a48:	f7ff ff8a 	bl	8006960 <__hexdig_fun>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d1f8      	bne.n	8006a42 <__gethex+0xb6>
 8006a50:	1bad      	subs	r5, r5, r6
 8006a52:	00ad      	lsls	r5, r5, #2
 8006a54:	e004      	b.n	8006a60 <__gethex+0xd4>
 8006a56:	2400      	movs	r4, #0
 8006a58:	4625      	mov	r5, r4
 8006a5a:	e7e0      	b.n	8006a1e <__gethex+0x92>
 8006a5c:	2d00      	cmp	r5, #0
 8006a5e:	d1f7      	bne.n	8006a50 <__gethex+0xc4>
 8006a60:	7833      	ldrb	r3, [r6, #0]
 8006a62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a66:	2b50      	cmp	r3, #80	; 0x50
 8006a68:	d13b      	bne.n	8006ae2 <__gethex+0x156>
 8006a6a:	7873      	ldrb	r3, [r6, #1]
 8006a6c:	2b2b      	cmp	r3, #43	; 0x2b
 8006a6e:	d02c      	beq.n	8006aca <__gethex+0x13e>
 8006a70:	2b2d      	cmp	r3, #45	; 0x2d
 8006a72:	d02e      	beq.n	8006ad2 <__gethex+0x146>
 8006a74:	1c71      	adds	r1, r6, #1
 8006a76:	f04f 0900 	mov.w	r9, #0
 8006a7a:	7808      	ldrb	r0, [r1, #0]
 8006a7c:	f7ff ff70 	bl	8006960 <__hexdig_fun>
 8006a80:	1e43      	subs	r3, r0, #1
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b18      	cmp	r3, #24
 8006a86:	d82c      	bhi.n	8006ae2 <__gethex+0x156>
 8006a88:	f1a0 0210 	sub.w	r2, r0, #16
 8006a8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a90:	f7ff ff66 	bl	8006960 <__hexdig_fun>
 8006a94:	1e43      	subs	r3, r0, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b18      	cmp	r3, #24
 8006a9a:	d91d      	bls.n	8006ad8 <__gethex+0x14c>
 8006a9c:	f1b9 0f00 	cmp.w	r9, #0
 8006aa0:	d000      	beq.n	8006aa4 <__gethex+0x118>
 8006aa2:	4252      	negs	r2, r2
 8006aa4:	4415      	add	r5, r2
 8006aa6:	f8cb 1000 	str.w	r1, [fp]
 8006aaa:	b1e4      	cbz	r4, 8006ae6 <__gethex+0x15a>
 8006aac:	9b00      	ldr	r3, [sp, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	bf14      	ite	ne
 8006ab2:	2700      	movne	r7, #0
 8006ab4:	2706      	moveq	r7, #6
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	b009      	add	sp, #36	; 0x24
 8006aba:	ecbd 8b02 	vpop	{d8}
 8006abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac2:	463e      	mov	r6, r7
 8006ac4:	4625      	mov	r5, r4
 8006ac6:	2401      	movs	r4, #1
 8006ac8:	e7ca      	b.n	8006a60 <__gethex+0xd4>
 8006aca:	f04f 0900 	mov.w	r9, #0
 8006ace:	1cb1      	adds	r1, r6, #2
 8006ad0:	e7d3      	b.n	8006a7a <__gethex+0xee>
 8006ad2:	f04f 0901 	mov.w	r9, #1
 8006ad6:	e7fa      	b.n	8006ace <__gethex+0x142>
 8006ad8:	230a      	movs	r3, #10
 8006ada:	fb03 0202 	mla	r2, r3, r2, r0
 8006ade:	3a10      	subs	r2, #16
 8006ae0:	e7d4      	b.n	8006a8c <__gethex+0x100>
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	e7df      	b.n	8006aa6 <__gethex+0x11a>
 8006ae6:	1bf3      	subs	r3, r6, r7
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	4621      	mov	r1, r4
 8006aec:	2b07      	cmp	r3, #7
 8006aee:	dc0b      	bgt.n	8006b08 <__gethex+0x17c>
 8006af0:	ee18 0a10 	vmov	r0, s16
 8006af4:	f000 fa7e 	bl	8006ff4 <_Balloc>
 8006af8:	4604      	mov	r4, r0
 8006afa:	b940      	cbnz	r0, 8006b0e <__gethex+0x182>
 8006afc:	4b65      	ldr	r3, [pc, #404]	; (8006c94 <__gethex+0x308>)
 8006afe:	4602      	mov	r2, r0
 8006b00:	21de      	movs	r1, #222	; 0xde
 8006b02:	4865      	ldr	r0, [pc, #404]	; (8006c98 <__gethex+0x30c>)
 8006b04:	f001 f980 	bl	8007e08 <__assert_func>
 8006b08:	3101      	adds	r1, #1
 8006b0a:	105b      	asrs	r3, r3, #1
 8006b0c:	e7ee      	b.n	8006aec <__gethex+0x160>
 8006b0e:	f100 0914 	add.w	r9, r0, #20
 8006b12:	f04f 0b00 	mov.w	fp, #0
 8006b16:	f1ca 0301 	rsb	r3, sl, #1
 8006b1a:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b1e:	f8cd b000 	str.w	fp, [sp]
 8006b22:	9306      	str	r3, [sp, #24]
 8006b24:	42b7      	cmp	r7, r6
 8006b26:	d340      	bcc.n	8006baa <__gethex+0x21e>
 8006b28:	9802      	ldr	r0, [sp, #8]
 8006b2a:	9b00      	ldr	r3, [sp, #0]
 8006b2c:	f840 3b04 	str.w	r3, [r0], #4
 8006b30:	eba0 0009 	sub.w	r0, r0, r9
 8006b34:	1080      	asrs	r0, r0, #2
 8006b36:	0146      	lsls	r6, r0, #5
 8006b38:	6120      	str	r0, [r4, #16]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fb50 	bl	80071e0 <__hi0bits>
 8006b40:	1a30      	subs	r0, r6, r0
 8006b42:	f8d8 6000 	ldr.w	r6, [r8]
 8006b46:	42b0      	cmp	r0, r6
 8006b48:	dd63      	ble.n	8006c12 <__gethex+0x286>
 8006b4a:	1b87      	subs	r7, r0, r6
 8006b4c:	4639      	mov	r1, r7
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f000 feeb 	bl	800792a <__any_on>
 8006b54:	4682      	mov	sl, r0
 8006b56:	b1a8      	cbz	r0, 8006b84 <__gethex+0x1f8>
 8006b58:	1e7b      	subs	r3, r7, #1
 8006b5a:	1159      	asrs	r1, r3, #5
 8006b5c:	f003 021f 	and.w	r2, r3, #31
 8006b60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006b64:	f04f 0a01 	mov.w	sl, #1
 8006b68:	fa0a f202 	lsl.w	r2, sl, r2
 8006b6c:	420a      	tst	r2, r1
 8006b6e:	d009      	beq.n	8006b84 <__gethex+0x1f8>
 8006b70:	4553      	cmp	r3, sl
 8006b72:	dd05      	ble.n	8006b80 <__gethex+0x1f4>
 8006b74:	1eb9      	subs	r1, r7, #2
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 fed7 	bl	800792a <__any_on>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d145      	bne.n	8006c0c <__gethex+0x280>
 8006b80:	f04f 0a02 	mov.w	sl, #2
 8006b84:	4639      	mov	r1, r7
 8006b86:	4620      	mov	r0, r4
 8006b88:	f7ff fe98 	bl	80068bc <rshift>
 8006b8c:	443d      	add	r5, r7
 8006b8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b92:	42ab      	cmp	r3, r5
 8006b94:	da4c      	bge.n	8006c30 <__gethex+0x2a4>
 8006b96:	ee18 0a10 	vmov	r0, s16
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	f000 fa6a 	bl	8007074 <_Bfree>
 8006ba0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	27a3      	movs	r7, #163	; 0xa3
 8006ba8:	e785      	b.n	8006ab6 <__gethex+0x12a>
 8006baa:	1e73      	subs	r3, r6, #1
 8006bac:	9a05      	ldr	r2, [sp, #20]
 8006bae:	9303      	str	r3, [sp, #12]
 8006bb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d019      	beq.n	8006bec <__gethex+0x260>
 8006bb8:	f1bb 0f20 	cmp.w	fp, #32
 8006bbc:	d107      	bne.n	8006bce <__gethex+0x242>
 8006bbe:	9b02      	ldr	r3, [sp, #8]
 8006bc0:	9a00      	ldr	r2, [sp, #0]
 8006bc2:	f843 2b04 	str.w	r2, [r3], #4
 8006bc6:	9302      	str	r3, [sp, #8]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	469b      	mov	fp, r3
 8006bce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006bd2:	f7ff fec5 	bl	8006960 <__hexdig_fun>
 8006bd6:	9b00      	ldr	r3, [sp, #0]
 8006bd8:	f000 000f 	and.w	r0, r0, #15
 8006bdc:	fa00 f00b 	lsl.w	r0, r0, fp
 8006be0:	4303      	orrs	r3, r0
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	f10b 0b04 	add.w	fp, fp, #4
 8006be8:	9b03      	ldr	r3, [sp, #12]
 8006bea:	e00d      	b.n	8006c08 <__gethex+0x27c>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	9a06      	ldr	r2, [sp, #24]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	42bb      	cmp	r3, r7
 8006bf4:	d3e0      	bcc.n	8006bb8 <__gethex+0x22c>
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	9901      	ldr	r1, [sp, #4]
 8006bfa:	9307      	str	r3, [sp, #28]
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	f001 f8e3 	bl	8007dc8 <strncmp>
 8006c02:	9b07      	ldr	r3, [sp, #28]
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d1d7      	bne.n	8006bb8 <__gethex+0x22c>
 8006c08:	461e      	mov	r6, r3
 8006c0a:	e78b      	b.n	8006b24 <__gethex+0x198>
 8006c0c:	f04f 0a03 	mov.w	sl, #3
 8006c10:	e7b8      	b.n	8006b84 <__gethex+0x1f8>
 8006c12:	da0a      	bge.n	8006c2a <__gethex+0x29e>
 8006c14:	1a37      	subs	r7, r6, r0
 8006c16:	4621      	mov	r1, r4
 8006c18:	ee18 0a10 	vmov	r0, s16
 8006c1c:	463a      	mov	r2, r7
 8006c1e:	f000 fc45 	bl	80074ac <__lshift>
 8006c22:	1bed      	subs	r5, r5, r7
 8006c24:	4604      	mov	r4, r0
 8006c26:	f100 0914 	add.w	r9, r0, #20
 8006c2a:	f04f 0a00 	mov.w	sl, #0
 8006c2e:	e7ae      	b.n	8006b8e <__gethex+0x202>
 8006c30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006c34:	42a8      	cmp	r0, r5
 8006c36:	dd72      	ble.n	8006d1e <__gethex+0x392>
 8006c38:	1b45      	subs	r5, r0, r5
 8006c3a:	42ae      	cmp	r6, r5
 8006c3c:	dc36      	bgt.n	8006cac <__gethex+0x320>
 8006c3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d02a      	beq.n	8006c9c <__gethex+0x310>
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d02c      	beq.n	8006ca4 <__gethex+0x318>
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d115      	bne.n	8006c7a <__gethex+0x2ee>
 8006c4e:	42ae      	cmp	r6, r5
 8006c50:	d113      	bne.n	8006c7a <__gethex+0x2ee>
 8006c52:	2e01      	cmp	r6, #1
 8006c54:	d10b      	bne.n	8006c6e <__gethex+0x2e2>
 8006c56:	9a04      	ldr	r2, [sp, #16]
 8006c58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	2301      	movs	r3, #1
 8006c60:	6123      	str	r3, [r4, #16]
 8006c62:	f8c9 3000 	str.w	r3, [r9]
 8006c66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c68:	2762      	movs	r7, #98	; 0x62
 8006c6a:	601c      	str	r4, [r3, #0]
 8006c6c:	e723      	b.n	8006ab6 <__gethex+0x12a>
 8006c6e:	1e71      	subs	r1, r6, #1
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fe5a 	bl	800792a <__any_on>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d1ed      	bne.n	8006c56 <__gethex+0x2ca>
 8006c7a:	ee18 0a10 	vmov	r0, s16
 8006c7e:	4621      	mov	r1, r4
 8006c80:	f000 f9f8 	bl	8007074 <_Bfree>
 8006c84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c86:	2300      	movs	r3, #0
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	2750      	movs	r7, #80	; 0x50
 8006c8c:	e713      	b.n	8006ab6 <__gethex+0x12a>
 8006c8e:	bf00      	nop
 8006c90:	08008cb0 	.word	0x08008cb0
 8006c94:	08008c34 	.word	0x08008c34
 8006c98:	08008c45 	.word	0x08008c45
 8006c9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1eb      	bne.n	8006c7a <__gethex+0x2ee>
 8006ca2:	e7d8      	b.n	8006c56 <__gethex+0x2ca>
 8006ca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1d5      	bne.n	8006c56 <__gethex+0x2ca>
 8006caa:	e7e6      	b.n	8006c7a <__gethex+0x2ee>
 8006cac:	1e6f      	subs	r7, r5, #1
 8006cae:	f1ba 0f00 	cmp.w	sl, #0
 8006cb2:	d131      	bne.n	8006d18 <__gethex+0x38c>
 8006cb4:	b127      	cbz	r7, 8006cc0 <__gethex+0x334>
 8006cb6:	4639      	mov	r1, r7
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 fe36 	bl	800792a <__any_on>
 8006cbe:	4682      	mov	sl, r0
 8006cc0:	117b      	asrs	r3, r7, #5
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006cc8:	f007 071f 	and.w	r7, r7, #31
 8006ccc:	fa01 f707 	lsl.w	r7, r1, r7
 8006cd0:	421f      	tst	r7, r3
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	bf18      	it	ne
 8006cd8:	f04a 0a02 	orrne.w	sl, sl, #2
 8006cdc:	1b76      	subs	r6, r6, r5
 8006cde:	f7ff fded 	bl	80068bc <rshift>
 8006ce2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006ce6:	2702      	movs	r7, #2
 8006ce8:	f1ba 0f00 	cmp.w	sl, #0
 8006cec:	d048      	beq.n	8006d80 <__gethex+0x3f4>
 8006cee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d015      	beq.n	8006d22 <__gethex+0x396>
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d017      	beq.n	8006d2a <__gethex+0x39e>
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d109      	bne.n	8006d12 <__gethex+0x386>
 8006cfe:	f01a 0f02 	tst.w	sl, #2
 8006d02:	d006      	beq.n	8006d12 <__gethex+0x386>
 8006d04:	f8d9 0000 	ldr.w	r0, [r9]
 8006d08:	ea4a 0a00 	orr.w	sl, sl, r0
 8006d0c:	f01a 0f01 	tst.w	sl, #1
 8006d10:	d10e      	bne.n	8006d30 <__gethex+0x3a4>
 8006d12:	f047 0710 	orr.w	r7, r7, #16
 8006d16:	e033      	b.n	8006d80 <__gethex+0x3f4>
 8006d18:	f04f 0a01 	mov.w	sl, #1
 8006d1c:	e7d0      	b.n	8006cc0 <__gethex+0x334>
 8006d1e:	2701      	movs	r7, #1
 8006d20:	e7e2      	b.n	8006ce8 <__gethex+0x35c>
 8006d22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d24:	f1c3 0301 	rsb	r3, r3, #1
 8006d28:	9315      	str	r3, [sp, #84]	; 0x54
 8006d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <__gethex+0x386>
 8006d30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006d34:	f104 0314 	add.w	r3, r4, #20
 8006d38:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006d3c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006d40:	f04f 0c00 	mov.w	ip, #0
 8006d44:	4618      	mov	r0, r3
 8006d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006d4e:	d01c      	beq.n	8006d8a <__gethex+0x3fe>
 8006d50:	3201      	adds	r2, #1
 8006d52:	6002      	str	r2, [r0, #0]
 8006d54:	2f02      	cmp	r7, #2
 8006d56:	f104 0314 	add.w	r3, r4, #20
 8006d5a:	d13f      	bne.n	8006ddc <__gethex+0x450>
 8006d5c:	f8d8 2000 	ldr.w	r2, [r8]
 8006d60:	3a01      	subs	r2, #1
 8006d62:	42b2      	cmp	r2, r6
 8006d64:	d10a      	bne.n	8006d7c <__gethex+0x3f0>
 8006d66:	1171      	asrs	r1, r6, #5
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d6e:	f006 061f 	and.w	r6, r6, #31
 8006d72:	fa02 f606 	lsl.w	r6, r2, r6
 8006d76:	421e      	tst	r6, r3
 8006d78:	bf18      	it	ne
 8006d7a:	4617      	movne	r7, r2
 8006d7c:	f047 0720 	orr.w	r7, r7, #32
 8006d80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d82:	601c      	str	r4, [r3, #0]
 8006d84:	9b04      	ldr	r3, [sp, #16]
 8006d86:	601d      	str	r5, [r3, #0]
 8006d88:	e695      	b.n	8006ab6 <__gethex+0x12a>
 8006d8a:	4299      	cmp	r1, r3
 8006d8c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d90:	d8d8      	bhi.n	8006d44 <__gethex+0x3b8>
 8006d92:	68a3      	ldr	r3, [r4, #8]
 8006d94:	459b      	cmp	fp, r3
 8006d96:	db19      	blt.n	8006dcc <__gethex+0x440>
 8006d98:	6861      	ldr	r1, [r4, #4]
 8006d9a:	ee18 0a10 	vmov	r0, s16
 8006d9e:	3101      	adds	r1, #1
 8006da0:	f000 f928 	bl	8006ff4 <_Balloc>
 8006da4:	4681      	mov	r9, r0
 8006da6:	b918      	cbnz	r0, 8006db0 <__gethex+0x424>
 8006da8:	4b1a      	ldr	r3, [pc, #104]	; (8006e14 <__gethex+0x488>)
 8006daa:	4602      	mov	r2, r0
 8006dac:	2184      	movs	r1, #132	; 0x84
 8006dae:	e6a8      	b.n	8006b02 <__gethex+0x176>
 8006db0:	6922      	ldr	r2, [r4, #16]
 8006db2:	3202      	adds	r2, #2
 8006db4:	f104 010c 	add.w	r1, r4, #12
 8006db8:	0092      	lsls	r2, r2, #2
 8006dba:	300c      	adds	r0, #12
 8006dbc:	f000 f90c 	bl	8006fd8 <memcpy>
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	ee18 0a10 	vmov	r0, s16
 8006dc6:	f000 f955 	bl	8007074 <_Bfree>
 8006dca:	464c      	mov	r4, r9
 8006dcc:	6923      	ldr	r3, [r4, #16]
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006dd4:	6122      	str	r2, [r4, #16]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	615a      	str	r2, [r3, #20]
 8006dda:	e7bb      	b.n	8006d54 <__gethex+0x3c8>
 8006ddc:	6922      	ldr	r2, [r4, #16]
 8006dde:	455a      	cmp	r2, fp
 8006de0:	dd0b      	ble.n	8006dfa <__gethex+0x46e>
 8006de2:	2101      	movs	r1, #1
 8006de4:	4620      	mov	r0, r4
 8006de6:	f7ff fd69 	bl	80068bc <rshift>
 8006dea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dee:	3501      	adds	r5, #1
 8006df0:	42ab      	cmp	r3, r5
 8006df2:	f6ff aed0 	blt.w	8006b96 <__gethex+0x20a>
 8006df6:	2701      	movs	r7, #1
 8006df8:	e7c0      	b.n	8006d7c <__gethex+0x3f0>
 8006dfa:	f016 061f 	ands.w	r6, r6, #31
 8006dfe:	d0fa      	beq.n	8006df6 <__gethex+0x46a>
 8006e00:	449a      	add	sl, r3
 8006e02:	f1c6 0620 	rsb	r6, r6, #32
 8006e06:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006e0a:	f000 f9e9 	bl	80071e0 <__hi0bits>
 8006e0e:	42b0      	cmp	r0, r6
 8006e10:	dbe7      	blt.n	8006de2 <__gethex+0x456>
 8006e12:	e7f0      	b.n	8006df6 <__gethex+0x46a>
 8006e14:	08008c34 	.word	0x08008c34

08006e18 <L_shift>:
 8006e18:	f1c2 0208 	rsb	r2, r2, #8
 8006e1c:	0092      	lsls	r2, r2, #2
 8006e1e:	b570      	push	{r4, r5, r6, lr}
 8006e20:	f1c2 0620 	rsb	r6, r2, #32
 8006e24:	6843      	ldr	r3, [r0, #4]
 8006e26:	6804      	ldr	r4, [r0, #0]
 8006e28:	fa03 f506 	lsl.w	r5, r3, r6
 8006e2c:	432c      	orrs	r4, r5
 8006e2e:	40d3      	lsrs	r3, r2
 8006e30:	6004      	str	r4, [r0, #0]
 8006e32:	f840 3f04 	str.w	r3, [r0, #4]!
 8006e36:	4288      	cmp	r0, r1
 8006e38:	d3f4      	bcc.n	8006e24 <L_shift+0xc>
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}

08006e3c <__match>:
 8006e3c:	b530      	push	{r4, r5, lr}
 8006e3e:	6803      	ldr	r3, [r0, #0]
 8006e40:	3301      	adds	r3, #1
 8006e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e46:	b914      	cbnz	r4, 8006e4e <__match+0x12>
 8006e48:	6003      	str	r3, [r0, #0]
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	bd30      	pop	{r4, r5, pc}
 8006e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006e56:	2d19      	cmp	r5, #25
 8006e58:	bf98      	it	ls
 8006e5a:	3220      	addls	r2, #32
 8006e5c:	42a2      	cmp	r2, r4
 8006e5e:	d0f0      	beq.n	8006e42 <__match+0x6>
 8006e60:	2000      	movs	r0, #0
 8006e62:	e7f3      	b.n	8006e4c <__match+0x10>

08006e64 <__hexnan>:
 8006e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e68:	680b      	ldr	r3, [r1, #0]
 8006e6a:	6801      	ldr	r1, [r0, #0]
 8006e6c:	115e      	asrs	r6, r3, #5
 8006e6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e72:	f013 031f 	ands.w	r3, r3, #31
 8006e76:	b087      	sub	sp, #28
 8006e78:	bf18      	it	ne
 8006e7a:	3604      	addne	r6, #4
 8006e7c:	2500      	movs	r5, #0
 8006e7e:	1f37      	subs	r7, r6, #4
 8006e80:	4682      	mov	sl, r0
 8006e82:	4690      	mov	r8, r2
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	f846 5c04 	str.w	r5, [r6, #-4]
 8006e8a:	46b9      	mov	r9, r7
 8006e8c:	463c      	mov	r4, r7
 8006e8e:	9502      	str	r5, [sp, #8]
 8006e90:	46ab      	mov	fp, r5
 8006e92:	784a      	ldrb	r2, [r1, #1]
 8006e94:	1c4b      	adds	r3, r1, #1
 8006e96:	9303      	str	r3, [sp, #12]
 8006e98:	b342      	cbz	r2, 8006eec <__hexnan+0x88>
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	9105      	str	r1, [sp, #20]
 8006e9e:	9204      	str	r2, [sp, #16]
 8006ea0:	f7ff fd5e 	bl	8006960 <__hexdig_fun>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d14f      	bne.n	8006f48 <__hexnan+0xe4>
 8006ea8:	9a04      	ldr	r2, [sp, #16]
 8006eaa:	9905      	ldr	r1, [sp, #20]
 8006eac:	2a20      	cmp	r2, #32
 8006eae:	d818      	bhi.n	8006ee2 <__hexnan+0x7e>
 8006eb0:	9b02      	ldr	r3, [sp, #8]
 8006eb2:	459b      	cmp	fp, r3
 8006eb4:	dd13      	ble.n	8006ede <__hexnan+0x7a>
 8006eb6:	454c      	cmp	r4, r9
 8006eb8:	d206      	bcs.n	8006ec8 <__hexnan+0x64>
 8006eba:	2d07      	cmp	r5, #7
 8006ebc:	dc04      	bgt.n	8006ec8 <__hexnan+0x64>
 8006ebe:	462a      	mov	r2, r5
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f7ff ffa8 	bl	8006e18 <L_shift>
 8006ec8:	4544      	cmp	r4, r8
 8006eca:	d950      	bls.n	8006f6e <__hexnan+0x10a>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f1a4 0904 	sub.w	r9, r4, #4
 8006ed2:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ed6:	f8cd b008 	str.w	fp, [sp, #8]
 8006eda:	464c      	mov	r4, r9
 8006edc:	461d      	mov	r5, r3
 8006ede:	9903      	ldr	r1, [sp, #12]
 8006ee0:	e7d7      	b.n	8006e92 <__hexnan+0x2e>
 8006ee2:	2a29      	cmp	r2, #41	; 0x29
 8006ee4:	d156      	bne.n	8006f94 <__hexnan+0x130>
 8006ee6:	3102      	adds	r1, #2
 8006ee8:	f8ca 1000 	str.w	r1, [sl]
 8006eec:	f1bb 0f00 	cmp.w	fp, #0
 8006ef0:	d050      	beq.n	8006f94 <__hexnan+0x130>
 8006ef2:	454c      	cmp	r4, r9
 8006ef4:	d206      	bcs.n	8006f04 <__hexnan+0xa0>
 8006ef6:	2d07      	cmp	r5, #7
 8006ef8:	dc04      	bgt.n	8006f04 <__hexnan+0xa0>
 8006efa:	462a      	mov	r2, r5
 8006efc:	4649      	mov	r1, r9
 8006efe:	4620      	mov	r0, r4
 8006f00:	f7ff ff8a 	bl	8006e18 <L_shift>
 8006f04:	4544      	cmp	r4, r8
 8006f06:	d934      	bls.n	8006f72 <__hexnan+0x10e>
 8006f08:	f1a8 0204 	sub.w	r2, r8, #4
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006f12:	f842 1f04 	str.w	r1, [r2, #4]!
 8006f16:	429f      	cmp	r7, r3
 8006f18:	d2f9      	bcs.n	8006f0e <__hexnan+0xaa>
 8006f1a:	1b3b      	subs	r3, r7, r4
 8006f1c:	f023 0303 	bic.w	r3, r3, #3
 8006f20:	3304      	adds	r3, #4
 8006f22:	3401      	adds	r4, #1
 8006f24:	3e03      	subs	r6, #3
 8006f26:	42b4      	cmp	r4, r6
 8006f28:	bf88      	it	hi
 8006f2a:	2304      	movhi	r3, #4
 8006f2c:	4443      	add	r3, r8
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f843 2b04 	str.w	r2, [r3], #4
 8006f34:	429f      	cmp	r7, r3
 8006f36:	d2fb      	bcs.n	8006f30 <__hexnan+0xcc>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	b91b      	cbnz	r3, 8006f44 <__hexnan+0xe0>
 8006f3c:	4547      	cmp	r7, r8
 8006f3e:	d127      	bne.n	8006f90 <__hexnan+0x12c>
 8006f40:	2301      	movs	r3, #1
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	2005      	movs	r0, #5
 8006f46:	e026      	b.n	8006f96 <__hexnan+0x132>
 8006f48:	3501      	adds	r5, #1
 8006f4a:	2d08      	cmp	r5, #8
 8006f4c:	f10b 0b01 	add.w	fp, fp, #1
 8006f50:	dd06      	ble.n	8006f60 <__hexnan+0xfc>
 8006f52:	4544      	cmp	r4, r8
 8006f54:	d9c3      	bls.n	8006ede <__hexnan+0x7a>
 8006f56:	2300      	movs	r3, #0
 8006f58:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f5c:	2501      	movs	r5, #1
 8006f5e:	3c04      	subs	r4, #4
 8006f60:	6822      	ldr	r2, [r4, #0]
 8006f62:	f000 000f 	and.w	r0, r0, #15
 8006f66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006f6a:	6022      	str	r2, [r4, #0]
 8006f6c:	e7b7      	b.n	8006ede <__hexnan+0x7a>
 8006f6e:	2508      	movs	r5, #8
 8006f70:	e7b5      	b.n	8006ede <__hexnan+0x7a>
 8006f72:	9b01      	ldr	r3, [sp, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0df      	beq.n	8006f38 <__hexnan+0xd4>
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7c:	f1c3 0320 	rsb	r3, r3, #32
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
 8006f84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f88:	401a      	ands	r2, r3
 8006f8a:	f846 2c04 	str.w	r2, [r6, #-4]
 8006f8e:	e7d3      	b.n	8006f38 <__hexnan+0xd4>
 8006f90:	3f04      	subs	r7, #4
 8006f92:	e7d1      	b.n	8006f38 <__hexnan+0xd4>
 8006f94:	2004      	movs	r0, #4
 8006f96:	b007      	add	sp, #28
 8006f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f9c <_localeconv_r>:
 8006f9c:	4800      	ldr	r0, [pc, #0]	; (8006fa0 <_localeconv_r+0x4>)
 8006f9e:	4770      	bx	lr
 8006fa0:	200001d4 	.word	0x200001d4

08006fa4 <malloc>:
 8006fa4:	4b02      	ldr	r3, [pc, #8]	; (8006fb0 <malloc+0xc>)
 8006fa6:	4601      	mov	r1, r0
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	f000 bd3f 	b.w	8007a2c <_malloc_r>
 8006fae:	bf00      	nop
 8006fb0:	2000007c 	.word	0x2000007c

08006fb4 <__ascii_mbtowc>:
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	b901      	cbnz	r1, 8006fba <__ascii_mbtowc+0x6>
 8006fb8:	a901      	add	r1, sp, #4
 8006fba:	b142      	cbz	r2, 8006fce <__ascii_mbtowc+0x1a>
 8006fbc:	b14b      	cbz	r3, 8006fd2 <__ascii_mbtowc+0x1e>
 8006fbe:	7813      	ldrb	r3, [r2, #0]
 8006fc0:	600b      	str	r3, [r1, #0]
 8006fc2:	7812      	ldrb	r2, [r2, #0]
 8006fc4:	1e10      	subs	r0, r2, #0
 8006fc6:	bf18      	it	ne
 8006fc8:	2001      	movne	r0, #1
 8006fca:	b002      	add	sp, #8
 8006fcc:	4770      	bx	lr
 8006fce:	4610      	mov	r0, r2
 8006fd0:	e7fb      	b.n	8006fca <__ascii_mbtowc+0x16>
 8006fd2:	f06f 0001 	mvn.w	r0, #1
 8006fd6:	e7f8      	b.n	8006fca <__ascii_mbtowc+0x16>

08006fd8 <memcpy>:
 8006fd8:	440a      	add	r2, r1
 8006fda:	4291      	cmp	r1, r2
 8006fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fe0:	d100      	bne.n	8006fe4 <memcpy+0xc>
 8006fe2:	4770      	bx	lr
 8006fe4:	b510      	push	{r4, lr}
 8006fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fee:	4291      	cmp	r1, r2
 8006ff0:	d1f9      	bne.n	8006fe6 <memcpy+0xe>
 8006ff2:	bd10      	pop	{r4, pc}

08006ff4 <_Balloc>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	460d      	mov	r5, r1
 8006ffc:	b976      	cbnz	r6, 800701c <_Balloc+0x28>
 8006ffe:	2010      	movs	r0, #16
 8007000:	f7ff ffd0 	bl	8006fa4 <malloc>
 8007004:	4602      	mov	r2, r0
 8007006:	6260      	str	r0, [r4, #36]	; 0x24
 8007008:	b920      	cbnz	r0, 8007014 <_Balloc+0x20>
 800700a:	4b18      	ldr	r3, [pc, #96]	; (800706c <_Balloc+0x78>)
 800700c:	4818      	ldr	r0, [pc, #96]	; (8007070 <_Balloc+0x7c>)
 800700e:	2166      	movs	r1, #102	; 0x66
 8007010:	f000 fefa 	bl	8007e08 <__assert_func>
 8007014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007018:	6006      	str	r6, [r0, #0]
 800701a:	60c6      	str	r6, [r0, #12]
 800701c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800701e:	68f3      	ldr	r3, [r6, #12]
 8007020:	b183      	cbz	r3, 8007044 <_Balloc+0x50>
 8007022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800702a:	b9b8      	cbnz	r0, 800705c <_Balloc+0x68>
 800702c:	2101      	movs	r1, #1
 800702e:	fa01 f605 	lsl.w	r6, r1, r5
 8007032:	1d72      	adds	r2, r6, #5
 8007034:	0092      	lsls	r2, r2, #2
 8007036:	4620      	mov	r0, r4
 8007038:	f000 fc98 	bl	800796c <_calloc_r>
 800703c:	b160      	cbz	r0, 8007058 <_Balloc+0x64>
 800703e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007042:	e00e      	b.n	8007062 <_Balloc+0x6e>
 8007044:	2221      	movs	r2, #33	; 0x21
 8007046:	2104      	movs	r1, #4
 8007048:	4620      	mov	r0, r4
 800704a:	f000 fc8f 	bl	800796c <_calloc_r>
 800704e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007050:	60f0      	str	r0, [r6, #12]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e4      	bne.n	8007022 <_Balloc+0x2e>
 8007058:	2000      	movs	r0, #0
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	6802      	ldr	r2, [r0, #0]
 800705e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007062:	2300      	movs	r3, #0
 8007064:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007068:	e7f7      	b.n	800705a <_Balloc+0x66>
 800706a:	bf00      	nop
 800706c:	08008bbe 	.word	0x08008bbe
 8007070:	08008cc4 	.word	0x08008cc4

08007074 <_Bfree>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007078:	4605      	mov	r5, r0
 800707a:	460c      	mov	r4, r1
 800707c:	b976      	cbnz	r6, 800709c <_Bfree+0x28>
 800707e:	2010      	movs	r0, #16
 8007080:	f7ff ff90 	bl	8006fa4 <malloc>
 8007084:	4602      	mov	r2, r0
 8007086:	6268      	str	r0, [r5, #36]	; 0x24
 8007088:	b920      	cbnz	r0, 8007094 <_Bfree+0x20>
 800708a:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <_Bfree+0x3c>)
 800708c:	4809      	ldr	r0, [pc, #36]	; (80070b4 <_Bfree+0x40>)
 800708e:	218a      	movs	r1, #138	; 0x8a
 8007090:	f000 feba 	bl	8007e08 <__assert_func>
 8007094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007098:	6006      	str	r6, [r0, #0]
 800709a:	60c6      	str	r6, [r0, #12]
 800709c:	b13c      	cbz	r4, 80070ae <_Bfree+0x3a>
 800709e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070a0:	6862      	ldr	r2, [r4, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070a8:	6021      	str	r1, [r4, #0]
 80070aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070ae:	bd70      	pop	{r4, r5, r6, pc}
 80070b0:	08008bbe 	.word	0x08008bbe
 80070b4:	08008cc4 	.word	0x08008cc4

080070b8 <__multadd>:
 80070b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070bc:	690e      	ldr	r6, [r1, #16]
 80070be:	4607      	mov	r7, r0
 80070c0:	4698      	mov	r8, r3
 80070c2:	460c      	mov	r4, r1
 80070c4:	f101 0014 	add.w	r0, r1, #20
 80070c8:	2300      	movs	r3, #0
 80070ca:	6805      	ldr	r5, [r0, #0]
 80070cc:	b2a9      	uxth	r1, r5
 80070ce:	fb02 8101 	mla	r1, r2, r1, r8
 80070d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80070d6:	0c2d      	lsrs	r5, r5, #16
 80070d8:	fb02 c505 	mla	r5, r2, r5, ip
 80070dc:	b289      	uxth	r1, r1
 80070de:	3301      	adds	r3, #1
 80070e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80070e4:	429e      	cmp	r6, r3
 80070e6:	f840 1b04 	str.w	r1, [r0], #4
 80070ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80070ee:	dcec      	bgt.n	80070ca <__multadd+0x12>
 80070f0:	f1b8 0f00 	cmp.w	r8, #0
 80070f4:	d022      	beq.n	800713c <__multadd+0x84>
 80070f6:	68a3      	ldr	r3, [r4, #8]
 80070f8:	42b3      	cmp	r3, r6
 80070fa:	dc19      	bgt.n	8007130 <__multadd+0x78>
 80070fc:	6861      	ldr	r1, [r4, #4]
 80070fe:	4638      	mov	r0, r7
 8007100:	3101      	adds	r1, #1
 8007102:	f7ff ff77 	bl	8006ff4 <_Balloc>
 8007106:	4605      	mov	r5, r0
 8007108:	b928      	cbnz	r0, 8007116 <__multadd+0x5e>
 800710a:	4602      	mov	r2, r0
 800710c:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <__multadd+0x8c>)
 800710e:	480e      	ldr	r0, [pc, #56]	; (8007148 <__multadd+0x90>)
 8007110:	21b5      	movs	r1, #181	; 0xb5
 8007112:	f000 fe79 	bl	8007e08 <__assert_func>
 8007116:	6922      	ldr	r2, [r4, #16]
 8007118:	3202      	adds	r2, #2
 800711a:	f104 010c 	add.w	r1, r4, #12
 800711e:	0092      	lsls	r2, r2, #2
 8007120:	300c      	adds	r0, #12
 8007122:	f7ff ff59 	bl	8006fd8 <memcpy>
 8007126:	4621      	mov	r1, r4
 8007128:	4638      	mov	r0, r7
 800712a:	f7ff ffa3 	bl	8007074 <_Bfree>
 800712e:	462c      	mov	r4, r5
 8007130:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007134:	3601      	adds	r6, #1
 8007136:	f8c3 8014 	str.w	r8, [r3, #20]
 800713a:	6126      	str	r6, [r4, #16]
 800713c:	4620      	mov	r0, r4
 800713e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007142:	bf00      	nop
 8007144:	08008c34 	.word	0x08008c34
 8007148:	08008cc4 	.word	0x08008cc4

0800714c <__s2b>:
 800714c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007150:	460c      	mov	r4, r1
 8007152:	4615      	mov	r5, r2
 8007154:	461f      	mov	r7, r3
 8007156:	2209      	movs	r2, #9
 8007158:	3308      	adds	r3, #8
 800715a:	4606      	mov	r6, r0
 800715c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007160:	2100      	movs	r1, #0
 8007162:	2201      	movs	r2, #1
 8007164:	429a      	cmp	r2, r3
 8007166:	db09      	blt.n	800717c <__s2b+0x30>
 8007168:	4630      	mov	r0, r6
 800716a:	f7ff ff43 	bl	8006ff4 <_Balloc>
 800716e:	b940      	cbnz	r0, 8007182 <__s2b+0x36>
 8007170:	4602      	mov	r2, r0
 8007172:	4b19      	ldr	r3, [pc, #100]	; (80071d8 <__s2b+0x8c>)
 8007174:	4819      	ldr	r0, [pc, #100]	; (80071dc <__s2b+0x90>)
 8007176:	21ce      	movs	r1, #206	; 0xce
 8007178:	f000 fe46 	bl	8007e08 <__assert_func>
 800717c:	0052      	lsls	r2, r2, #1
 800717e:	3101      	adds	r1, #1
 8007180:	e7f0      	b.n	8007164 <__s2b+0x18>
 8007182:	9b08      	ldr	r3, [sp, #32]
 8007184:	6143      	str	r3, [r0, #20]
 8007186:	2d09      	cmp	r5, #9
 8007188:	f04f 0301 	mov.w	r3, #1
 800718c:	6103      	str	r3, [r0, #16]
 800718e:	dd16      	ble.n	80071be <__s2b+0x72>
 8007190:	f104 0909 	add.w	r9, r4, #9
 8007194:	46c8      	mov	r8, r9
 8007196:	442c      	add	r4, r5
 8007198:	f818 3b01 	ldrb.w	r3, [r8], #1
 800719c:	4601      	mov	r1, r0
 800719e:	3b30      	subs	r3, #48	; 0x30
 80071a0:	220a      	movs	r2, #10
 80071a2:	4630      	mov	r0, r6
 80071a4:	f7ff ff88 	bl	80070b8 <__multadd>
 80071a8:	45a0      	cmp	r8, r4
 80071aa:	d1f5      	bne.n	8007198 <__s2b+0x4c>
 80071ac:	f1a5 0408 	sub.w	r4, r5, #8
 80071b0:	444c      	add	r4, r9
 80071b2:	1b2d      	subs	r5, r5, r4
 80071b4:	1963      	adds	r3, r4, r5
 80071b6:	42bb      	cmp	r3, r7
 80071b8:	db04      	blt.n	80071c4 <__s2b+0x78>
 80071ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071be:	340a      	adds	r4, #10
 80071c0:	2509      	movs	r5, #9
 80071c2:	e7f6      	b.n	80071b2 <__s2b+0x66>
 80071c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071c8:	4601      	mov	r1, r0
 80071ca:	3b30      	subs	r3, #48	; 0x30
 80071cc:	220a      	movs	r2, #10
 80071ce:	4630      	mov	r0, r6
 80071d0:	f7ff ff72 	bl	80070b8 <__multadd>
 80071d4:	e7ee      	b.n	80071b4 <__s2b+0x68>
 80071d6:	bf00      	nop
 80071d8:	08008c34 	.word	0x08008c34
 80071dc:	08008cc4 	.word	0x08008cc4

080071e0 <__hi0bits>:
 80071e0:	0c03      	lsrs	r3, r0, #16
 80071e2:	041b      	lsls	r3, r3, #16
 80071e4:	b9d3      	cbnz	r3, 800721c <__hi0bits+0x3c>
 80071e6:	0400      	lsls	r0, r0, #16
 80071e8:	2310      	movs	r3, #16
 80071ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071ee:	bf04      	itt	eq
 80071f0:	0200      	lsleq	r0, r0, #8
 80071f2:	3308      	addeq	r3, #8
 80071f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80071f8:	bf04      	itt	eq
 80071fa:	0100      	lsleq	r0, r0, #4
 80071fc:	3304      	addeq	r3, #4
 80071fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007202:	bf04      	itt	eq
 8007204:	0080      	lsleq	r0, r0, #2
 8007206:	3302      	addeq	r3, #2
 8007208:	2800      	cmp	r0, #0
 800720a:	db05      	blt.n	8007218 <__hi0bits+0x38>
 800720c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007210:	f103 0301 	add.w	r3, r3, #1
 8007214:	bf08      	it	eq
 8007216:	2320      	moveq	r3, #32
 8007218:	4618      	mov	r0, r3
 800721a:	4770      	bx	lr
 800721c:	2300      	movs	r3, #0
 800721e:	e7e4      	b.n	80071ea <__hi0bits+0xa>

08007220 <__lo0bits>:
 8007220:	6803      	ldr	r3, [r0, #0]
 8007222:	f013 0207 	ands.w	r2, r3, #7
 8007226:	4601      	mov	r1, r0
 8007228:	d00b      	beq.n	8007242 <__lo0bits+0x22>
 800722a:	07da      	lsls	r2, r3, #31
 800722c:	d424      	bmi.n	8007278 <__lo0bits+0x58>
 800722e:	0798      	lsls	r0, r3, #30
 8007230:	bf49      	itett	mi
 8007232:	085b      	lsrmi	r3, r3, #1
 8007234:	089b      	lsrpl	r3, r3, #2
 8007236:	2001      	movmi	r0, #1
 8007238:	600b      	strmi	r3, [r1, #0]
 800723a:	bf5c      	itt	pl
 800723c:	600b      	strpl	r3, [r1, #0]
 800723e:	2002      	movpl	r0, #2
 8007240:	4770      	bx	lr
 8007242:	b298      	uxth	r0, r3
 8007244:	b9b0      	cbnz	r0, 8007274 <__lo0bits+0x54>
 8007246:	0c1b      	lsrs	r3, r3, #16
 8007248:	2010      	movs	r0, #16
 800724a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800724e:	bf04      	itt	eq
 8007250:	0a1b      	lsreq	r3, r3, #8
 8007252:	3008      	addeq	r0, #8
 8007254:	071a      	lsls	r2, r3, #28
 8007256:	bf04      	itt	eq
 8007258:	091b      	lsreq	r3, r3, #4
 800725a:	3004      	addeq	r0, #4
 800725c:	079a      	lsls	r2, r3, #30
 800725e:	bf04      	itt	eq
 8007260:	089b      	lsreq	r3, r3, #2
 8007262:	3002      	addeq	r0, #2
 8007264:	07da      	lsls	r2, r3, #31
 8007266:	d403      	bmi.n	8007270 <__lo0bits+0x50>
 8007268:	085b      	lsrs	r3, r3, #1
 800726a:	f100 0001 	add.w	r0, r0, #1
 800726e:	d005      	beq.n	800727c <__lo0bits+0x5c>
 8007270:	600b      	str	r3, [r1, #0]
 8007272:	4770      	bx	lr
 8007274:	4610      	mov	r0, r2
 8007276:	e7e8      	b.n	800724a <__lo0bits+0x2a>
 8007278:	2000      	movs	r0, #0
 800727a:	4770      	bx	lr
 800727c:	2020      	movs	r0, #32
 800727e:	4770      	bx	lr

08007280 <__i2b>:
 8007280:	b510      	push	{r4, lr}
 8007282:	460c      	mov	r4, r1
 8007284:	2101      	movs	r1, #1
 8007286:	f7ff feb5 	bl	8006ff4 <_Balloc>
 800728a:	4602      	mov	r2, r0
 800728c:	b928      	cbnz	r0, 800729a <__i2b+0x1a>
 800728e:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <__i2b+0x24>)
 8007290:	4805      	ldr	r0, [pc, #20]	; (80072a8 <__i2b+0x28>)
 8007292:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007296:	f000 fdb7 	bl	8007e08 <__assert_func>
 800729a:	2301      	movs	r3, #1
 800729c:	6144      	str	r4, [r0, #20]
 800729e:	6103      	str	r3, [r0, #16]
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	bf00      	nop
 80072a4:	08008c34 	.word	0x08008c34
 80072a8:	08008cc4 	.word	0x08008cc4

080072ac <__multiply>:
 80072ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	4614      	mov	r4, r2
 80072b2:	690a      	ldr	r2, [r1, #16]
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	bfb8      	it	lt
 80072ba:	460b      	movlt	r3, r1
 80072bc:	460d      	mov	r5, r1
 80072be:	bfbc      	itt	lt
 80072c0:	4625      	movlt	r5, r4
 80072c2:	461c      	movlt	r4, r3
 80072c4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80072c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072cc:	68ab      	ldr	r3, [r5, #8]
 80072ce:	6869      	ldr	r1, [r5, #4]
 80072d0:	eb0a 0709 	add.w	r7, sl, r9
 80072d4:	42bb      	cmp	r3, r7
 80072d6:	b085      	sub	sp, #20
 80072d8:	bfb8      	it	lt
 80072da:	3101      	addlt	r1, #1
 80072dc:	f7ff fe8a 	bl	8006ff4 <_Balloc>
 80072e0:	b930      	cbnz	r0, 80072f0 <__multiply+0x44>
 80072e2:	4602      	mov	r2, r0
 80072e4:	4b42      	ldr	r3, [pc, #264]	; (80073f0 <__multiply+0x144>)
 80072e6:	4843      	ldr	r0, [pc, #268]	; (80073f4 <__multiply+0x148>)
 80072e8:	f240 115d 	movw	r1, #349	; 0x15d
 80072ec:	f000 fd8c 	bl	8007e08 <__assert_func>
 80072f0:	f100 0614 	add.w	r6, r0, #20
 80072f4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80072f8:	4633      	mov	r3, r6
 80072fa:	2200      	movs	r2, #0
 80072fc:	4543      	cmp	r3, r8
 80072fe:	d31e      	bcc.n	800733e <__multiply+0x92>
 8007300:	f105 0c14 	add.w	ip, r5, #20
 8007304:	f104 0314 	add.w	r3, r4, #20
 8007308:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800730c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007310:	9202      	str	r2, [sp, #8]
 8007312:	ebac 0205 	sub.w	r2, ip, r5
 8007316:	3a15      	subs	r2, #21
 8007318:	f022 0203 	bic.w	r2, r2, #3
 800731c:	3204      	adds	r2, #4
 800731e:	f105 0115 	add.w	r1, r5, #21
 8007322:	458c      	cmp	ip, r1
 8007324:	bf38      	it	cc
 8007326:	2204      	movcc	r2, #4
 8007328:	9201      	str	r2, [sp, #4]
 800732a:	9a02      	ldr	r2, [sp, #8]
 800732c:	9303      	str	r3, [sp, #12]
 800732e:	429a      	cmp	r2, r3
 8007330:	d808      	bhi.n	8007344 <__multiply+0x98>
 8007332:	2f00      	cmp	r7, #0
 8007334:	dc55      	bgt.n	80073e2 <__multiply+0x136>
 8007336:	6107      	str	r7, [r0, #16]
 8007338:	b005      	add	sp, #20
 800733a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733e:	f843 2b04 	str.w	r2, [r3], #4
 8007342:	e7db      	b.n	80072fc <__multiply+0x50>
 8007344:	f8b3 a000 	ldrh.w	sl, [r3]
 8007348:	f1ba 0f00 	cmp.w	sl, #0
 800734c:	d020      	beq.n	8007390 <__multiply+0xe4>
 800734e:	f105 0e14 	add.w	lr, r5, #20
 8007352:	46b1      	mov	r9, r6
 8007354:	2200      	movs	r2, #0
 8007356:	f85e 4b04 	ldr.w	r4, [lr], #4
 800735a:	f8d9 b000 	ldr.w	fp, [r9]
 800735e:	b2a1      	uxth	r1, r4
 8007360:	fa1f fb8b 	uxth.w	fp, fp
 8007364:	fb0a b101 	mla	r1, sl, r1, fp
 8007368:	4411      	add	r1, r2
 800736a:	f8d9 2000 	ldr.w	r2, [r9]
 800736e:	0c24      	lsrs	r4, r4, #16
 8007370:	0c12      	lsrs	r2, r2, #16
 8007372:	fb0a 2404 	mla	r4, sl, r4, r2
 8007376:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800737a:	b289      	uxth	r1, r1
 800737c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007380:	45f4      	cmp	ip, lr
 8007382:	f849 1b04 	str.w	r1, [r9], #4
 8007386:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800738a:	d8e4      	bhi.n	8007356 <__multiply+0xaa>
 800738c:	9901      	ldr	r1, [sp, #4]
 800738e:	5072      	str	r2, [r6, r1]
 8007390:	9a03      	ldr	r2, [sp, #12]
 8007392:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007396:	3304      	adds	r3, #4
 8007398:	f1b9 0f00 	cmp.w	r9, #0
 800739c:	d01f      	beq.n	80073de <__multiply+0x132>
 800739e:	6834      	ldr	r4, [r6, #0]
 80073a0:	f105 0114 	add.w	r1, r5, #20
 80073a4:	46b6      	mov	lr, r6
 80073a6:	f04f 0a00 	mov.w	sl, #0
 80073aa:	880a      	ldrh	r2, [r1, #0]
 80073ac:	f8be b002 	ldrh.w	fp, [lr, #2]
 80073b0:	fb09 b202 	mla	r2, r9, r2, fp
 80073b4:	4492      	add	sl, r2
 80073b6:	b2a4      	uxth	r4, r4
 80073b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80073bc:	f84e 4b04 	str.w	r4, [lr], #4
 80073c0:	f851 4b04 	ldr.w	r4, [r1], #4
 80073c4:	f8be 2000 	ldrh.w	r2, [lr]
 80073c8:	0c24      	lsrs	r4, r4, #16
 80073ca:	fb09 2404 	mla	r4, r9, r4, r2
 80073ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80073d2:	458c      	cmp	ip, r1
 80073d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80073d8:	d8e7      	bhi.n	80073aa <__multiply+0xfe>
 80073da:	9a01      	ldr	r2, [sp, #4]
 80073dc:	50b4      	str	r4, [r6, r2]
 80073de:	3604      	adds	r6, #4
 80073e0:	e7a3      	b.n	800732a <__multiply+0x7e>
 80073e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1a5      	bne.n	8007336 <__multiply+0x8a>
 80073ea:	3f01      	subs	r7, #1
 80073ec:	e7a1      	b.n	8007332 <__multiply+0x86>
 80073ee:	bf00      	nop
 80073f0:	08008c34 	.word	0x08008c34
 80073f4:	08008cc4 	.word	0x08008cc4

080073f8 <__pow5mult>:
 80073f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073fc:	4615      	mov	r5, r2
 80073fe:	f012 0203 	ands.w	r2, r2, #3
 8007402:	4606      	mov	r6, r0
 8007404:	460f      	mov	r7, r1
 8007406:	d007      	beq.n	8007418 <__pow5mult+0x20>
 8007408:	4c25      	ldr	r4, [pc, #148]	; (80074a0 <__pow5mult+0xa8>)
 800740a:	3a01      	subs	r2, #1
 800740c:	2300      	movs	r3, #0
 800740e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007412:	f7ff fe51 	bl	80070b8 <__multadd>
 8007416:	4607      	mov	r7, r0
 8007418:	10ad      	asrs	r5, r5, #2
 800741a:	d03d      	beq.n	8007498 <__pow5mult+0xa0>
 800741c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800741e:	b97c      	cbnz	r4, 8007440 <__pow5mult+0x48>
 8007420:	2010      	movs	r0, #16
 8007422:	f7ff fdbf 	bl	8006fa4 <malloc>
 8007426:	4602      	mov	r2, r0
 8007428:	6270      	str	r0, [r6, #36]	; 0x24
 800742a:	b928      	cbnz	r0, 8007438 <__pow5mult+0x40>
 800742c:	4b1d      	ldr	r3, [pc, #116]	; (80074a4 <__pow5mult+0xac>)
 800742e:	481e      	ldr	r0, [pc, #120]	; (80074a8 <__pow5mult+0xb0>)
 8007430:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007434:	f000 fce8 	bl	8007e08 <__assert_func>
 8007438:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800743c:	6004      	str	r4, [r0, #0]
 800743e:	60c4      	str	r4, [r0, #12]
 8007440:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007444:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007448:	b94c      	cbnz	r4, 800745e <__pow5mult+0x66>
 800744a:	f240 2171 	movw	r1, #625	; 0x271
 800744e:	4630      	mov	r0, r6
 8007450:	f7ff ff16 	bl	8007280 <__i2b>
 8007454:	2300      	movs	r3, #0
 8007456:	f8c8 0008 	str.w	r0, [r8, #8]
 800745a:	4604      	mov	r4, r0
 800745c:	6003      	str	r3, [r0, #0]
 800745e:	f04f 0900 	mov.w	r9, #0
 8007462:	07eb      	lsls	r3, r5, #31
 8007464:	d50a      	bpl.n	800747c <__pow5mult+0x84>
 8007466:	4639      	mov	r1, r7
 8007468:	4622      	mov	r2, r4
 800746a:	4630      	mov	r0, r6
 800746c:	f7ff ff1e 	bl	80072ac <__multiply>
 8007470:	4639      	mov	r1, r7
 8007472:	4680      	mov	r8, r0
 8007474:	4630      	mov	r0, r6
 8007476:	f7ff fdfd 	bl	8007074 <_Bfree>
 800747a:	4647      	mov	r7, r8
 800747c:	106d      	asrs	r5, r5, #1
 800747e:	d00b      	beq.n	8007498 <__pow5mult+0xa0>
 8007480:	6820      	ldr	r0, [r4, #0]
 8007482:	b938      	cbnz	r0, 8007494 <__pow5mult+0x9c>
 8007484:	4622      	mov	r2, r4
 8007486:	4621      	mov	r1, r4
 8007488:	4630      	mov	r0, r6
 800748a:	f7ff ff0f 	bl	80072ac <__multiply>
 800748e:	6020      	str	r0, [r4, #0]
 8007490:	f8c0 9000 	str.w	r9, [r0]
 8007494:	4604      	mov	r4, r0
 8007496:	e7e4      	b.n	8007462 <__pow5mult+0x6a>
 8007498:	4638      	mov	r0, r7
 800749a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800749e:	bf00      	nop
 80074a0:	08008e18 	.word	0x08008e18
 80074a4:	08008bbe 	.word	0x08008bbe
 80074a8:	08008cc4 	.word	0x08008cc4

080074ac <__lshift>:
 80074ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b0:	460c      	mov	r4, r1
 80074b2:	6849      	ldr	r1, [r1, #4]
 80074b4:	6923      	ldr	r3, [r4, #16]
 80074b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074ba:	68a3      	ldr	r3, [r4, #8]
 80074bc:	4607      	mov	r7, r0
 80074be:	4691      	mov	r9, r2
 80074c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074c4:	f108 0601 	add.w	r6, r8, #1
 80074c8:	42b3      	cmp	r3, r6
 80074ca:	db0b      	blt.n	80074e4 <__lshift+0x38>
 80074cc:	4638      	mov	r0, r7
 80074ce:	f7ff fd91 	bl	8006ff4 <_Balloc>
 80074d2:	4605      	mov	r5, r0
 80074d4:	b948      	cbnz	r0, 80074ea <__lshift+0x3e>
 80074d6:	4602      	mov	r2, r0
 80074d8:	4b28      	ldr	r3, [pc, #160]	; (800757c <__lshift+0xd0>)
 80074da:	4829      	ldr	r0, [pc, #164]	; (8007580 <__lshift+0xd4>)
 80074dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074e0:	f000 fc92 	bl	8007e08 <__assert_func>
 80074e4:	3101      	adds	r1, #1
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	e7ee      	b.n	80074c8 <__lshift+0x1c>
 80074ea:	2300      	movs	r3, #0
 80074ec:	f100 0114 	add.w	r1, r0, #20
 80074f0:	f100 0210 	add.w	r2, r0, #16
 80074f4:	4618      	mov	r0, r3
 80074f6:	4553      	cmp	r3, sl
 80074f8:	db33      	blt.n	8007562 <__lshift+0xb6>
 80074fa:	6920      	ldr	r0, [r4, #16]
 80074fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007500:	f104 0314 	add.w	r3, r4, #20
 8007504:	f019 091f 	ands.w	r9, r9, #31
 8007508:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800750c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007510:	d02b      	beq.n	800756a <__lshift+0xbe>
 8007512:	f1c9 0e20 	rsb	lr, r9, #32
 8007516:	468a      	mov	sl, r1
 8007518:	2200      	movs	r2, #0
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	fa00 f009 	lsl.w	r0, r0, r9
 8007520:	4302      	orrs	r2, r0
 8007522:	f84a 2b04 	str.w	r2, [sl], #4
 8007526:	f853 2b04 	ldr.w	r2, [r3], #4
 800752a:	459c      	cmp	ip, r3
 800752c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007530:	d8f3      	bhi.n	800751a <__lshift+0x6e>
 8007532:	ebac 0304 	sub.w	r3, ip, r4
 8007536:	3b15      	subs	r3, #21
 8007538:	f023 0303 	bic.w	r3, r3, #3
 800753c:	3304      	adds	r3, #4
 800753e:	f104 0015 	add.w	r0, r4, #21
 8007542:	4584      	cmp	ip, r0
 8007544:	bf38      	it	cc
 8007546:	2304      	movcc	r3, #4
 8007548:	50ca      	str	r2, [r1, r3]
 800754a:	b10a      	cbz	r2, 8007550 <__lshift+0xa4>
 800754c:	f108 0602 	add.w	r6, r8, #2
 8007550:	3e01      	subs	r6, #1
 8007552:	4638      	mov	r0, r7
 8007554:	612e      	str	r6, [r5, #16]
 8007556:	4621      	mov	r1, r4
 8007558:	f7ff fd8c 	bl	8007074 <_Bfree>
 800755c:	4628      	mov	r0, r5
 800755e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007562:	f842 0f04 	str.w	r0, [r2, #4]!
 8007566:	3301      	adds	r3, #1
 8007568:	e7c5      	b.n	80074f6 <__lshift+0x4a>
 800756a:	3904      	subs	r1, #4
 800756c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007570:	f841 2f04 	str.w	r2, [r1, #4]!
 8007574:	459c      	cmp	ip, r3
 8007576:	d8f9      	bhi.n	800756c <__lshift+0xc0>
 8007578:	e7ea      	b.n	8007550 <__lshift+0xa4>
 800757a:	bf00      	nop
 800757c:	08008c34 	.word	0x08008c34
 8007580:	08008cc4 	.word	0x08008cc4

08007584 <__mcmp>:
 8007584:	b530      	push	{r4, r5, lr}
 8007586:	6902      	ldr	r2, [r0, #16]
 8007588:	690c      	ldr	r4, [r1, #16]
 800758a:	1b12      	subs	r2, r2, r4
 800758c:	d10e      	bne.n	80075ac <__mcmp+0x28>
 800758e:	f100 0314 	add.w	r3, r0, #20
 8007592:	3114      	adds	r1, #20
 8007594:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007598:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800759c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075a4:	42a5      	cmp	r5, r4
 80075a6:	d003      	beq.n	80075b0 <__mcmp+0x2c>
 80075a8:	d305      	bcc.n	80075b6 <__mcmp+0x32>
 80075aa:	2201      	movs	r2, #1
 80075ac:	4610      	mov	r0, r2
 80075ae:	bd30      	pop	{r4, r5, pc}
 80075b0:	4283      	cmp	r3, r0
 80075b2:	d3f3      	bcc.n	800759c <__mcmp+0x18>
 80075b4:	e7fa      	b.n	80075ac <__mcmp+0x28>
 80075b6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ba:	e7f7      	b.n	80075ac <__mcmp+0x28>

080075bc <__mdiff>:
 80075bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c0:	460c      	mov	r4, r1
 80075c2:	4606      	mov	r6, r0
 80075c4:	4611      	mov	r1, r2
 80075c6:	4620      	mov	r0, r4
 80075c8:	4617      	mov	r7, r2
 80075ca:	f7ff ffdb 	bl	8007584 <__mcmp>
 80075ce:	1e05      	subs	r5, r0, #0
 80075d0:	d110      	bne.n	80075f4 <__mdiff+0x38>
 80075d2:	4629      	mov	r1, r5
 80075d4:	4630      	mov	r0, r6
 80075d6:	f7ff fd0d 	bl	8006ff4 <_Balloc>
 80075da:	b930      	cbnz	r0, 80075ea <__mdiff+0x2e>
 80075dc:	4b39      	ldr	r3, [pc, #228]	; (80076c4 <__mdiff+0x108>)
 80075de:	4602      	mov	r2, r0
 80075e0:	f240 2132 	movw	r1, #562	; 0x232
 80075e4:	4838      	ldr	r0, [pc, #224]	; (80076c8 <__mdiff+0x10c>)
 80075e6:	f000 fc0f 	bl	8007e08 <__assert_func>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f4:	bfa4      	itt	ge
 80075f6:	463b      	movge	r3, r7
 80075f8:	4627      	movge	r7, r4
 80075fa:	4630      	mov	r0, r6
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	bfa6      	itte	ge
 8007600:	461c      	movge	r4, r3
 8007602:	2500      	movge	r5, #0
 8007604:	2501      	movlt	r5, #1
 8007606:	f7ff fcf5 	bl	8006ff4 <_Balloc>
 800760a:	b920      	cbnz	r0, 8007616 <__mdiff+0x5a>
 800760c:	4b2d      	ldr	r3, [pc, #180]	; (80076c4 <__mdiff+0x108>)
 800760e:	4602      	mov	r2, r0
 8007610:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007614:	e7e6      	b.n	80075e4 <__mdiff+0x28>
 8007616:	693e      	ldr	r6, [r7, #16]
 8007618:	60c5      	str	r5, [r0, #12]
 800761a:	6925      	ldr	r5, [r4, #16]
 800761c:	f107 0114 	add.w	r1, r7, #20
 8007620:	f104 0914 	add.w	r9, r4, #20
 8007624:	f100 0e14 	add.w	lr, r0, #20
 8007628:	f107 0210 	add.w	r2, r7, #16
 800762c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007630:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007634:	46f2      	mov	sl, lr
 8007636:	2700      	movs	r7, #0
 8007638:	f859 3b04 	ldr.w	r3, [r9], #4
 800763c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007640:	fa1f f883 	uxth.w	r8, r3
 8007644:	fa17 f78b 	uxtah	r7, r7, fp
 8007648:	0c1b      	lsrs	r3, r3, #16
 800764a:	eba7 0808 	sub.w	r8, r7, r8
 800764e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007652:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007656:	fa1f f888 	uxth.w	r8, r8
 800765a:	141f      	asrs	r7, r3, #16
 800765c:	454d      	cmp	r5, r9
 800765e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007662:	f84a 3b04 	str.w	r3, [sl], #4
 8007666:	d8e7      	bhi.n	8007638 <__mdiff+0x7c>
 8007668:	1b2b      	subs	r3, r5, r4
 800766a:	3b15      	subs	r3, #21
 800766c:	f023 0303 	bic.w	r3, r3, #3
 8007670:	3304      	adds	r3, #4
 8007672:	3415      	adds	r4, #21
 8007674:	42a5      	cmp	r5, r4
 8007676:	bf38      	it	cc
 8007678:	2304      	movcc	r3, #4
 800767a:	4419      	add	r1, r3
 800767c:	4473      	add	r3, lr
 800767e:	469e      	mov	lr, r3
 8007680:	460d      	mov	r5, r1
 8007682:	4565      	cmp	r5, ip
 8007684:	d30e      	bcc.n	80076a4 <__mdiff+0xe8>
 8007686:	f10c 0203 	add.w	r2, ip, #3
 800768a:	1a52      	subs	r2, r2, r1
 800768c:	f022 0203 	bic.w	r2, r2, #3
 8007690:	3903      	subs	r1, #3
 8007692:	458c      	cmp	ip, r1
 8007694:	bf38      	it	cc
 8007696:	2200      	movcc	r2, #0
 8007698:	441a      	add	r2, r3
 800769a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800769e:	b17b      	cbz	r3, 80076c0 <__mdiff+0x104>
 80076a0:	6106      	str	r6, [r0, #16]
 80076a2:	e7a5      	b.n	80075f0 <__mdiff+0x34>
 80076a4:	f855 8b04 	ldr.w	r8, [r5], #4
 80076a8:	fa17 f488 	uxtah	r4, r7, r8
 80076ac:	1422      	asrs	r2, r4, #16
 80076ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80076b2:	b2a4      	uxth	r4, r4
 80076b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80076b8:	f84e 4b04 	str.w	r4, [lr], #4
 80076bc:	1417      	asrs	r7, r2, #16
 80076be:	e7e0      	b.n	8007682 <__mdiff+0xc6>
 80076c0:	3e01      	subs	r6, #1
 80076c2:	e7ea      	b.n	800769a <__mdiff+0xde>
 80076c4:	08008c34 	.word	0x08008c34
 80076c8:	08008cc4 	.word	0x08008cc4

080076cc <__ulp>:
 80076cc:	b082      	sub	sp, #8
 80076ce:	ed8d 0b00 	vstr	d0, [sp]
 80076d2:	9b01      	ldr	r3, [sp, #4]
 80076d4:	4912      	ldr	r1, [pc, #72]	; (8007720 <__ulp+0x54>)
 80076d6:	4019      	ands	r1, r3
 80076d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80076dc:	2900      	cmp	r1, #0
 80076de:	dd05      	ble.n	80076ec <__ulp+0x20>
 80076e0:	2200      	movs	r2, #0
 80076e2:	460b      	mov	r3, r1
 80076e4:	ec43 2b10 	vmov	d0, r2, r3
 80076e8:	b002      	add	sp, #8
 80076ea:	4770      	bx	lr
 80076ec:	4249      	negs	r1, r1
 80076ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80076f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	da04      	bge.n	800770a <__ulp+0x3e>
 8007700:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007704:	fa41 f300 	asr.w	r3, r1, r0
 8007708:	e7ec      	b.n	80076e4 <__ulp+0x18>
 800770a:	f1a0 0114 	sub.w	r1, r0, #20
 800770e:	291e      	cmp	r1, #30
 8007710:	bfda      	itte	le
 8007712:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007716:	fa20 f101 	lsrle.w	r1, r0, r1
 800771a:	2101      	movgt	r1, #1
 800771c:	460a      	mov	r2, r1
 800771e:	e7e1      	b.n	80076e4 <__ulp+0x18>
 8007720:	7ff00000 	.word	0x7ff00000

08007724 <__b2d>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	6905      	ldr	r5, [r0, #16]
 8007728:	f100 0714 	add.w	r7, r0, #20
 800772c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007730:	1f2e      	subs	r6, r5, #4
 8007732:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007736:	4620      	mov	r0, r4
 8007738:	f7ff fd52 	bl	80071e0 <__hi0bits>
 800773c:	f1c0 0320 	rsb	r3, r0, #32
 8007740:	280a      	cmp	r0, #10
 8007742:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80077c0 <__b2d+0x9c>
 8007746:	600b      	str	r3, [r1, #0]
 8007748:	dc14      	bgt.n	8007774 <__b2d+0x50>
 800774a:	f1c0 0e0b 	rsb	lr, r0, #11
 800774e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007752:	42b7      	cmp	r7, r6
 8007754:	ea41 030c 	orr.w	r3, r1, ip
 8007758:	bf34      	ite	cc
 800775a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800775e:	2100      	movcs	r1, #0
 8007760:	3015      	adds	r0, #21
 8007762:	fa04 f000 	lsl.w	r0, r4, r0
 8007766:	fa21 f10e 	lsr.w	r1, r1, lr
 800776a:	ea40 0201 	orr.w	r2, r0, r1
 800776e:	ec43 2b10 	vmov	d0, r2, r3
 8007772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007774:	42b7      	cmp	r7, r6
 8007776:	bf3a      	itte	cc
 8007778:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800777c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007780:	2100      	movcs	r1, #0
 8007782:	380b      	subs	r0, #11
 8007784:	d017      	beq.n	80077b6 <__b2d+0x92>
 8007786:	f1c0 0c20 	rsb	ip, r0, #32
 800778a:	fa04 f500 	lsl.w	r5, r4, r0
 800778e:	42be      	cmp	r6, r7
 8007790:	fa21 f40c 	lsr.w	r4, r1, ip
 8007794:	ea45 0504 	orr.w	r5, r5, r4
 8007798:	bf8c      	ite	hi
 800779a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800779e:	2400      	movls	r4, #0
 80077a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80077a4:	fa01 f000 	lsl.w	r0, r1, r0
 80077a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80077ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80077b0:	ea40 0204 	orr.w	r2, r0, r4
 80077b4:	e7db      	b.n	800776e <__b2d+0x4a>
 80077b6:	ea44 030c 	orr.w	r3, r4, ip
 80077ba:	460a      	mov	r2, r1
 80077bc:	e7d7      	b.n	800776e <__b2d+0x4a>
 80077be:	bf00      	nop
 80077c0:	3ff00000 	.word	0x3ff00000

080077c4 <__d2b>:
 80077c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077c8:	4689      	mov	r9, r1
 80077ca:	2101      	movs	r1, #1
 80077cc:	ec57 6b10 	vmov	r6, r7, d0
 80077d0:	4690      	mov	r8, r2
 80077d2:	f7ff fc0f 	bl	8006ff4 <_Balloc>
 80077d6:	4604      	mov	r4, r0
 80077d8:	b930      	cbnz	r0, 80077e8 <__d2b+0x24>
 80077da:	4602      	mov	r2, r0
 80077dc:	4b25      	ldr	r3, [pc, #148]	; (8007874 <__d2b+0xb0>)
 80077de:	4826      	ldr	r0, [pc, #152]	; (8007878 <__d2b+0xb4>)
 80077e0:	f240 310a 	movw	r1, #778	; 0x30a
 80077e4:	f000 fb10 	bl	8007e08 <__assert_func>
 80077e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80077ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077f0:	bb35      	cbnz	r5, 8007840 <__d2b+0x7c>
 80077f2:	2e00      	cmp	r6, #0
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	d028      	beq.n	800784a <__d2b+0x86>
 80077f8:	4668      	mov	r0, sp
 80077fa:	9600      	str	r6, [sp, #0]
 80077fc:	f7ff fd10 	bl	8007220 <__lo0bits>
 8007800:	9900      	ldr	r1, [sp, #0]
 8007802:	b300      	cbz	r0, 8007846 <__d2b+0x82>
 8007804:	9a01      	ldr	r2, [sp, #4]
 8007806:	f1c0 0320 	rsb	r3, r0, #32
 800780a:	fa02 f303 	lsl.w	r3, r2, r3
 800780e:	430b      	orrs	r3, r1
 8007810:	40c2      	lsrs	r2, r0
 8007812:	6163      	str	r3, [r4, #20]
 8007814:	9201      	str	r2, [sp, #4]
 8007816:	9b01      	ldr	r3, [sp, #4]
 8007818:	61a3      	str	r3, [r4, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	bf14      	ite	ne
 800781e:	2202      	movne	r2, #2
 8007820:	2201      	moveq	r2, #1
 8007822:	6122      	str	r2, [r4, #16]
 8007824:	b1d5      	cbz	r5, 800785c <__d2b+0x98>
 8007826:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800782a:	4405      	add	r5, r0
 800782c:	f8c9 5000 	str.w	r5, [r9]
 8007830:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007834:	f8c8 0000 	str.w	r0, [r8]
 8007838:	4620      	mov	r0, r4
 800783a:	b003      	add	sp, #12
 800783c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007844:	e7d5      	b.n	80077f2 <__d2b+0x2e>
 8007846:	6161      	str	r1, [r4, #20]
 8007848:	e7e5      	b.n	8007816 <__d2b+0x52>
 800784a:	a801      	add	r0, sp, #4
 800784c:	f7ff fce8 	bl	8007220 <__lo0bits>
 8007850:	9b01      	ldr	r3, [sp, #4]
 8007852:	6163      	str	r3, [r4, #20]
 8007854:	2201      	movs	r2, #1
 8007856:	6122      	str	r2, [r4, #16]
 8007858:	3020      	adds	r0, #32
 800785a:	e7e3      	b.n	8007824 <__d2b+0x60>
 800785c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007860:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007864:	f8c9 0000 	str.w	r0, [r9]
 8007868:	6918      	ldr	r0, [r3, #16]
 800786a:	f7ff fcb9 	bl	80071e0 <__hi0bits>
 800786e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007872:	e7df      	b.n	8007834 <__d2b+0x70>
 8007874:	08008c34 	.word	0x08008c34
 8007878:	08008cc4 	.word	0x08008cc4

0800787c <__ratio>:
 800787c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007880:	468a      	mov	sl, r1
 8007882:	4669      	mov	r1, sp
 8007884:	4683      	mov	fp, r0
 8007886:	f7ff ff4d 	bl	8007724 <__b2d>
 800788a:	a901      	add	r1, sp, #4
 800788c:	4650      	mov	r0, sl
 800788e:	ec59 8b10 	vmov	r8, r9, d0
 8007892:	ee10 6a10 	vmov	r6, s0
 8007896:	f7ff ff45 	bl	8007724 <__b2d>
 800789a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800789e:	f8da 2010 	ldr.w	r2, [sl, #16]
 80078a2:	eba3 0c02 	sub.w	ip, r3, r2
 80078a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80078b0:	ec55 4b10 	vmov	r4, r5, d0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	ee10 0a10 	vmov	r0, s0
 80078ba:	bfce      	itee	gt
 80078bc:	464a      	movgt	r2, r9
 80078be:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80078c2:	462a      	movle	r2, r5
 80078c4:	464f      	mov	r7, r9
 80078c6:	4629      	mov	r1, r5
 80078c8:	bfcc      	ite	gt
 80078ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80078ce:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80078d2:	ec47 6b17 	vmov	d7, r6, r7
 80078d6:	ec41 0b16 	vmov	d6, r0, r1
 80078da:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80078de:	b003      	add	sp, #12
 80078e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078e4 <__copybits>:
 80078e4:	3901      	subs	r1, #1
 80078e6:	b570      	push	{r4, r5, r6, lr}
 80078e8:	1149      	asrs	r1, r1, #5
 80078ea:	6914      	ldr	r4, [r2, #16]
 80078ec:	3101      	adds	r1, #1
 80078ee:	f102 0314 	add.w	r3, r2, #20
 80078f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80078f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80078fa:	1f05      	subs	r5, r0, #4
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	d30c      	bcc.n	800791a <__copybits+0x36>
 8007900:	1aa3      	subs	r3, r4, r2
 8007902:	3b11      	subs	r3, #17
 8007904:	f023 0303 	bic.w	r3, r3, #3
 8007908:	3211      	adds	r2, #17
 800790a:	42a2      	cmp	r2, r4
 800790c:	bf88      	it	hi
 800790e:	2300      	movhi	r3, #0
 8007910:	4418      	add	r0, r3
 8007912:	2300      	movs	r3, #0
 8007914:	4288      	cmp	r0, r1
 8007916:	d305      	bcc.n	8007924 <__copybits+0x40>
 8007918:	bd70      	pop	{r4, r5, r6, pc}
 800791a:	f853 6b04 	ldr.w	r6, [r3], #4
 800791e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007922:	e7eb      	b.n	80078fc <__copybits+0x18>
 8007924:	f840 3b04 	str.w	r3, [r0], #4
 8007928:	e7f4      	b.n	8007914 <__copybits+0x30>

0800792a <__any_on>:
 800792a:	f100 0214 	add.w	r2, r0, #20
 800792e:	6900      	ldr	r0, [r0, #16]
 8007930:	114b      	asrs	r3, r1, #5
 8007932:	4298      	cmp	r0, r3
 8007934:	b510      	push	{r4, lr}
 8007936:	db11      	blt.n	800795c <__any_on+0x32>
 8007938:	dd0a      	ble.n	8007950 <__any_on+0x26>
 800793a:	f011 011f 	ands.w	r1, r1, #31
 800793e:	d007      	beq.n	8007950 <__any_on+0x26>
 8007940:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007944:	fa24 f001 	lsr.w	r0, r4, r1
 8007948:	fa00 f101 	lsl.w	r1, r0, r1
 800794c:	428c      	cmp	r4, r1
 800794e:	d10b      	bne.n	8007968 <__any_on+0x3e>
 8007950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007954:	4293      	cmp	r3, r2
 8007956:	d803      	bhi.n	8007960 <__any_on+0x36>
 8007958:	2000      	movs	r0, #0
 800795a:	bd10      	pop	{r4, pc}
 800795c:	4603      	mov	r3, r0
 800795e:	e7f7      	b.n	8007950 <__any_on+0x26>
 8007960:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007964:	2900      	cmp	r1, #0
 8007966:	d0f5      	beq.n	8007954 <__any_on+0x2a>
 8007968:	2001      	movs	r0, #1
 800796a:	e7f6      	b.n	800795a <__any_on+0x30>

0800796c <_calloc_r>:
 800796c:	b513      	push	{r0, r1, r4, lr}
 800796e:	434a      	muls	r2, r1
 8007970:	4611      	mov	r1, r2
 8007972:	9201      	str	r2, [sp, #4]
 8007974:	f000 f85a 	bl	8007a2c <_malloc_r>
 8007978:	4604      	mov	r4, r0
 800797a:	b118      	cbz	r0, 8007984 <_calloc_r+0x18>
 800797c:	9a01      	ldr	r2, [sp, #4]
 800797e:	2100      	movs	r1, #0
 8007980:	f7fc fc82 	bl	8004288 <memset>
 8007984:	4620      	mov	r0, r4
 8007986:	b002      	add	sp, #8
 8007988:	bd10      	pop	{r4, pc}
	...

0800798c <_free_r>:
 800798c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800798e:	2900      	cmp	r1, #0
 8007990:	d048      	beq.n	8007a24 <_free_r+0x98>
 8007992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007996:	9001      	str	r0, [sp, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f1a1 0404 	sub.w	r4, r1, #4
 800799e:	bfb8      	it	lt
 80079a0:	18e4      	addlt	r4, r4, r3
 80079a2:	f000 fa7b 	bl	8007e9c <__malloc_lock>
 80079a6:	4a20      	ldr	r2, [pc, #128]	; (8007a28 <_free_r+0x9c>)
 80079a8:	9801      	ldr	r0, [sp, #4]
 80079aa:	6813      	ldr	r3, [r2, #0]
 80079ac:	4615      	mov	r5, r2
 80079ae:	b933      	cbnz	r3, 80079be <_free_r+0x32>
 80079b0:	6063      	str	r3, [r4, #4]
 80079b2:	6014      	str	r4, [r2, #0]
 80079b4:	b003      	add	sp, #12
 80079b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079ba:	f000 ba75 	b.w	8007ea8 <__malloc_unlock>
 80079be:	42a3      	cmp	r3, r4
 80079c0:	d90b      	bls.n	80079da <_free_r+0x4e>
 80079c2:	6821      	ldr	r1, [r4, #0]
 80079c4:	1862      	adds	r2, r4, r1
 80079c6:	4293      	cmp	r3, r2
 80079c8:	bf04      	itt	eq
 80079ca:	681a      	ldreq	r2, [r3, #0]
 80079cc:	685b      	ldreq	r3, [r3, #4]
 80079ce:	6063      	str	r3, [r4, #4]
 80079d0:	bf04      	itt	eq
 80079d2:	1852      	addeq	r2, r2, r1
 80079d4:	6022      	streq	r2, [r4, #0]
 80079d6:	602c      	str	r4, [r5, #0]
 80079d8:	e7ec      	b.n	80079b4 <_free_r+0x28>
 80079da:	461a      	mov	r2, r3
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	b10b      	cbz	r3, 80079e4 <_free_r+0x58>
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	d9fa      	bls.n	80079da <_free_r+0x4e>
 80079e4:	6811      	ldr	r1, [r2, #0]
 80079e6:	1855      	adds	r5, r2, r1
 80079e8:	42a5      	cmp	r5, r4
 80079ea:	d10b      	bne.n	8007a04 <_free_r+0x78>
 80079ec:	6824      	ldr	r4, [r4, #0]
 80079ee:	4421      	add	r1, r4
 80079f0:	1854      	adds	r4, r2, r1
 80079f2:	42a3      	cmp	r3, r4
 80079f4:	6011      	str	r1, [r2, #0]
 80079f6:	d1dd      	bne.n	80079b4 <_free_r+0x28>
 80079f8:	681c      	ldr	r4, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	6053      	str	r3, [r2, #4]
 80079fe:	4421      	add	r1, r4
 8007a00:	6011      	str	r1, [r2, #0]
 8007a02:	e7d7      	b.n	80079b4 <_free_r+0x28>
 8007a04:	d902      	bls.n	8007a0c <_free_r+0x80>
 8007a06:	230c      	movs	r3, #12
 8007a08:	6003      	str	r3, [r0, #0]
 8007a0a:	e7d3      	b.n	80079b4 <_free_r+0x28>
 8007a0c:	6825      	ldr	r5, [r4, #0]
 8007a0e:	1961      	adds	r1, r4, r5
 8007a10:	428b      	cmp	r3, r1
 8007a12:	bf04      	itt	eq
 8007a14:	6819      	ldreq	r1, [r3, #0]
 8007a16:	685b      	ldreq	r3, [r3, #4]
 8007a18:	6063      	str	r3, [r4, #4]
 8007a1a:	bf04      	itt	eq
 8007a1c:	1949      	addeq	r1, r1, r5
 8007a1e:	6021      	streq	r1, [r4, #0]
 8007a20:	6054      	str	r4, [r2, #4]
 8007a22:	e7c7      	b.n	80079b4 <_free_r+0x28>
 8007a24:	b003      	add	sp, #12
 8007a26:	bd30      	pop	{r4, r5, pc}
 8007a28:	20000270 	.word	0x20000270

08007a2c <_malloc_r>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	1ccd      	adds	r5, r1, #3
 8007a30:	f025 0503 	bic.w	r5, r5, #3
 8007a34:	3508      	adds	r5, #8
 8007a36:	2d0c      	cmp	r5, #12
 8007a38:	bf38      	it	cc
 8007a3a:	250c      	movcc	r5, #12
 8007a3c:	2d00      	cmp	r5, #0
 8007a3e:	4606      	mov	r6, r0
 8007a40:	db01      	blt.n	8007a46 <_malloc_r+0x1a>
 8007a42:	42a9      	cmp	r1, r5
 8007a44:	d903      	bls.n	8007a4e <_malloc_r+0x22>
 8007a46:	230c      	movs	r3, #12
 8007a48:	6033      	str	r3, [r6, #0]
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a4e:	f000 fa25 	bl	8007e9c <__malloc_lock>
 8007a52:	4921      	ldr	r1, [pc, #132]	; (8007ad8 <_malloc_r+0xac>)
 8007a54:	680a      	ldr	r2, [r1, #0]
 8007a56:	4614      	mov	r4, r2
 8007a58:	b99c      	cbnz	r4, 8007a82 <_malloc_r+0x56>
 8007a5a:	4f20      	ldr	r7, [pc, #128]	; (8007adc <_malloc_r+0xb0>)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	b923      	cbnz	r3, 8007a6a <_malloc_r+0x3e>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4630      	mov	r0, r6
 8007a64:	f000 f9a0 	bl	8007da8 <_sbrk_r>
 8007a68:	6038      	str	r0, [r7, #0]
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f000 f99b 	bl	8007da8 <_sbrk_r>
 8007a72:	1c43      	adds	r3, r0, #1
 8007a74:	d123      	bne.n	8007abe <_malloc_r+0x92>
 8007a76:	230c      	movs	r3, #12
 8007a78:	6033      	str	r3, [r6, #0]
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f000 fa14 	bl	8007ea8 <__malloc_unlock>
 8007a80:	e7e3      	b.n	8007a4a <_malloc_r+0x1e>
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	1b5b      	subs	r3, r3, r5
 8007a86:	d417      	bmi.n	8007ab8 <_malloc_r+0x8c>
 8007a88:	2b0b      	cmp	r3, #11
 8007a8a:	d903      	bls.n	8007a94 <_malloc_r+0x68>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	441c      	add	r4, r3
 8007a90:	6025      	str	r5, [r4, #0]
 8007a92:	e004      	b.n	8007a9e <_malloc_r+0x72>
 8007a94:	6863      	ldr	r3, [r4, #4]
 8007a96:	42a2      	cmp	r2, r4
 8007a98:	bf0c      	ite	eq
 8007a9a:	600b      	streq	r3, [r1, #0]
 8007a9c:	6053      	strne	r3, [r2, #4]
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f000 fa02 	bl	8007ea8 <__malloc_unlock>
 8007aa4:	f104 000b 	add.w	r0, r4, #11
 8007aa8:	1d23      	adds	r3, r4, #4
 8007aaa:	f020 0007 	bic.w	r0, r0, #7
 8007aae:	1ac2      	subs	r2, r0, r3
 8007ab0:	d0cc      	beq.n	8007a4c <_malloc_r+0x20>
 8007ab2:	1a1b      	subs	r3, r3, r0
 8007ab4:	50a3      	str	r3, [r4, r2]
 8007ab6:	e7c9      	b.n	8007a4c <_malloc_r+0x20>
 8007ab8:	4622      	mov	r2, r4
 8007aba:	6864      	ldr	r4, [r4, #4]
 8007abc:	e7cc      	b.n	8007a58 <_malloc_r+0x2c>
 8007abe:	1cc4      	adds	r4, r0, #3
 8007ac0:	f024 0403 	bic.w	r4, r4, #3
 8007ac4:	42a0      	cmp	r0, r4
 8007ac6:	d0e3      	beq.n	8007a90 <_malloc_r+0x64>
 8007ac8:	1a21      	subs	r1, r4, r0
 8007aca:	4630      	mov	r0, r6
 8007acc:	f000 f96c 	bl	8007da8 <_sbrk_r>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d1dd      	bne.n	8007a90 <_malloc_r+0x64>
 8007ad4:	e7cf      	b.n	8007a76 <_malloc_r+0x4a>
 8007ad6:	bf00      	nop
 8007ad8:	20000270 	.word	0x20000270
 8007adc:	20000274 	.word	0x20000274

08007ae0 <__ssputs_r>:
 8007ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae4:	688e      	ldr	r6, [r1, #8]
 8007ae6:	429e      	cmp	r6, r3
 8007ae8:	4682      	mov	sl, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	4690      	mov	r8, r2
 8007aee:	461f      	mov	r7, r3
 8007af0:	d838      	bhi.n	8007b64 <__ssputs_r+0x84>
 8007af2:	898a      	ldrh	r2, [r1, #12]
 8007af4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007af8:	d032      	beq.n	8007b60 <__ssputs_r+0x80>
 8007afa:	6825      	ldr	r5, [r4, #0]
 8007afc:	6909      	ldr	r1, [r1, #16]
 8007afe:	eba5 0901 	sub.w	r9, r5, r1
 8007b02:	6965      	ldr	r5, [r4, #20]
 8007b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	444b      	add	r3, r9
 8007b10:	106d      	asrs	r5, r5, #1
 8007b12:	429d      	cmp	r5, r3
 8007b14:	bf38      	it	cc
 8007b16:	461d      	movcc	r5, r3
 8007b18:	0553      	lsls	r3, r2, #21
 8007b1a:	d531      	bpl.n	8007b80 <__ssputs_r+0xa0>
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7ff ff85 	bl	8007a2c <_malloc_r>
 8007b22:	4606      	mov	r6, r0
 8007b24:	b950      	cbnz	r0, 8007b3c <__ssputs_r+0x5c>
 8007b26:	230c      	movs	r3, #12
 8007b28:	f8ca 3000 	str.w	r3, [sl]
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b32:	81a3      	strh	r3, [r4, #12]
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295
 8007b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3c:	6921      	ldr	r1, [r4, #16]
 8007b3e:	464a      	mov	r2, r9
 8007b40:	f7ff fa4a 	bl	8006fd8 <memcpy>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4e:	81a3      	strh	r3, [r4, #12]
 8007b50:	6126      	str	r6, [r4, #16]
 8007b52:	6165      	str	r5, [r4, #20]
 8007b54:	444e      	add	r6, r9
 8007b56:	eba5 0509 	sub.w	r5, r5, r9
 8007b5a:	6026      	str	r6, [r4, #0]
 8007b5c:	60a5      	str	r5, [r4, #8]
 8007b5e:	463e      	mov	r6, r7
 8007b60:	42be      	cmp	r6, r7
 8007b62:	d900      	bls.n	8007b66 <__ssputs_r+0x86>
 8007b64:	463e      	mov	r6, r7
 8007b66:	4632      	mov	r2, r6
 8007b68:	6820      	ldr	r0, [r4, #0]
 8007b6a:	4641      	mov	r1, r8
 8007b6c:	f000 f97c 	bl	8007e68 <memmove>
 8007b70:	68a3      	ldr	r3, [r4, #8]
 8007b72:	6822      	ldr	r2, [r4, #0]
 8007b74:	1b9b      	subs	r3, r3, r6
 8007b76:	4432      	add	r2, r6
 8007b78:	60a3      	str	r3, [r4, #8]
 8007b7a:	6022      	str	r2, [r4, #0]
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e7db      	b.n	8007b38 <__ssputs_r+0x58>
 8007b80:	462a      	mov	r2, r5
 8007b82:	f000 f997 	bl	8007eb4 <_realloc_r>
 8007b86:	4606      	mov	r6, r0
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d1e1      	bne.n	8007b50 <__ssputs_r+0x70>
 8007b8c:	6921      	ldr	r1, [r4, #16]
 8007b8e:	4650      	mov	r0, sl
 8007b90:	f7ff fefc 	bl	800798c <_free_r>
 8007b94:	e7c7      	b.n	8007b26 <__ssputs_r+0x46>
	...

08007b98 <_svfiprintf_r>:
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	4698      	mov	r8, r3
 8007b9e:	898b      	ldrh	r3, [r1, #12]
 8007ba0:	061b      	lsls	r3, r3, #24
 8007ba2:	b09d      	sub	sp, #116	; 0x74
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	460d      	mov	r5, r1
 8007ba8:	4614      	mov	r4, r2
 8007baa:	d50e      	bpl.n	8007bca <_svfiprintf_r+0x32>
 8007bac:	690b      	ldr	r3, [r1, #16]
 8007bae:	b963      	cbnz	r3, 8007bca <_svfiprintf_r+0x32>
 8007bb0:	2140      	movs	r1, #64	; 0x40
 8007bb2:	f7ff ff3b 	bl	8007a2c <_malloc_r>
 8007bb6:	6028      	str	r0, [r5, #0]
 8007bb8:	6128      	str	r0, [r5, #16]
 8007bba:	b920      	cbnz	r0, 8007bc6 <_svfiprintf_r+0x2e>
 8007bbc:	230c      	movs	r3, #12
 8007bbe:	603b      	str	r3, [r7, #0]
 8007bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc4:	e0d1      	b.n	8007d6a <_svfiprintf_r+0x1d2>
 8007bc6:	2340      	movs	r3, #64	; 0x40
 8007bc8:	616b      	str	r3, [r5, #20]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bce:	2320      	movs	r3, #32
 8007bd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bd8:	2330      	movs	r3, #48	; 0x30
 8007bda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d84 <_svfiprintf_r+0x1ec>
 8007bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007be2:	f04f 0901 	mov.w	r9, #1
 8007be6:	4623      	mov	r3, r4
 8007be8:	469a      	mov	sl, r3
 8007bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bee:	b10a      	cbz	r2, 8007bf4 <_svfiprintf_r+0x5c>
 8007bf0:	2a25      	cmp	r2, #37	; 0x25
 8007bf2:	d1f9      	bne.n	8007be8 <_svfiprintf_r+0x50>
 8007bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8007bf8:	d00b      	beq.n	8007c12 <_svfiprintf_r+0x7a>
 8007bfa:	465b      	mov	r3, fp
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	4629      	mov	r1, r5
 8007c00:	4638      	mov	r0, r7
 8007c02:	f7ff ff6d 	bl	8007ae0 <__ssputs_r>
 8007c06:	3001      	adds	r0, #1
 8007c08:	f000 80aa 	beq.w	8007d60 <_svfiprintf_r+0x1c8>
 8007c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c0e:	445a      	add	r2, fp
 8007c10:	9209      	str	r2, [sp, #36]	; 0x24
 8007c12:	f89a 3000 	ldrb.w	r3, [sl]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 80a2 	beq.w	8007d60 <_svfiprintf_r+0x1c8>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c26:	f10a 0a01 	add.w	sl, sl, #1
 8007c2a:	9304      	str	r3, [sp, #16]
 8007c2c:	9307      	str	r3, [sp, #28]
 8007c2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c32:	931a      	str	r3, [sp, #104]	; 0x68
 8007c34:	4654      	mov	r4, sl
 8007c36:	2205      	movs	r2, #5
 8007c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c3c:	4851      	ldr	r0, [pc, #324]	; (8007d84 <_svfiprintf_r+0x1ec>)
 8007c3e:	f7f8 fb17 	bl	8000270 <memchr>
 8007c42:	9a04      	ldr	r2, [sp, #16]
 8007c44:	b9d8      	cbnz	r0, 8007c7e <_svfiprintf_r+0xe6>
 8007c46:	06d0      	lsls	r0, r2, #27
 8007c48:	bf44      	itt	mi
 8007c4a:	2320      	movmi	r3, #32
 8007c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c50:	0711      	lsls	r1, r2, #28
 8007c52:	bf44      	itt	mi
 8007c54:	232b      	movmi	r3, #43	; 0x2b
 8007c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c60:	d015      	beq.n	8007c8e <_svfiprintf_r+0xf6>
 8007c62:	9a07      	ldr	r2, [sp, #28]
 8007c64:	4654      	mov	r4, sl
 8007c66:	2000      	movs	r0, #0
 8007c68:	f04f 0c0a 	mov.w	ip, #10
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c72:	3b30      	subs	r3, #48	; 0x30
 8007c74:	2b09      	cmp	r3, #9
 8007c76:	d94e      	bls.n	8007d16 <_svfiprintf_r+0x17e>
 8007c78:	b1b0      	cbz	r0, 8007ca8 <_svfiprintf_r+0x110>
 8007c7a:	9207      	str	r2, [sp, #28]
 8007c7c:	e014      	b.n	8007ca8 <_svfiprintf_r+0x110>
 8007c7e:	eba0 0308 	sub.w	r3, r0, r8
 8007c82:	fa09 f303 	lsl.w	r3, r9, r3
 8007c86:	4313      	orrs	r3, r2
 8007c88:	9304      	str	r3, [sp, #16]
 8007c8a:	46a2      	mov	sl, r4
 8007c8c:	e7d2      	b.n	8007c34 <_svfiprintf_r+0x9c>
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	1d19      	adds	r1, r3, #4
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	9103      	str	r1, [sp, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bfbb      	ittet	lt
 8007c9a:	425b      	neglt	r3, r3
 8007c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8007ca0:	9307      	strge	r3, [sp, #28]
 8007ca2:	9307      	strlt	r3, [sp, #28]
 8007ca4:	bfb8      	it	lt
 8007ca6:	9204      	strlt	r2, [sp, #16]
 8007ca8:	7823      	ldrb	r3, [r4, #0]
 8007caa:	2b2e      	cmp	r3, #46	; 0x2e
 8007cac:	d10c      	bne.n	8007cc8 <_svfiprintf_r+0x130>
 8007cae:	7863      	ldrb	r3, [r4, #1]
 8007cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007cb2:	d135      	bne.n	8007d20 <_svfiprintf_r+0x188>
 8007cb4:	9b03      	ldr	r3, [sp, #12]
 8007cb6:	1d1a      	adds	r2, r3, #4
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	9203      	str	r2, [sp, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	bfb8      	it	lt
 8007cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cc4:	3402      	adds	r4, #2
 8007cc6:	9305      	str	r3, [sp, #20]
 8007cc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d94 <_svfiprintf_r+0x1fc>
 8007ccc:	7821      	ldrb	r1, [r4, #0]
 8007cce:	2203      	movs	r2, #3
 8007cd0:	4650      	mov	r0, sl
 8007cd2:	f7f8 facd 	bl	8000270 <memchr>
 8007cd6:	b140      	cbz	r0, 8007cea <_svfiprintf_r+0x152>
 8007cd8:	2340      	movs	r3, #64	; 0x40
 8007cda:	eba0 000a 	sub.w	r0, r0, sl
 8007cde:	fa03 f000 	lsl.w	r0, r3, r0
 8007ce2:	9b04      	ldr	r3, [sp, #16]
 8007ce4:	4303      	orrs	r3, r0
 8007ce6:	3401      	adds	r4, #1
 8007ce8:	9304      	str	r3, [sp, #16]
 8007cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cee:	4826      	ldr	r0, [pc, #152]	; (8007d88 <_svfiprintf_r+0x1f0>)
 8007cf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cf4:	2206      	movs	r2, #6
 8007cf6:	f7f8 fabb 	bl	8000270 <memchr>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d038      	beq.n	8007d70 <_svfiprintf_r+0x1d8>
 8007cfe:	4b23      	ldr	r3, [pc, #140]	; (8007d8c <_svfiprintf_r+0x1f4>)
 8007d00:	bb1b      	cbnz	r3, 8007d4a <_svfiprintf_r+0x1b2>
 8007d02:	9b03      	ldr	r3, [sp, #12]
 8007d04:	3307      	adds	r3, #7
 8007d06:	f023 0307 	bic.w	r3, r3, #7
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	9303      	str	r3, [sp, #12]
 8007d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d10:	4433      	add	r3, r6
 8007d12:	9309      	str	r3, [sp, #36]	; 0x24
 8007d14:	e767      	b.n	8007be6 <_svfiprintf_r+0x4e>
 8007d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	e7a5      	b.n	8007c6c <_svfiprintf_r+0xd4>
 8007d20:	2300      	movs	r3, #0
 8007d22:	3401      	adds	r4, #1
 8007d24:	9305      	str	r3, [sp, #20]
 8007d26:	4619      	mov	r1, r3
 8007d28:	f04f 0c0a 	mov.w	ip, #10
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d32:	3a30      	subs	r2, #48	; 0x30
 8007d34:	2a09      	cmp	r2, #9
 8007d36:	d903      	bls.n	8007d40 <_svfiprintf_r+0x1a8>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0c5      	beq.n	8007cc8 <_svfiprintf_r+0x130>
 8007d3c:	9105      	str	r1, [sp, #20]
 8007d3e:	e7c3      	b.n	8007cc8 <_svfiprintf_r+0x130>
 8007d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d44:	4604      	mov	r4, r0
 8007d46:	2301      	movs	r3, #1
 8007d48:	e7f0      	b.n	8007d2c <_svfiprintf_r+0x194>
 8007d4a:	ab03      	add	r3, sp, #12
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	462a      	mov	r2, r5
 8007d50:	4b0f      	ldr	r3, [pc, #60]	; (8007d90 <_svfiprintf_r+0x1f8>)
 8007d52:	a904      	add	r1, sp, #16
 8007d54:	4638      	mov	r0, r7
 8007d56:	f7fc fb2f 	bl	80043b8 <_printf_float>
 8007d5a:	1c42      	adds	r2, r0, #1
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	d1d6      	bne.n	8007d0e <_svfiprintf_r+0x176>
 8007d60:	89ab      	ldrh	r3, [r5, #12]
 8007d62:	065b      	lsls	r3, r3, #25
 8007d64:	f53f af2c 	bmi.w	8007bc0 <_svfiprintf_r+0x28>
 8007d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d6a:	b01d      	add	sp, #116	; 0x74
 8007d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d70:	ab03      	add	r3, sp, #12
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	462a      	mov	r2, r5
 8007d76:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <_svfiprintf_r+0x1f8>)
 8007d78:	a904      	add	r1, sp, #16
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	f7fc fda8 	bl	80048d0 <_printf_i>
 8007d80:	e7eb      	b.n	8007d5a <_svfiprintf_r+0x1c2>
 8007d82:	bf00      	nop
 8007d84:	08008e24 	.word	0x08008e24
 8007d88:	08008e2e 	.word	0x08008e2e
 8007d8c:	080043b9 	.word	0x080043b9
 8007d90:	08007ae1 	.word	0x08007ae1
 8007d94:	08008e2a 	.word	0x08008e2a

08007d98 <nan>:
 8007d98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007da0 <nan+0x8>
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	00000000 	.word	0x00000000
 8007da4:	7ff80000 	.word	0x7ff80000

08007da8 <_sbrk_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d06      	ldr	r5, [pc, #24]	; (8007dc4 <_sbrk_r+0x1c>)
 8007dac:	2300      	movs	r3, #0
 8007dae:	4604      	mov	r4, r0
 8007db0:	4608      	mov	r0, r1
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	f7f9 fad8 	bl	8001368 <_sbrk>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_sbrk_r+0x1a>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_sbrk_r+0x1a>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	200004e8 	.word	0x200004e8

08007dc8 <strncmp>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	b16a      	cbz	r2, 8007de8 <strncmp+0x20>
 8007dcc:	3901      	subs	r1, #1
 8007dce:	1884      	adds	r4, r0, r2
 8007dd0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007dd4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d103      	bne.n	8007de4 <strncmp+0x1c>
 8007ddc:	42a0      	cmp	r0, r4
 8007dde:	d001      	beq.n	8007de4 <strncmp+0x1c>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1f5      	bne.n	8007dd0 <strncmp+0x8>
 8007de4:	1a98      	subs	r0, r3, r2
 8007de6:	bd10      	pop	{r4, pc}
 8007de8:	4610      	mov	r0, r2
 8007dea:	e7fc      	b.n	8007de6 <strncmp+0x1e>

08007dec <__ascii_wctomb>:
 8007dec:	b149      	cbz	r1, 8007e02 <__ascii_wctomb+0x16>
 8007dee:	2aff      	cmp	r2, #255	; 0xff
 8007df0:	bf85      	ittet	hi
 8007df2:	238a      	movhi	r3, #138	; 0x8a
 8007df4:	6003      	strhi	r3, [r0, #0]
 8007df6:	700a      	strbls	r2, [r1, #0]
 8007df8:	f04f 30ff 	movhi.w	r0, #4294967295
 8007dfc:	bf98      	it	ls
 8007dfe:	2001      	movls	r0, #1
 8007e00:	4770      	bx	lr
 8007e02:	4608      	mov	r0, r1
 8007e04:	4770      	bx	lr
	...

08007e08 <__assert_func>:
 8007e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <__assert_func+0x2c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4605      	mov	r5, r0
 8007e14:	68d8      	ldr	r0, [r3, #12]
 8007e16:	b14c      	cbz	r4, 8007e2c <__assert_func+0x24>
 8007e18:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <__assert_func+0x30>)
 8007e1a:	9100      	str	r1, [sp, #0]
 8007e1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e20:	4906      	ldr	r1, [pc, #24]	; (8007e3c <__assert_func+0x34>)
 8007e22:	462b      	mov	r3, r5
 8007e24:	f000 f80e 	bl	8007e44 <fiprintf>
 8007e28:	f000 fa84 	bl	8008334 <abort>
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <__assert_func+0x38>)
 8007e2e:	461c      	mov	r4, r3
 8007e30:	e7f3      	b.n	8007e1a <__assert_func+0x12>
 8007e32:	bf00      	nop
 8007e34:	2000007c 	.word	0x2000007c
 8007e38:	08008e35 	.word	0x08008e35
 8007e3c:	08008e42 	.word	0x08008e42
 8007e40:	08008e70 	.word	0x08008e70

08007e44 <fiprintf>:
 8007e44:	b40e      	push	{r1, r2, r3}
 8007e46:	b503      	push	{r0, r1, lr}
 8007e48:	4601      	mov	r1, r0
 8007e4a:	ab03      	add	r3, sp, #12
 8007e4c:	4805      	ldr	r0, [pc, #20]	; (8007e64 <fiprintf+0x20>)
 8007e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e52:	6800      	ldr	r0, [r0, #0]
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	f000 f87d 	bl	8007f54 <_vfiprintf_r>
 8007e5a:	b002      	add	sp, #8
 8007e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e60:	b003      	add	sp, #12
 8007e62:	4770      	bx	lr
 8007e64:	2000007c 	.word	0x2000007c

08007e68 <memmove>:
 8007e68:	4288      	cmp	r0, r1
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	eb01 0402 	add.w	r4, r1, r2
 8007e70:	d902      	bls.n	8007e78 <memmove+0x10>
 8007e72:	4284      	cmp	r4, r0
 8007e74:	4623      	mov	r3, r4
 8007e76:	d807      	bhi.n	8007e88 <memmove+0x20>
 8007e78:	1e43      	subs	r3, r0, #1
 8007e7a:	42a1      	cmp	r1, r4
 8007e7c:	d008      	beq.n	8007e90 <memmove+0x28>
 8007e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e86:	e7f8      	b.n	8007e7a <memmove+0x12>
 8007e88:	4402      	add	r2, r0
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	428a      	cmp	r2, r1
 8007e8e:	d100      	bne.n	8007e92 <memmove+0x2a>
 8007e90:	bd10      	pop	{r4, pc}
 8007e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e9a:	e7f7      	b.n	8007e8c <memmove+0x24>

08007e9c <__malloc_lock>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	; (8007ea4 <__malloc_lock+0x8>)
 8007e9e:	f000 bc09 	b.w	80086b4 <__retarget_lock_acquire_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	200004f0 	.word	0x200004f0

08007ea8 <__malloc_unlock>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__malloc_unlock+0x8>)
 8007eaa:	f000 bc04 	b.w	80086b6 <__retarget_lock_release_recursive>
 8007eae:	bf00      	nop
 8007eb0:	200004f0 	.word	0x200004f0

08007eb4 <_realloc_r>:
 8007eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	4614      	mov	r4, r2
 8007eba:	460e      	mov	r6, r1
 8007ebc:	b921      	cbnz	r1, 8007ec8 <_realloc_r+0x14>
 8007ebe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	f7ff bdb2 	b.w	8007a2c <_malloc_r>
 8007ec8:	b922      	cbnz	r2, 8007ed4 <_realloc_r+0x20>
 8007eca:	f7ff fd5f 	bl	800798c <_free_r>
 8007ece:	4625      	mov	r5, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed4:	f000 fc54 	bl	8008780 <_malloc_usable_size_r>
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	d20f      	bcs.n	8007efc <_realloc_r+0x48>
 8007edc:	4621      	mov	r1, r4
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f7ff fda4 	bl	8007a2c <_malloc_r>
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d0f2      	beq.n	8007ed0 <_realloc_r+0x1c>
 8007eea:	4631      	mov	r1, r6
 8007eec:	4622      	mov	r2, r4
 8007eee:	f7ff f873 	bl	8006fd8 <memcpy>
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f7ff fd49 	bl	800798c <_free_r>
 8007efa:	e7e9      	b.n	8007ed0 <_realloc_r+0x1c>
 8007efc:	4635      	mov	r5, r6
 8007efe:	e7e7      	b.n	8007ed0 <_realloc_r+0x1c>

08007f00 <__sfputc_r>:
 8007f00:	6893      	ldr	r3, [r2, #8]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	b410      	push	{r4}
 8007f08:	6093      	str	r3, [r2, #8]
 8007f0a:	da08      	bge.n	8007f1e <__sfputc_r+0x1e>
 8007f0c:	6994      	ldr	r4, [r2, #24]
 8007f0e:	42a3      	cmp	r3, r4
 8007f10:	db01      	blt.n	8007f16 <__sfputc_r+0x16>
 8007f12:	290a      	cmp	r1, #10
 8007f14:	d103      	bne.n	8007f1e <__sfputc_r+0x1e>
 8007f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f1a:	f000 b94b 	b.w	80081b4 <__swbuf_r>
 8007f1e:	6813      	ldr	r3, [r2, #0]
 8007f20:	1c58      	adds	r0, r3, #1
 8007f22:	6010      	str	r0, [r2, #0]
 8007f24:	7019      	strb	r1, [r3, #0]
 8007f26:	4608      	mov	r0, r1
 8007f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <__sfputs_r>:
 8007f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f30:	4606      	mov	r6, r0
 8007f32:	460f      	mov	r7, r1
 8007f34:	4614      	mov	r4, r2
 8007f36:	18d5      	adds	r5, r2, r3
 8007f38:	42ac      	cmp	r4, r5
 8007f3a:	d101      	bne.n	8007f40 <__sfputs_r+0x12>
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	e007      	b.n	8007f50 <__sfputs_r+0x22>
 8007f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f44:	463a      	mov	r2, r7
 8007f46:	4630      	mov	r0, r6
 8007f48:	f7ff ffda 	bl	8007f00 <__sfputc_r>
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d1f3      	bne.n	8007f38 <__sfputs_r+0xa>
 8007f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f54 <_vfiprintf_r>:
 8007f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	460d      	mov	r5, r1
 8007f5a:	b09d      	sub	sp, #116	; 0x74
 8007f5c:	4614      	mov	r4, r2
 8007f5e:	4698      	mov	r8, r3
 8007f60:	4606      	mov	r6, r0
 8007f62:	b118      	cbz	r0, 8007f6c <_vfiprintf_r+0x18>
 8007f64:	6983      	ldr	r3, [r0, #24]
 8007f66:	b90b      	cbnz	r3, 8007f6c <_vfiprintf_r+0x18>
 8007f68:	f000 fb06 	bl	8008578 <__sinit>
 8007f6c:	4b89      	ldr	r3, [pc, #548]	; (8008194 <_vfiprintf_r+0x240>)
 8007f6e:	429d      	cmp	r5, r3
 8007f70:	d11b      	bne.n	8007faa <_vfiprintf_r+0x56>
 8007f72:	6875      	ldr	r5, [r6, #4]
 8007f74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f76:	07d9      	lsls	r1, r3, #31
 8007f78:	d405      	bmi.n	8007f86 <_vfiprintf_r+0x32>
 8007f7a:	89ab      	ldrh	r3, [r5, #12]
 8007f7c:	059a      	lsls	r2, r3, #22
 8007f7e:	d402      	bmi.n	8007f86 <_vfiprintf_r+0x32>
 8007f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f82:	f000 fb97 	bl	80086b4 <__retarget_lock_acquire_recursive>
 8007f86:	89ab      	ldrh	r3, [r5, #12]
 8007f88:	071b      	lsls	r3, r3, #28
 8007f8a:	d501      	bpl.n	8007f90 <_vfiprintf_r+0x3c>
 8007f8c:	692b      	ldr	r3, [r5, #16]
 8007f8e:	b9eb      	cbnz	r3, 8007fcc <_vfiprintf_r+0x78>
 8007f90:	4629      	mov	r1, r5
 8007f92:	4630      	mov	r0, r6
 8007f94:	f000 f960 	bl	8008258 <__swsetup_r>
 8007f98:	b1c0      	cbz	r0, 8007fcc <_vfiprintf_r+0x78>
 8007f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f9c:	07dc      	lsls	r4, r3, #31
 8007f9e:	d50e      	bpl.n	8007fbe <_vfiprintf_r+0x6a>
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa4:	b01d      	add	sp, #116	; 0x74
 8007fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007faa:	4b7b      	ldr	r3, [pc, #492]	; (8008198 <_vfiprintf_r+0x244>)
 8007fac:	429d      	cmp	r5, r3
 8007fae:	d101      	bne.n	8007fb4 <_vfiprintf_r+0x60>
 8007fb0:	68b5      	ldr	r5, [r6, #8]
 8007fb2:	e7df      	b.n	8007f74 <_vfiprintf_r+0x20>
 8007fb4:	4b79      	ldr	r3, [pc, #484]	; (800819c <_vfiprintf_r+0x248>)
 8007fb6:	429d      	cmp	r5, r3
 8007fb8:	bf08      	it	eq
 8007fba:	68f5      	ldreq	r5, [r6, #12]
 8007fbc:	e7da      	b.n	8007f74 <_vfiprintf_r+0x20>
 8007fbe:	89ab      	ldrh	r3, [r5, #12]
 8007fc0:	0598      	lsls	r0, r3, #22
 8007fc2:	d4ed      	bmi.n	8007fa0 <_vfiprintf_r+0x4c>
 8007fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fc6:	f000 fb76 	bl	80086b6 <__retarget_lock_release_recursive>
 8007fca:	e7e9      	b.n	8007fa0 <_vfiprintf_r+0x4c>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd0:	2320      	movs	r3, #32
 8007fd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fda:	2330      	movs	r3, #48	; 0x30
 8007fdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081a0 <_vfiprintf_r+0x24c>
 8007fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fe4:	f04f 0901 	mov.w	r9, #1
 8007fe8:	4623      	mov	r3, r4
 8007fea:	469a      	mov	sl, r3
 8007fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ff0:	b10a      	cbz	r2, 8007ff6 <_vfiprintf_r+0xa2>
 8007ff2:	2a25      	cmp	r2, #37	; 0x25
 8007ff4:	d1f9      	bne.n	8007fea <_vfiprintf_r+0x96>
 8007ff6:	ebba 0b04 	subs.w	fp, sl, r4
 8007ffa:	d00b      	beq.n	8008014 <_vfiprintf_r+0xc0>
 8007ffc:	465b      	mov	r3, fp
 8007ffe:	4622      	mov	r2, r4
 8008000:	4629      	mov	r1, r5
 8008002:	4630      	mov	r0, r6
 8008004:	f7ff ff93 	bl	8007f2e <__sfputs_r>
 8008008:	3001      	adds	r0, #1
 800800a:	f000 80aa 	beq.w	8008162 <_vfiprintf_r+0x20e>
 800800e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008010:	445a      	add	r2, fp
 8008012:	9209      	str	r2, [sp, #36]	; 0x24
 8008014:	f89a 3000 	ldrb.w	r3, [sl]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 80a2 	beq.w	8008162 <_vfiprintf_r+0x20e>
 800801e:	2300      	movs	r3, #0
 8008020:	f04f 32ff 	mov.w	r2, #4294967295
 8008024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008028:	f10a 0a01 	add.w	sl, sl, #1
 800802c:	9304      	str	r3, [sp, #16]
 800802e:	9307      	str	r3, [sp, #28]
 8008030:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008034:	931a      	str	r3, [sp, #104]	; 0x68
 8008036:	4654      	mov	r4, sl
 8008038:	2205      	movs	r2, #5
 800803a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800803e:	4858      	ldr	r0, [pc, #352]	; (80081a0 <_vfiprintf_r+0x24c>)
 8008040:	f7f8 f916 	bl	8000270 <memchr>
 8008044:	9a04      	ldr	r2, [sp, #16]
 8008046:	b9d8      	cbnz	r0, 8008080 <_vfiprintf_r+0x12c>
 8008048:	06d1      	lsls	r1, r2, #27
 800804a:	bf44      	itt	mi
 800804c:	2320      	movmi	r3, #32
 800804e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008052:	0713      	lsls	r3, r2, #28
 8008054:	bf44      	itt	mi
 8008056:	232b      	movmi	r3, #43	; 0x2b
 8008058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800805c:	f89a 3000 	ldrb.w	r3, [sl]
 8008060:	2b2a      	cmp	r3, #42	; 0x2a
 8008062:	d015      	beq.n	8008090 <_vfiprintf_r+0x13c>
 8008064:	9a07      	ldr	r2, [sp, #28]
 8008066:	4654      	mov	r4, sl
 8008068:	2000      	movs	r0, #0
 800806a:	f04f 0c0a 	mov.w	ip, #10
 800806e:	4621      	mov	r1, r4
 8008070:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008074:	3b30      	subs	r3, #48	; 0x30
 8008076:	2b09      	cmp	r3, #9
 8008078:	d94e      	bls.n	8008118 <_vfiprintf_r+0x1c4>
 800807a:	b1b0      	cbz	r0, 80080aa <_vfiprintf_r+0x156>
 800807c:	9207      	str	r2, [sp, #28]
 800807e:	e014      	b.n	80080aa <_vfiprintf_r+0x156>
 8008080:	eba0 0308 	sub.w	r3, r0, r8
 8008084:	fa09 f303 	lsl.w	r3, r9, r3
 8008088:	4313      	orrs	r3, r2
 800808a:	9304      	str	r3, [sp, #16]
 800808c:	46a2      	mov	sl, r4
 800808e:	e7d2      	b.n	8008036 <_vfiprintf_r+0xe2>
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	1d19      	adds	r1, r3, #4
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	9103      	str	r1, [sp, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	bfbb      	ittet	lt
 800809c:	425b      	neglt	r3, r3
 800809e:	f042 0202 	orrlt.w	r2, r2, #2
 80080a2:	9307      	strge	r3, [sp, #28]
 80080a4:	9307      	strlt	r3, [sp, #28]
 80080a6:	bfb8      	it	lt
 80080a8:	9204      	strlt	r2, [sp, #16]
 80080aa:	7823      	ldrb	r3, [r4, #0]
 80080ac:	2b2e      	cmp	r3, #46	; 0x2e
 80080ae:	d10c      	bne.n	80080ca <_vfiprintf_r+0x176>
 80080b0:	7863      	ldrb	r3, [r4, #1]
 80080b2:	2b2a      	cmp	r3, #42	; 0x2a
 80080b4:	d135      	bne.n	8008122 <_vfiprintf_r+0x1ce>
 80080b6:	9b03      	ldr	r3, [sp, #12]
 80080b8:	1d1a      	adds	r2, r3, #4
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	9203      	str	r2, [sp, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bfb8      	it	lt
 80080c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80080c6:	3402      	adds	r4, #2
 80080c8:	9305      	str	r3, [sp, #20]
 80080ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081b0 <_vfiprintf_r+0x25c>
 80080ce:	7821      	ldrb	r1, [r4, #0]
 80080d0:	2203      	movs	r2, #3
 80080d2:	4650      	mov	r0, sl
 80080d4:	f7f8 f8cc 	bl	8000270 <memchr>
 80080d8:	b140      	cbz	r0, 80080ec <_vfiprintf_r+0x198>
 80080da:	2340      	movs	r3, #64	; 0x40
 80080dc:	eba0 000a 	sub.w	r0, r0, sl
 80080e0:	fa03 f000 	lsl.w	r0, r3, r0
 80080e4:	9b04      	ldr	r3, [sp, #16]
 80080e6:	4303      	orrs	r3, r0
 80080e8:	3401      	adds	r4, #1
 80080ea:	9304      	str	r3, [sp, #16]
 80080ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f0:	482c      	ldr	r0, [pc, #176]	; (80081a4 <_vfiprintf_r+0x250>)
 80080f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080f6:	2206      	movs	r2, #6
 80080f8:	f7f8 f8ba 	bl	8000270 <memchr>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d03f      	beq.n	8008180 <_vfiprintf_r+0x22c>
 8008100:	4b29      	ldr	r3, [pc, #164]	; (80081a8 <_vfiprintf_r+0x254>)
 8008102:	bb1b      	cbnz	r3, 800814c <_vfiprintf_r+0x1f8>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	3307      	adds	r3, #7
 8008108:	f023 0307 	bic.w	r3, r3, #7
 800810c:	3308      	adds	r3, #8
 800810e:	9303      	str	r3, [sp, #12]
 8008110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008112:	443b      	add	r3, r7
 8008114:	9309      	str	r3, [sp, #36]	; 0x24
 8008116:	e767      	b.n	8007fe8 <_vfiprintf_r+0x94>
 8008118:	fb0c 3202 	mla	r2, ip, r2, r3
 800811c:	460c      	mov	r4, r1
 800811e:	2001      	movs	r0, #1
 8008120:	e7a5      	b.n	800806e <_vfiprintf_r+0x11a>
 8008122:	2300      	movs	r3, #0
 8008124:	3401      	adds	r4, #1
 8008126:	9305      	str	r3, [sp, #20]
 8008128:	4619      	mov	r1, r3
 800812a:	f04f 0c0a 	mov.w	ip, #10
 800812e:	4620      	mov	r0, r4
 8008130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008134:	3a30      	subs	r2, #48	; 0x30
 8008136:	2a09      	cmp	r2, #9
 8008138:	d903      	bls.n	8008142 <_vfiprintf_r+0x1ee>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0c5      	beq.n	80080ca <_vfiprintf_r+0x176>
 800813e:	9105      	str	r1, [sp, #20]
 8008140:	e7c3      	b.n	80080ca <_vfiprintf_r+0x176>
 8008142:	fb0c 2101 	mla	r1, ip, r1, r2
 8008146:	4604      	mov	r4, r0
 8008148:	2301      	movs	r3, #1
 800814a:	e7f0      	b.n	800812e <_vfiprintf_r+0x1da>
 800814c:	ab03      	add	r3, sp, #12
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	462a      	mov	r2, r5
 8008152:	4b16      	ldr	r3, [pc, #88]	; (80081ac <_vfiprintf_r+0x258>)
 8008154:	a904      	add	r1, sp, #16
 8008156:	4630      	mov	r0, r6
 8008158:	f7fc f92e 	bl	80043b8 <_printf_float>
 800815c:	4607      	mov	r7, r0
 800815e:	1c78      	adds	r0, r7, #1
 8008160:	d1d6      	bne.n	8008110 <_vfiprintf_r+0x1bc>
 8008162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008164:	07d9      	lsls	r1, r3, #31
 8008166:	d405      	bmi.n	8008174 <_vfiprintf_r+0x220>
 8008168:	89ab      	ldrh	r3, [r5, #12]
 800816a:	059a      	lsls	r2, r3, #22
 800816c:	d402      	bmi.n	8008174 <_vfiprintf_r+0x220>
 800816e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008170:	f000 faa1 	bl	80086b6 <__retarget_lock_release_recursive>
 8008174:	89ab      	ldrh	r3, [r5, #12]
 8008176:	065b      	lsls	r3, r3, #25
 8008178:	f53f af12 	bmi.w	8007fa0 <_vfiprintf_r+0x4c>
 800817c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800817e:	e711      	b.n	8007fa4 <_vfiprintf_r+0x50>
 8008180:	ab03      	add	r3, sp, #12
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	462a      	mov	r2, r5
 8008186:	4b09      	ldr	r3, [pc, #36]	; (80081ac <_vfiprintf_r+0x258>)
 8008188:	a904      	add	r1, sp, #16
 800818a:	4630      	mov	r0, r6
 800818c:	f7fc fba0 	bl	80048d0 <_printf_i>
 8008190:	e7e4      	b.n	800815c <_vfiprintf_r+0x208>
 8008192:	bf00      	nop
 8008194:	08008e94 	.word	0x08008e94
 8008198:	08008eb4 	.word	0x08008eb4
 800819c:	08008e74 	.word	0x08008e74
 80081a0:	08008e24 	.word	0x08008e24
 80081a4:	08008e2e 	.word	0x08008e2e
 80081a8:	080043b9 	.word	0x080043b9
 80081ac:	08007f2f 	.word	0x08007f2f
 80081b0:	08008e2a 	.word	0x08008e2a

080081b4 <__swbuf_r>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	460e      	mov	r6, r1
 80081b8:	4614      	mov	r4, r2
 80081ba:	4605      	mov	r5, r0
 80081bc:	b118      	cbz	r0, 80081c6 <__swbuf_r+0x12>
 80081be:	6983      	ldr	r3, [r0, #24]
 80081c0:	b90b      	cbnz	r3, 80081c6 <__swbuf_r+0x12>
 80081c2:	f000 f9d9 	bl	8008578 <__sinit>
 80081c6:	4b21      	ldr	r3, [pc, #132]	; (800824c <__swbuf_r+0x98>)
 80081c8:	429c      	cmp	r4, r3
 80081ca:	d12b      	bne.n	8008224 <__swbuf_r+0x70>
 80081cc:	686c      	ldr	r4, [r5, #4]
 80081ce:	69a3      	ldr	r3, [r4, #24]
 80081d0:	60a3      	str	r3, [r4, #8]
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	071a      	lsls	r2, r3, #28
 80081d6:	d52f      	bpl.n	8008238 <__swbuf_r+0x84>
 80081d8:	6923      	ldr	r3, [r4, #16]
 80081da:	b36b      	cbz	r3, 8008238 <__swbuf_r+0x84>
 80081dc:	6923      	ldr	r3, [r4, #16]
 80081de:	6820      	ldr	r0, [r4, #0]
 80081e0:	1ac0      	subs	r0, r0, r3
 80081e2:	6963      	ldr	r3, [r4, #20]
 80081e4:	b2f6      	uxtb	r6, r6
 80081e6:	4283      	cmp	r3, r0
 80081e8:	4637      	mov	r7, r6
 80081ea:	dc04      	bgt.n	80081f6 <__swbuf_r+0x42>
 80081ec:	4621      	mov	r1, r4
 80081ee:	4628      	mov	r0, r5
 80081f0:	f000 f92e 	bl	8008450 <_fflush_r>
 80081f4:	bb30      	cbnz	r0, 8008244 <__swbuf_r+0x90>
 80081f6:	68a3      	ldr	r3, [r4, #8]
 80081f8:	3b01      	subs	r3, #1
 80081fa:	60a3      	str	r3, [r4, #8]
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	6022      	str	r2, [r4, #0]
 8008202:	701e      	strb	r6, [r3, #0]
 8008204:	6963      	ldr	r3, [r4, #20]
 8008206:	3001      	adds	r0, #1
 8008208:	4283      	cmp	r3, r0
 800820a:	d004      	beq.n	8008216 <__swbuf_r+0x62>
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	07db      	lsls	r3, r3, #31
 8008210:	d506      	bpl.n	8008220 <__swbuf_r+0x6c>
 8008212:	2e0a      	cmp	r6, #10
 8008214:	d104      	bne.n	8008220 <__swbuf_r+0x6c>
 8008216:	4621      	mov	r1, r4
 8008218:	4628      	mov	r0, r5
 800821a:	f000 f919 	bl	8008450 <_fflush_r>
 800821e:	b988      	cbnz	r0, 8008244 <__swbuf_r+0x90>
 8008220:	4638      	mov	r0, r7
 8008222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008224:	4b0a      	ldr	r3, [pc, #40]	; (8008250 <__swbuf_r+0x9c>)
 8008226:	429c      	cmp	r4, r3
 8008228:	d101      	bne.n	800822e <__swbuf_r+0x7a>
 800822a:	68ac      	ldr	r4, [r5, #8]
 800822c:	e7cf      	b.n	80081ce <__swbuf_r+0x1a>
 800822e:	4b09      	ldr	r3, [pc, #36]	; (8008254 <__swbuf_r+0xa0>)
 8008230:	429c      	cmp	r4, r3
 8008232:	bf08      	it	eq
 8008234:	68ec      	ldreq	r4, [r5, #12]
 8008236:	e7ca      	b.n	80081ce <__swbuf_r+0x1a>
 8008238:	4621      	mov	r1, r4
 800823a:	4628      	mov	r0, r5
 800823c:	f000 f80c 	bl	8008258 <__swsetup_r>
 8008240:	2800      	cmp	r0, #0
 8008242:	d0cb      	beq.n	80081dc <__swbuf_r+0x28>
 8008244:	f04f 37ff 	mov.w	r7, #4294967295
 8008248:	e7ea      	b.n	8008220 <__swbuf_r+0x6c>
 800824a:	bf00      	nop
 800824c:	08008e94 	.word	0x08008e94
 8008250:	08008eb4 	.word	0x08008eb4
 8008254:	08008e74 	.word	0x08008e74

08008258 <__swsetup_r>:
 8008258:	4b32      	ldr	r3, [pc, #200]	; (8008324 <__swsetup_r+0xcc>)
 800825a:	b570      	push	{r4, r5, r6, lr}
 800825c:	681d      	ldr	r5, [r3, #0]
 800825e:	4606      	mov	r6, r0
 8008260:	460c      	mov	r4, r1
 8008262:	b125      	cbz	r5, 800826e <__swsetup_r+0x16>
 8008264:	69ab      	ldr	r3, [r5, #24]
 8008266:	b913      	cbnz	r3, 800826e <__swsetup_r+0x16>
 8008268:	4628      	mov	r0, r5
 800826a:	f000 f985 	bl	8008578 <__sinit>
 800826e:	4b2e      	ldr	r3, [pc, #184]	; (8008328 <__swsetup_r+0xd0>)
 8008270:	429c      	cmp	r4, r3
 8008272:	d10f      	bne.n	8008294 <__swsetup_r+0x3c>
 8008274:	686c      	ldr	r4, [r5, #4]
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800827c:	0719      	lsls	r1, r3, #28
 800827e:	d42c      	bmi.n	80082da <__swsetup_r+0x82>
 8008280:	06dd      	lsls	r5, r3, #27
 8008282:	d411      	bmi.n	80082a8 <__swsetup_r+0x50>
 8008284:	2309      	movs	r3, #9
 8008286:	6033      	str	r3, [r6, #0]
 8008288:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	e03e      	b.n	8008312 <__swsetup_r+0xba>
 8008294:	4b25      	ldr	r3, [pc, #148]	; (800832c <__swsetup_r+0xd4>)
 8008296:	429c      	cmp	r4, r3
 8008298:	d101      	bne.n	800829e <__swsetup_r+0x46>
 800829a:	68ac      	ldr	r4, [r5, #8]
 800829c:	e7eb      	b.n	8008276 <__swsetup_r+0x1e>
 800829e:	4b24      	ldr	r3, [pc, #144]	; (8008330 <__swsetup_r+0xd8>)
 80082a0:	429c      	cmp	r4, r3
 80082a2:	bf08      	it	eq
 80082a4:	68ec      	ldreq	r4, [r5, #12]
 80082a6:	e7e6      	b.n	8008276 <__swsetup_r+0x1e>
 80082a8:	0758      	lsls	r0, r3, #29
 80082aa:	d512      	bpl.n	80082d2 <__swsetup_r+0x7a>
 80082ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082ae:	b141      	cbz	r1, 80082c2 <__swsetup_r+0x6a>
 80082b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082b4:	4299      	cmp	r1, r3
 80082b6:	d002      	beq.n	80082be <__swsetup_r+0x66>
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7ff fb67 	bl	800798c <_free_r>
 80082be:	2300      	movs	r3, #0
 80082c0:	6363      	str	r3, [r4, #52]	; 0x34
 80082c2:	89a3      	ldrh	r3, [r4, #12]
 80082c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082c8:	81a3      	strh	r3, [r4, #12]
 80082ca:	2300      	movs	r3, #0
 80082cc:	6063      	str	r3, [r4, #4]
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f043 0308 	orr.w	r3, r3, #8
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	6923      	ldr	r3, [r4, #16]
 80082dc:	b94b      	cbnz	r3, 80082f2 <__swsetup_r+0x9a>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082e8:	d003      	beq.n	80082f2 <__swsetup_r+0x9a>
 80082ea:	4621      	mov	r1, r4
 80082ec:	4630      	mov	r0, r6
 80082ee:	f000 fa07 	bl	8008700 <__smakebuf_r>
 80082f2:	89a0      	ldrh	r0, [r4, #12]
 80082f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082f8:	f010 0301 	ands.w	r3, r0, #1
 80082fc:	d00a      	beq.n	8008314 <__swsetup_r+0xbc>
 80082fe:	2300      	movs	r3, #0
 8008300:	60a3      	str	r3, [r4, #8]
 8008302:	6963      	ldr	r3, [r4, #20]
 8008304:	425b      	negs	r3, r3
 8008306:	61a3      	str	r3, [r4, #24]
 8008308:	6923      	ldr	r3, [r4, #16]
 800830a:	b943      	cbnz	r3, 800831e <__swsetup_r+0xc6>
 800830c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008310:	d1ba      	bne.n	8008288 <__swsetup_r+0x30>
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	0781      	lsls	r1, r0, #30
 8008316:	bf58      	it	pl
 8008318:	6963      	ldrpl	r3, [r4, #20]
 800831a:	60a3      	str	r3, [r4, #8]
 800831c:	e7f4      	b.n	8008308 <__swsetup_r+0xb0>
 800831e:	2000      	movs	r0, #0
 8008320:	e7f7      	b.n	8008312 <__swsetup_r+0xba>
 8008322:	bf00      	nop
 8008324:	2000007c 	.word	0x2000007c
 8008328:	08008e94 	.word	0x08008e94
 800832c:	08008eb4 	.word	0x08008eb4
 8008330:	08008e74 	.word	0x08008e74

08008334 <abort>:
 8008334:	b508      	push	{r3, lr}
 8008336:	2006      	movs	r0, #6
 8008338:	f000 fa52 	bl	80087e0 <raise>
 800833c:	2001      	movs	r0, #1
 800833e:	f7f8 ff9b 	bl	8001278 <_exit>
	...

08008344 <__sflush_r>:
 8008344:	898a      	ldrh	r2, [r1, #12]
 8008346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800834a:	4605      	mov	r5, r0
 800834c:	0710      	lsls	r0, r2, #28
 800834e:	460c      	mov	r4, r1
 8008350:	d458      	bmi.n	8008404 <__sflush_r+0xc0>
 8008352:	684b      	ldr	r3, [r1, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	dc05      	bgt.n	8008364 <__sflush_r+0x20>
 8008358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800835a:	2b00      	cmp	r3, #0
 800835c:	dc02      	bgt.n	8008364 <__sflush_r+0x20>
 800835e:	2000      	movs	r0, #0
 8008360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008366:	2e00      	cmp	r6, #0
 8008368:	d0f9      	beq.n	800835e <__sflush_r+0x1a>
 800836a:	2300      	movs	r3, #0
 800836c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008370:	682f      	ldr	r7, [r5, #0]
 8008372:	602b      	str	r3, [r5, #0]
 8008374:	d032      	beq.n	80083dc <__sflush_r+0x98>
 8008376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	075a      	lsls	r2, r3, #29
 800837c:	d505      	bpl.n	800838a <__sflush_r+0x46>
 800837e:	6863      	ldr	r3, [r4, #4]
 8008380:	1ac0      	subs	r0, r0, r3
 8008382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008384:	b10b      	cbz	r3, 800838a <__sflush_r+0x46>
 8008386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008388:	1ac0      	subs	r0, r0, r3
 800838a:	2300      	movs	r3, #0
 800838c:	4602      	mov	r2, r0
 800838e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008390:	6a21      	ldr	r1, [r4, #32]
 8008392:	4628      	mov	r0, r5
 8008394:	47b0      	blx	r6
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	d106      	bne.n	80083aa <__sflush_r+0x66>
 800839c:	6829      	ldr	r1, [r5, #0]
 800839e:	291d      	cmp	r1, #29
 80083a0:	d82c      	bhi.n	80083fc <__sflush_r+0xb8>
 80083a2:	4a2a      	ldr	r2, [pc, #168]	; (800844c <__sflush_r+0x108>)
 80083a4:	40ca      	lsrs	r2, r1
 80083a6:	07d6      	lsls	r6, r2, #31
 80083a8:	d528      	bpl.n	80083fc <__sflush_r+0xb8>
 80083aa:	2200      	movs	r2, #0
 80083ac:	6062      	str	r2, [r4, #4]
 80083ae:	04d9      	lsls	r1, r3, #19
 80083b0:	6922      	ldr	r2, [r4, #16]
 80083b2:	6022      	str	r2, [r4, #0]
 80083b4:	d504      	bpl.n	80083c0 <__sflush_r+0x7c>
 80083b6:	1c42      	adds	r2, r0, #1
 80083b8:	d101      	bne.n	80083be <__sflush_r+0x7a>
 80083ba:	682b      	ldr	r3, [r5, #0]
 80083bc:	b903      	cbnz	r3, 80083c0 <__sflush_r+0x7c>
 80083be:	6560      	str	r0, [r4, #84]	; 0x54
 80083c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083c2:	602f      	str	r7, [r5, #0]
 80083c4:	2900      	cmp	r1, #0
 80083c6:	d0ca      	beq.n	800835e <__sflush_r+0x1a>
 80083c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083cc:	4299      	cmp	r1, r3
 80083ce:	d002      	beq.n	80083d6 <__sflush_r+0x92>
 80083d0:	4628      	mov	r0, r5
 80083d2:	f7ff fadb 	bl	800798c <_free_r>
 80083d6:	2000      	movs	r0, #0
 80083d8:	6360      	str	r0, [r4, #52]	; 0x34
 80083da:	e7c1      	b.n	8008360 <__sflush_r+0x1c>
 80083dc:	6a21      	ldr	r1, [r4, #32]
 80083de:	2301      	movs	r3, #1
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b0      	blx	r6
 80083e4:	1c41      	adds	r1, r0, #1
 80083e6:	d1c7      	bne.n	8008378 <__sflush_r+0x34>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0c4      	beq.n	8008378 <__sflush_r+0x34>
 80083ee:	2b1d      	cmp	r3, #29
 80083f0:	d001      	beq.n	80083f6 <__sflush_r+0xb2>
 80083f2:	2b16      	cmp	r3, #22
 80083f4:	d101      	bne.n	80083fa <__sflush_r+0xb6>
 80083f6:	602f      	str	r7, [r5, #0]
 80083f8:	e7b1      	b.n	800835e <__sflush_r+0x1a>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008400:	81a3      	strh	r3, [r4, #12]
 8008402:	e7ad      	b.n	8008360 <__sflush_r+0x1c>
 8008404:	690f      	ldr	r7, [r1, #16]
 8008406:	2f00      	cmp	r7, #0
 8008408:	d0a9      	beq.n	800835e <__sflush_r+0x1a>
 800840a:	0793      	lsls	r3, r2, #30
 800840c:	680e      	ldr	r6, [r1, #0]
 800840e:	bf08      	it	eq
 8008410:	694b      	ldreq	r3, [r1, #20]
 8008412:	600f      	str	r7, [r1, #0]
 8008414:	bf18      	it	ne
 8008416:	2300      	movne	r3, #0
 8008418:	eba6 0807 	sub.w	r8, r6, r7
 800841c:	608b      	str	r3, [r1, #8]
 800841e:	f1b8 0f00 	cmp.w	r8, #0
 8008422:	dd9c      	ble.n	800835e <__sflush_r+0x1a>
 8008424:	6a21      	ldr	r1, [r4, #32]
 8008426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008428:	4643      	mov	r3, r8
 800842a:	463a      	mov	r2, r7
 800842c:	4628      	mov	r0, r5
 800842e:	47b0      	blx	r6
 8008430:	2800      	cmp	r0, #0
 8008432:	dc06      	bgt.n	8008442 <__sflush_r+0xfe>
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	e78e      	b.n	8008360 <__sflush_r+0x1c>
 8008442:	4407      	add	r7, r0
 8008444:	eba8 0800 	sub.w	r8, r8, r0
 8008448:	e7e9      	b.n	800841e <__sflush_r+0xda>
 800844a:	bf00      	nop
 800844c:	20400001 	.word	0x20400001

08008450 <_fflush_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	690b      	ldr	r3, [r1, #16]
 8008454:	4605      	mov	r5, r0
 8008456:	460c      	mov	r4, r1
 8008458:	b913      	cbnz	r3, 8008460 <_fflush_r+0x10>
 800845a:	2500      	movs	r5, #0
 800845c:	4628      	mov	r0, r5
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	b118      	cbz	r0, 800846a <_fflush_r+0x1a>
 8008462:	6983      	ldr	r3, [r0, #24]
 8008464:	b90b      	cbnz	r3, 800846a <_fflush_r+0x1a>
 8008466:	f000 f887 	bl	8008578 <__sinit>
 800846a:	4b14      	ldr	r3, [pc, #80]	; (80084bc <_fflush_r+0x6c>)
 800846c:	429c      	cmp	r4, r3
 800846e:	d11b      	bne.n	80084a8 <_fflush_r+0x58>
 8008470:	686c      	ldr	r4, [r5, #4]
 8008472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0ef      	beq.n	800845a <_fflush_r+0xa>
 800847a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800847c:	07d0      	lsls	r0, r2, #31
 800847e:	d404      	bmi.n	800848a <_fflush_r+0x3a>
 8008480:	0599      	lsls	r1, r3, #22
 8008482:	d402      	bmi.n	800848a <_fflush_r+0x3a>
 8008484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008486:	f000 f915 	bl	80086b4 <__retarget_lock_acquire_recursive>
 800848a:	4628      	mov	r0, r5
 800848c:	4621      	mov	r1, r4
 800848e:	f7ff ff59 	bl	8008344 <__sflush_r>
 8008492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008494:	07da      	lsls	r2, r3, #31
 8008496:	4605      	mov	r5, r0
 8008498:	d4e0      	bmi.n	800845c <_fflush_r+0xc>
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	059b      	lsls	r3, r3, #22
 800849e:	d4dd      	bmi.n	800845c <_fflush_r+0xc>
 80084a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084a2:	f000 f908 	bl	80086b6 <__retarget_lock_release_recursive>
 80084a6:	e7d9      	b.n	800845c <_fflush_r+0xc>
 80084a8:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <_fflush_r+0x70>)
 80084aa:	429c      	cmp	r4, r3
 80084ac:	d101      	bne.n	80084b2 <_fflush_r+0x62>
 80084ae:	68ac      	ldr	r4, [r5, #8]
 80084b0:	e7df      	b.n	8008472 <_fflush_r+0x22>
 80084b2:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <_fflush_r+0x74>)
 80084b4:	429c      	cmp	r4, r3
 80084b6:	bf08      	it	eq
 80084b8:	68ec      	ldreq	r4, [r5, #12]
 80084ba:	e7da      	b.n	8008472 <_fflush_r+0x22>
 80084bc:	08008e94 	.word	0x08008e94
 80084c0:	08008eb4 	.word	0x08008eb4
 80084c4:	08008e74 	.word	0x08008e74

080084c8 <std>:
 80084c8:	2300      	movs	r3, #0
 80084ca:	b510      	push	{r4, lr}
 80084cc:	4604      	mov	r4, r0
 80084ce:	e9c0 3300 	strd	r3, r3, [r0]
 80084d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084d6:	6083      	str	r3, [r0, #8]
 80084d8:	8181      	strh	r1, [r0, #12]
 80084da:	6643      	str	r3, [r0, #100]	; 0x64
 80084dc:	81c2      	strh	r2, [r0, #14]
 80084de:	6183      	str	r3, [r0, #24]
 80084e0:	4619      	mov	r1, r3
 80084e2:	2208      	movs	r2, #8
 80084e4:	305c      	adds	r0, #92	; 0x5c
 80084e6:	f7fb fecf 	bl	8004288 <memset>
 80084ea:	4b05      	ldr	r3, [pc, #20]	; (8008500 <std+0x38>)
 80084ec:	6263      	str	r3, [r4, #36]	; 0x24
 80084ee:	4b05      	ldr	r3, [pc, #20]	; (8008504 <std+0x3c>)
 80084f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80084f2:	4b05      	ldr	r3, [pc, #20]	; (8008508 <std+0x40>)
 80084f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084f6:	4b05      	ldr	r3, [pc, #20]	; (800850c <std+0x44>)
 80084f8:	6224      	str	r4, [r4, #32]
 80084fa:	6323      	str	r3, [r4, #48]	; 0x30
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	bf00      	nop
 8008500:	08008819 	.word	0x08008819
 8008504:	0800883b 	.word	0x0800883b
 8008508:	08008873 	.word	0x08008873
 800850c:	08008897 	.word	0x08008897

08008510 <_cleanup_r>:
 8008510:	4901      	ldr	r1, [pc, #4]	; (8008518 <_cleanup_r+0x8>)
 8008512:	f000 b8af 	b.w	8008674 <_fwalk_reent>
 8008516:	bf00      	nop
 8008518:	08008451 	.word	0x08008451

0800851c <__sfmoreglue>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	1e4a      	subs	r2, r1, #1
 8008520:	2568      	movs	r5, #104	; 0x68
 8008522:	4355      	muls	r5, r2
 8008524:	460e      	mov	r6, r1
 8008526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800852a:	f7ff fa7f 	bl	8007a2c <_malloc_r>
 800852e:	4604      	mov	r4, r0
 8008530:	b140      	cbz	r0, 8008544 <__sfmoreglue+0x28>
 8008532:	2100      	movs	r1, #0
 8008534:	e9c0 1600 	strd	r1, r6, [r0]
 8008538:	300c      	adds	r0, #12
 800853a:	60a0      	str	r0, [r4, #8]
 800853c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008540:	f7fb fea2 	bl	8004288 <memset>
 8008544:	4620      	mov	r0, r4
 8008546:	bd70      	pop	{r4, r5, r6, pc}

08008548 <__sfp_lock_acquire>:
 8008548:	4801      	ldr	r0, [pc, #4]	; (8008550 <__sfp_lock_acquire+0x8>)
 800854a:	f000 b8b3 	b.w	80086b4 <__retarget_lock_acquire_recursive>
 800854e:	bf00      	nop
 8008550:	200004f4 	.word	0x200004f4

08008554 <__sfp_lock_release>:
 8008554:	4801      	ldr	r0, [pc, #4]	; (800855c <__sfp_lock_release+0x8>)
 8008556:	f000 b8ae 	b.w	80086b6 <__retarget_lock_release_recursive>
 800855a:	bf00      	nop
 800855c:	200004f4 	.word	0x200004f4

08008560 <__sinit_lock_acquire>:
 8008560:	4801      	ldr	r0, [pc, #4]	; (8008568 <__sinit_lock_acquire+0x8>)
 8008562:	f000 b8a7 	b.w	80086b4 <__retarget_lock_acquire_recursive>
 8008566:	bf00      	nop
 8008568:	200004ef 	.word	0x200004ef

0800856c <__sinit_lock_release>:
 800856c:	4801      	ldr	r0, [pc, #4]	; (8008574 <__sinit_lock_release+0x8>)
 800856e:	f000 b8a2 	b.w	80086b6 <__retarget_lock_release_recursive>
 8008572:	bf00      	nop
 8008574:	200004ef 	.word	0x200004ef

08008578 <__sinit>:
 8008578:	b510      	push	{r4, lr}
 800857a:	4604      	mov	r4, r0
 800857c:	f7ff fff0 	bl	8008560 <__sinit_lock_acquire>
 8008580:	69a3      	ldr	r3, [r4, #24]
 8008582:	b11b      	cbz	r3, 800858c <__sinit+0x14>
 8008584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008588:	f7ff bff0 	b.w	800856c <__sinit_lock_release>
 800858c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008590:	6523      	str	r3, [r4, #80]	; 0x50
 8008592:	4b13      	ldr	r3, [pc, #76]	; (80085e0 <__sinit+0x68>)
 8008594:	4a13      	ldr	r2, [pc, #76]	; (80085e4 <__sinit+0x6c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	62a2      	str	r2, [r4, #40]	; 0x28
 800859a:	42a3      	cmp	r3, r4
 800859c:	bf04      	itt	eq
 800859e:	2301      	moveq	r3, #1
 80085a0:	61a3      	streq	r3, [r4, #24]
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 f820 	bl	80085e8 <__sfp>
 80085a8:	6060      	str	r0, [r4, #4]
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 f81c 	bl	80085e8 <__sfp>
 80085b0:	60a0      	str	r0, [r4, #8]
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 f818 	bl	80085e8 <__sfp>
 80085b8:	2200      	movs	r2, #0
 80085ba:	60e0      	str	r0, [r4, #12]
 80085bc:	2104      	movs	r1, #4
 80085be:	6860      	ldr	r0, [r4, #4]
 80085c0:	f7ff ff82 	bl	80084c8 <std>
 80085c4:	68a0      	ldr	r0, [r4, #8]
 80085c6:	2201      	movs	r2, #1
 80085c8:	2109      	movs	r1, #9
 80085ca:	f7ff ff7d 	bl	80084c8 <std>
 80085ce:	68e0      	ldr	r0, [r4, #12]
 80085d0:	2202      	movs	r2, #2
 80085d2:	2112      	movs	r1, #18
 80085d4:	f7ff ff78 	bl	80084c8 <std>
 80085d8:	2301      	movs	r3, #1
 80085da:	61a3      	str	r3, [r4, #24]
 80085dc:	e7d2      	b.n	8008584 <__sinit+0xc>
 80085de:	bf00      	nop
 80085e0:	08008a20 	.word	0x08008a20
 80085e4:	08008511 	.word	0x08008511

080085e8 <__sfp>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	4607      	mov	r7, r0
 80085ec:	f7ff ffac 	bl	8008548 <__sfp_lock_acquire>
 80085f0:	4b1e      	ldr	r3, [pc, #120]	; (800866c <__sfp+0x84>)
 80085f2:	681e      	ldr	r6, [r3, #0]
 80085f4:	69b3      	ldr	r3, [r6, #24]
 80085f6:	b913      	cbnz	r3, 80085fe <__sfp+0x16>
 80085f8:	4630      	mov	r0, r6
 80085fa:	f7ff ffbd 	bl	8008578 <__sinit>
 80085fe:	3648      	adds	r6, #72	; 0x48
 8008600:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008604:	3b01      	subs	r3, #1
 8008606:	d503      	bpl.n	8008610 <__sfp+0x28>
 8008608:	6833      	ldr	r3, [r6, #0]
 800860a:	b30b      	cbz	r3, 8008650 <__sfp+0x68>
 800860c:	6836      	ldr	r6, [r6, #0]
 800860e:	e7f7      	b.n	8008600 <__sfp+0x18>
 8008610:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008614:	b9d5      	cbnz	r5, 800864c <__sfp+0x64>
 8008616:	4b16      	ldr	r3, [pc, #88]	; (8008670 <__sfp+0x88>)
 8008618:	60e3      	str	r3, [r4, #12]
 800861a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800861e:	6665      	str	r5, [r4, #100]	; 0x64
 8008620:	f000 f847 	bl	80086b2 <__retarget_lock_init_recursive>
 8008624:	f7ff ff96 	bl	8008554 <__sfp_lock_release>
 8008628:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800862c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008630:	6025      	str	r5, [r4, #0]
 8008632:	61a5      	str	r5, [r4, #24]
 8008634:	2208      	movs	r2, #8
 8008636:	4629      	mov	r1, r5
 8008638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800863c:	f7fb fe24 	bl	8004288 <memset>
 8008640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008648:	4620      	mov	r0, r4
 800864a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800864c:	3468      	adds	r4, #104	; 0x68
 800864e:	e7d9      	b.n	8008604 <__sfp+0x1c>
 8008650:	2104      	movs	r1, #4
 8008652:	4638      	mov	r0, r7
 8008654:	f7ff ff62 	bl	800851c <__sfmoreglue>
 8008658:	4604      	mov	r4, r0
 800865a:	6030      	str	r0, [r6, #0]
 800865c:	2800      	cmp	r0, #0
 800865e:	d1d5      	bne.n	800860c <__sfp+0x24>
 8008660:	f7ff ff78 	bl	8008554 <__sfp_lock_release>
 8008664:	230c      	movs	r3, #12
 8008666:	603b      	str	r3, [r7, #0]
 8008668:	e7ee      	b.n	8008648 <__sfp+0x60>
 800866a:	bf00      	nop
 800866c:	08008a20 	.word	0x08008a20
 8008670:	ffff0001 	.word	0xffff0001

08008674 <_fwalk_reent>:
 8008674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008678:	4606      	mov	r6, r0
 800867a:	4688      	mov	r8, r1
 800867c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008680:	2700      	movs	r7, #0
 8008682:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008686:	f1b9 0901 	subs.w	r9, r9, #1
 800868a:	d505      	bpl.n	8008698 <_fwalk_reent+0x24>
 800868c:	6824      	ldr	r4, [r4, #0]
 800868e:	2c00      	cmp	r4, #0
 8008690:	d1f7      	bne.n	8008682 <_fwalk_reent+0xe>
 8008692:	4638      	mov	r0, r7
 8008694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008698:	89ab      	ldrh	r3, [r5, #12]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d907      	bls.n	80086ae <_fwalk_reent+0x3a>
 800869e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086a2:	3301      	adds	r3, #1
 80086a4:	d003      	beq.n	80086ae <_fwalk_reent+0x3a>
 80086a6:	4629      	mov	r1, r5
 80086a8:	4630      	mov	r0, r6
 80086aa:	47c0      	blx	r8
 80086ac:	4307      	orrs	r7, r0
 80086ae:	3568      	adds	r5, #104	; 0x68
 80086b0:	e7e9      	b.n	8008686 <_fwalk_reent+0x12>

080086b2 <__retarget_lock_init_recursive>:
 80086b2:	4770      	bx	lr

080086b4 <__retarget_lock_acquire_recursive>:
 80086b4:	4770      	bx	lr

080086b6 <__retarget_lock_release_recursive>:
 80086b6:	4770      	bx	lr

080086b8 <__swhatbuf_r>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	460e      	mov	r6, r1
 80086bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c0:	2900      	cmp	r1, #0
 80086c2:	b096      	sub	sp, #88	; 0x58
 80086c4:	4614      	mov	r4, r2
 80086c6:	461d      	mov	r5, r3
 80086c8:	da07      	bge.n	80086da <__swhatbuf_r+0x22>
 80086ca:	2300      	movs	r3, #0
 80086cc:	602b      	str	r3, [r5, #0]
 80086ce:	89b3      	ldrh	r3, [r6, #12]
 80086d0:	061a      	lsls	r2, r3, #24
 80086d2:	d410      	bmi.n	80086f6 <__swhatbuf_r+0x3e>
 80086d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086d8:	e00e      	b.n	80086f8 <__swhatbuf_r+0x40>
 80086da:	466a      	mov	r2, sp
 80086dc:	f000 f902 	bl	80088e4 <_fstat_r>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	dbf2      	blt.n	80086ca <__swhatbuf_r+0x12>
 80086e4:	9a01      	ldr	r2, [sp, #4]
 80086e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086ee:	425a      	negs	r2, r3
 80086f0:	415a      	adcs	r2, r3
 80086f2:	602a      	str	r2, [r5, #0]
 80086f4:	e7ee      	b.n	80086d4 <__swhatbuf_r+0x1c>
 80086f6:	2340      	movs	r3, #64	; 0x40
 80086f8:	2000      	movs	r0, #0
 80086fa:	6023      	str	r3, [r4, #0]
 80086fc:	b016      	add	sp, #88	; 0x58
 80086fe:	bd70      	pop	{r4, r5, r6, pc}

08008700 <__smakebuf_r>:
 8008700:	898b      	ldrh	r3, [r1, #12]
 8008702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008704:	079d      	lsls	r5, r3, #30
 8008706:	4606      	mov	r6, r0
 8008708:	460c      	mov	r4, r1
 800870a:	d507      	bpl.n	800871c <__smakebuf_r+0x1c>
 800870c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	6123      	str	r3, [r4, #16]
 8008714:	2301      	movs	r3, #1
 8008716:	6163      	str	r3, [r4, #20]
 8008718:	b002      	add	sp, #8
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	ab01      	add	r3, sp, #4
 800871e:	466a      	mov	r2, sp
 8008720:	f7ff ffca 	bl	80086b8 <__swhatbuf_r>
 8008724:	9900      	ldr	r1, [sp, #0]
 8008726:	4605      	mov	r5, r0
 8008728:	4630      	mov	r0, r6
 800872a:	f7ff f97f 	bl	8007a2c <_malloc_r>
 800872e:	b948      	cbnz	r0, 8008744 <__smakebuf_r+0x44>
 8008730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008734:	059a      	lsls	r2, r3, #22
 8008736:	d4ef      	bmi.n	8008718 <__smakebuf_r+0x18>
 8008738:	f023 0303 	bic.w	r3, r3, #3
 800873c:	f043 0302 	orr.w	r3, r3, #2
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	e7e3      	b.n	800870c <__smakebuf_r+0xc>
 8008744:	4b0d      	ldr	r3, [pc, #52]	; (800877c <__smakebuf_r+0x7c>)
 8008746:	62b3      	str	r3, [r6, #40]	; 0x28
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	6020      	str	r0, [r4, #0]
 800874c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008750:	81a3      	strh	r3, [r4, #12]
 8008752:	9b00      	ldr	r3, [sp, #0]
 8008754:	6163      	str	r3, [r4, #20]
 8008756:	9b01      	ldr	r3, [sp, #4]
 8008758:	6120      	str	r0, [r4, #16]
 800875a:	b15b      	cbz	r3, 8008774 <__smakebuf_r+0x74>
 800875c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008760:	4630      	mov	r0, r6
 8008762:	f000 f8d1 	bl	8008908 <_isatty_r>
 8008766:	b128      	cbz	r0, 8008774 <__smakebuf_r+0x74>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f023 0303 	bic.w	r3, r3, #3
 800876e:	f043 0301 	orr.w	r3, r3, #1
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	89a0      	ldrh	r0, [r4, #12]
 8008776:	4305      	orrs	r5, r0
 8008778:	81a5      	strh	r5, [r4, #12]
 800877a:	e7cd      	b.n	8008718 <__smakebuf_r+0x18>
 800877c:	08008511 	.word	0x08008511

08008780 <_malloc_usable_size_r>:
 8008780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008784:	1f18      	subs	r0, r3, #4
 8008786:	2b00      	cmp	r3, #0
 8008788:	bfbc      	itt	lt
 800878a:	580b      	ldrlt	r3, [r1, r0]
 800878c:	18c0      	addlt	r0, r0, r3
 800878e:	4770      	bx	lr

08008790 <_raise_r>:
 8008790:	291f      	cmp	r1, #31
 8008792:	b538      	push	{r3, r4, r5, lr}
 8008794:	4604      	mov	r4, r0
 8008796:	460d      	mov	r5, r1
 8008798:	d904      	bls.n	80087a4 <_raise_r+0x14>
 800879a:	2316      	movs	r3, #22
 800879c:	6003      	str	r3, [r0, #0]
 800879e:	f04f 30ff 	mov.w	r0, #4294967295
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087a6:	b112      	cbz	r2, 80087ae <_raise_r+0x1e>
 80087a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087ac:	b94b      	cbnz	r3, 80087c2 <_raise_r+0x32>
 80087ae:	4620      	mov	r0, r4
 80087b0:	f000 f830 	bl	8008814 <_getpid_r>
 80087b4:	462a      	mov	r2, r5
 80087b6:	4601      	mov	r1, r0
 80087b8:	4620      	mov	r0, r4
 80087ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087be:	f000 b817 	b.w	80087f0 <_kill_r>
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d00a      	beq.n	80087dc <_raise_r+0x4c>
 80087c6:	1c59      	adds	r1, r3, #1
 80087c8:	d103      	bne.n	80087d2 <_raise_r+0x42>
 80087ca:	2316      	movs	r3, #22
 80087cc:	6003      	str	r3, [r0, #0]
 80087ce:	2001      	movs	r0, #1
 80087d0:	e7e7      	b.n	80087a2 <_raise_r+0x12>
 80087d2:	2400      	movs	r4, #0
 80087d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087d8:	4628      	mov	r0, r5
 80087da:	4798      	blx	r3
 80087dc:	2000      	movs	r0, #0
 80087de:	e7e0      	b.n	80087a2 <_raise_r+0x12>

080087e0 <raise>:
 80087e0:	4b02      	ldr	r3, [pc, #8]	; (80087ec <raise+0xc>)
 80087e2:	4601      	mov	r1, r0
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	f7ff bfd3 	b.w	8008790 <_raise_r>
 80087ea:	bf00      	nop
 80087ec:	2000007c 	.word	0x2000007c

080087f0 <_kill_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4d07      	ldr	r5, [pc, #28]	; (8008810 <_kill_r+0x20>)
 80087f4:	2300      	movs	r3, #0
 80087f6:	4604      	mov	r4, r0
 80087f8:	4608      	mov	r0, r1
 80087fa:	4611      	mov	r1, r2
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	f7f8 fd2b 	bl	8001258 <_kill>
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	d102      	bne.n	800880c <_kill_r+0x1c>
 8008806:	682b      	ldr	r3, [r5, #0]
 8008808:	b103      	cbz	r3, 800880c <_kill_r+0x1c>
 800880a:	6023      	str	r3, [r4, #0]
 800880c:	bd38      	pop	{r3, r4, r5, pc}
 800880e:	bf00      	nop
 8008810:	200004e8 	.word	0x200004e8

08008814 <_getpid_r>:
 8008814:	f7f8 bd18 	b.w	8001248 <_getpid>

08008818 <__sread>:
 8008818:	b510      	push	{r4, lr}
 800881a:	460c      	mov	r4, r1
 800881c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008820:	f000 f894 	bl	800894c <_read_r>
 8008824:	2800      	cmp	r0, #0
 8008826:	bfab      	itete	ge
 8008828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800882a:	89a3      	ldrhlt	r3, [r4, #12]
 800882c:	181b      	addge	r3, r3, r0
 800882e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008832:	bfac      	ite	ge
 8008834:	6563      	strge	r3, [r4, #84]	; 0x54
 8008836:	81a3      	strhlt	r3, [r4, #12]
 8008838:	bd10      	pop	{r4, pc}

0800883a <__swrite>:
 800883a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800883e:	461f      	mov	r7, r3
 8008840:	898b      	ldrh	r3, [r1, #12]
 8008842:	05db      	lsls	r3, r3, #23
 8008844:	4605      	mov	r5, r0
 8008846:	460c      	mov	r4, r1
 8008848:	4616      	mov	r6, r2
 800884a:	d505      	bpl.n	8008858 <__swrite+0x1e>
 800884c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008850:	2302      	movs	r3, #2
 8008852:	2200      	movs	r2, #0
 8008854:	f000 f868 	bl	8008928 <_lseek_r>
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800885e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008862:	81a3      	strh	r3, [r4, #12]
 8008864:	4632      	mov	r2, r6
 8008866:	463b      	mov	r3, r7
 8008868:	4628      	mov	r0, r5
 800886a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800886e:	f000 b817 	b.w	80088a0 <_write_r>

08008872 <__sseek>:
 8008872:	b510      	push	{r4, lr}
 8008874:	460c      	mov	r4, r1
 8008876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887a:	f000 f855 	bl	8008928 <_lseek_r>
 800887e:	1c43      	adds	r3, r0, #1
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	bf15      	itete	ne
 8008884:	6560      	strne	r0, [r4, #84]	; 0x54
 8008886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800888a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800888e:	81a3      	strheq	r3, [r4, #12]
 8008890:	bf18      	it	ne
 8008892:	81a3      	strhne	r3, [r4, #12]
 8008894:	bd10      	pop	{r4, pc}

08008896 <__sclose>:
 8008896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889a:	f000 b813 	b.w	80088c4 <_close_r>
	...

080088a0 <_write_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4d07      	ldr	r5, [pc, #28]	; (80088c0 <_write_r+0x20>)
 80088a4:	4604      	mov	r4, r0
 80088a6:	4608      	mov	r0, r1
 80088a8:	4611      	mov	r1, r2
 80088aa:	2200      	movs	r2, #0
 80088ac:	602a      	str	r2, [r5, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	f7f8 fd09 	bl	80012c6 <_write>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_write_r+0x1e>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	b103      	cbz	r3, 80088be <_write_r+0x1e>
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	200004e8 	.word	0x200004e8

080088c4 <_close_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	4d06      	ldr	r5, [pc, #24]	; (80088e0 <_close_r+0x1c>)
 80088c8:	2300      	movs	r3, #0
 80088ca:	4604      	mov	r4, r0
 80088cc:	4608      	mov	r0, r1
 80088ce:	602b      	str	r3, [r5, #0]
 80088d0:	f7f8 fd15 	bl	80012fe <_close>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_close_r+0x1a>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	b103      	cbz	r3, 80088de <_close_r+0x1a>
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	200004e8 	.word	0x200004e8

080088e4 <_fstat_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4d07      	ldr	r5, [pc, #28]	; (8008904 <_fstat_r+0x20>)
 80088e8:	2300      	movs	r3, #0
 80088ea:	4604      	mov	r4, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	4611      	mov	r1, r2
 80088f0:	602b      	str	r3, [r5, #0]
 80088f2:	f7f8 fd10 	bl	8001316 <_fstat>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d102      	bne.n	8008900 <_fstat_r+0x1c>
 80088fa:	682b      	ldr	r3, [r5, #0]
 80088fc:	b103      	cbz	r3, 8008900 <_fstat_r+0x1c>
 80088fe:	6023      	str	r3, [r4, #0]
 8008900:	bd38      	pop	{r3, r4, r5, pc}
 8008902:	bf00      	nop
 8008904:	200004e8 	.word	0x200004e8

08008908 <_isatty_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	4d06      	ldr	r5, [pc, #24]	; (8008924 <_isatty_r+0x1c>)
 800890c:	2300      	movs	r3, #0
 800890e:	4604      	mov	r4, r0
 8008910:	4608      	mov	r0, r1
 8008912:	602b      	str	r3, [r5, #0]
 8008914:	f7f8 fd0f 	bl	8001336 <_isatty>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d102      	bne.n	8008922 <_isatty_r+0x1a>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	b103      	cbz	r3, 8008922 <_isatty_r+0x1a>
 8008920:	6023      	str	r3, [r4, #0]
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	200004e8 	.word	0x200004e8

08008928 <_lseek_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4d07      	ldr	r5, [pc, #28]	; (8008948 <_lseek_r+0x20>)
 800892c:	4604      	mov	r4, r0
 800892e:	4608      	mov	r0, r1
 8008930:	4611      	mov	r1, r2
 8008932:	2200      	movs	r2, #0
 8008934:	602a      	str	r2, [r5, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	f7f8 fd08 	bl	800134c <_lseek>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_lseek_r+0x1e>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	b103      	cbz	r3, 8008946 <_lseek_r+0x1e>
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	200004e8 	.word	0x200004e8

0800894c <_read_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4d07      	ldr	r5, [pc, #28]	; (800896c <_read_r+0x20>)
 8008950:	4604      	mov	r4, r0
 8008952:	4608      	mov	r0, r1
 8008954:	4611      	mov	r1, r2
 8008956:	2200      	movs	r2, #0
 8008958:	602a      	str	r2, [r5, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	f7f8 fc96 	bl	800128c <_read>
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	d102      	bne.n	800896a <_read_r+0x1e>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	b103      	cbz	r3, 800896a <_read_r+0x1e>
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	200004e8 	.word	0x200004e8

08008970 <_init>:
 8008970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008972:	bf00      	nop
 8008974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008976:	bc08      	pop	{r3}
 8008978:	469e      	mov	lr, r3
 800897a:	4770      	bx	lr

0800897c <_fini>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	bf00      	nop
 8008980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008982:	bc08      	pop	{r3}
 8008984:	469e      	mov	lr, r3
 8008986:	4770      	bx	lr
